{"remainingRequest":"/var/www/html/boss-web/node_modules/babel-loader/lib/index.js!/var/www/html/boss-web/src/store/modules/property.js","dependencies":[{"path":"/var/www/html/boss-web/src/store/modules/property.js","mtime":1611164378571},{"path":"/var/www/html/boss-web/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/var/www/html/boss-web/node_modules/babel-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"sources":["/var/www/html/boss-web/src/store/modules/property.js"],"names":["axios","baseUrl","process","env","VUE_APP_API_URL","oneDocToken","VUE_APP_ONE_DOC_TOKEN","router","getDefaultPropertyState","currentPropertyStep","buildingApplication","buildingBasicInformation","buildingDetails","buildingOtherDetails","buildingBasicInfoHasError","buildingDetailsHasError","buildingOtherDetailsHasError","buildingStepOneErrors","basic_information","buildingStepTwoErrors","building_details","building_other_details","buildingApplications","buildingProfiles","buildingApplicationRequirements","buildingRequirements","draftProperty","realPropertyProfiles","applicationRemarks","legalDocuments","technicalDocuments","supplementaryDocuments","designPlans","designSpecs","currentBuildingId","buildingSearch","propertyFilterBy","buildingAssessmentMessage","buildingAssessmentResult","buildingDeptCanAssess","isLastBuildingDept","forBuildingAssessmentList","assessedBuildingList","isBuildingAssessment","isAssessmentHasError","isEvaluation","isFileUploadFailed","currentSelectedProperty","buildingAssessmentPayload","propertyPageCount","state","getters","mutations","setCurrentPropertyStep","resetPropertyState","Object","assign","setBuildingApplication","setBuildingBasicInformation","setBuildingDetails","setBuildingOtherDetails","setBuildingBasicInfoHasError","setBuildingDetailsHasError","setBuildingOtherDetailsHasError","buildingSetStepOneErrors","key","value","buildingSetStepTwoErrors","setBuildingApplications","setBuildingProfiles","setDraftProperty","setBuildingApplicationRequirements","setBuildingRequirements","setRealPropertyProfiles","setApplicationRemarks","setLegalDocuments","setTechnicalDocuments","setSupplementaryDocuments","setCurrentBuildingId","setBuildingSearch","setDesignPlans","setDesignSpecs","setPropertyFilterBy","setBuildingAssessmentMessage","setBuildingAssessmentResult","setBuildingDeptCanAssess","setIsLastBuildingDept","setForBuildingAssessmentList","setAssessedBuildingList","setIsBuildingAssessment","setIsAssessmentHasError","setIsEvaluation","setIsFileUploadFailed","setCurrentSelectedProperty","setBuildingAssessmentPayload","setPropertyPageCount","actions","getBuildingApplication","payload","commit","get","headers","Authorization","authToken","response","application","id","data","is_draft","is_approve","is_disapprove","created_at","application_status","buildingbasicinformation","buildingdetails","buildingotherdetails","buildingapplicationrequirements","push","name","console","log","setBuildingCheckList","post","JSON","parse","updateBuildingCheckList","put","setApplicationStateRemarks","propertyEnrollment","dispatch","config","approveBuildingApplication","action","status","type","title","message","getAllBuildingApplications","page","total_pages","results","getBuildingApplications","getBuildingProfiles","getRealPropertyProfiles","addBuildingApplication","updateBuildingApplication","addBuildingBasicInformation","application_number","errors","updateBuildingBasicInformation","addBuildingDetails","addBuildingOtherDetails","updateBuildingDetails","updateBuildingOtherDetails","addBuildingApplicationRequirements","uploadBuildingRequirements","getBuildingApplicationRequirements","params","buildingrequirements","filter","item","is_active","buildingchecklist","length","map","category","assessBuildingApplication","detail","getBuildingAssessmentResult","checkBuildingDeptCanAssess","can_assess","last_department","getForBuildingAssessmentList","getAssessedBuildingList","resetBuildingAssessment","getUserBuildingAssessmentResult"],"mappings":";;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,IAAMC,OAAO,GAAGC,OAAO,CAACC,GAAR,CAAYC,eAA5B;AACA,IAAMC,WAAW,GAAGH,OAAO,CAACC,GAAR,CAAYG,qBAAhC;AACA,OAAOC,MAAP,MAAmB,uBAAnB;;AACA,IAAMC,uBAAuB,GAAG,SAA1BA,uBAA0B,GAAM;AACpC,SAAO;AACLC,IAAAA,mBAAmB,EAAE,GADhB;AAELC,IAAAA,mBAAmB,EAAE,EAFhB;AAGLC,IAAAA,wBAAwB,EAAE,EAHrB;AAILC,IAAAA,eAAe,EAAE,EAJZ;AAKLC,IAAAA,oBAAoB,EAAE,EALjB;AAMLC,IAAAA,yBAAyB,EAAE,KANtB;AAOLC,IAAAA,uBAAuB,EAAE,KAPpB;AAQLC,IAAAA,4BAA4B,EAAE,KARzB;AASLC,IAAAA,qBAAqB,EAAE;AACrBC,MAAAA,iBAAiB,EAAE;AADE,KATlB;AAYLC,IAAAA,qBAAqB,EAAE;AACrBC,MAAAA,gBAAgB,EAAE,EADG;AAErBC,MAAAA,sBAAsB,EAAE;AAFH,KAZlB;AAgBLC,IAAAA,oBAAoB,EAAE,EAhBjB;AAiBLC,IAAAA,gBAAgB,EAAE,EAjBb;AAkBLC,IAAAA,+BAA+B,EAAE,EAlB5B;AAmBLC,IAAAA,oBAAoB,EAAE,EAnBjB;AAoBLC,IAAAA,aAAa,EAAE,KApBV;AAqBLC,IAAAA,oBAAoB,EAAE,EArBjB;AAsBLC,IAAAA,kBAAkB,EAAE,EAtBf;AAuBLC,IAAAA,cAAc,EAAE,EAvBX;AAwBLC,IAAAA,kBAAkB,EAAE,EAxBf;AAyBLC,IAAAA,sBAAsB,EAAE,EAzBnB;AA0BLC,IAAAA,WAAW,EAAE,EA1BR;AA2BLC,IAAAA,WAAW,EAAE,EA3BR;AA4BLC,IAAAA,iBAAiB,EAAE,CA5Bd;AA6BLC,IAAAA,cAAc,EAAE,EA7BX;AA8BLC,IAAAA,gBAAgB,EAAE,KA9Bb;AA+BLC,IAAAA,yBAAyB,EAAE,EA/BtB;AAgCLC,IAAAA,wBAAwB,EAAE,EAhCrB;AAiCLC,IAAAA,qBAAqB,EAAE,KAjClB;AAkCLC,IAAAA,kBAAkB,EAAE,KAlCf;AAmCLC,IAAAA,yBAAyB,EAAE,EAnCtB;AAoCLC,IAAAA,oBAAoB,EAAE,EApCjB;AAqCLC,IAAAA,oBAAoB,EAAE,KArCjB;AAsCLC,IAAAA,oBAAoB,EAAE,KAtCjB;AAuCLC,IAAAA,YAAY,EAAE,KAvCT;AAwCLC,IAAAA,kBAAkB,EAAE,KAxCf;AAyCLC,IAAAA,uBAAuB,EAAE,EAzCpB;AA0CLC,IAAAA,yBAAyB,EAAE,EA1CtB;AA2CLC,IAAAA,iBAAiB,EAAE;AA3Cd,GAAP;AA6CD,CA9CD;;AAgDA,IAAMC,KAAK,GAAG1C,uBAAuB,EAArC;AAEA,IAAM2C,OAAO,GAAG;AACd1C,EAAAA,mBAAmB,EAAE,6BAACyC,KAAD;AAAA,WAAWA,KAAK,CAACzC,mBAAjB;AAAA,GADP;AAEdC,EAAAA,mBAAmB,EAAE,6BAACwC,KAAD;AAAA,WAAWA,KAAK,CAACxC,mBAAjB;AAAA,GAFP;AAGdC,EAAAA,wBAAwB,EAAE,kCAACuC,KAAD;AAAA,WAAWA,KAAK,CAACvC,wBAAjB;AAAA,GAHZ;AAIdC,EAAAA,eAAe,EAAE,yBAACsC,KAAD;AAAA,WAAWA,KAAK,CAACtC,eAAjB;AAAA,GAJH;AAKdC,EAAAA,oBAAoB,EAAE,8BAACqC,KAAD;AAAA,WAAWA,KAAK,CAACrC,oBAAjB;AAAA,GALR;AAMdC,EAAAA,yBAAyB,EAAE,mCAACoC,KAAD;AAAA,WAAWA,KAAK,CAACpC,yBAAjB;AAAA,GANb;AAOdC,EAAAA,uBAAuB,EAAE,iCAACmC,KAAD;AAAA,WAAWA,KAAK,CAACnC,uBAAjB;AAAA,GAPX;AAQdC,EAAAA,4BAA4B,EAAE,sCAACkC,KAAD;AAAA,WAAWA,KAAK,CAAClC,4BAAjB;AAAA,GARhB;AASdC,EAAAA,qBAAqB,EAAE,+BAACiC,KAAD;AAAA,WAAWA,KAAK,CAACjC,qBAAjB;AAAA,GATT;AAUdE,EAAAA,qBAAqB,EAAE,+BAAC+B,KAAD;AAAA,WAAWA,KAAK,CAAC/B,qBAAjB;AAAA,GAVT;AAWdG,EAAAA,oBAAoB,EAAE,8BAAC4B,KAAD;AAAA,WAAWA,KAAK,CAAC5B,oBAAjB;AAAA,GAXR;AAYdC,EAAAA,gBAAgB,EAAE,0BAAC2B,KAAD;AAAA,WAAWA,KAAK,CAAC3B,gBAAjB;AAAA,GAZJ;AAadG,EAAAA,aAAa,EAAE,uBAACwB,KAAD;AAAA,WAAWA,KAAK,CAACxB,aAAjB;AAAA,GAbD;AAcdF,EAAAA,+BAA+B,EAAE,yCAAC0B,KAAD;AAAA,WAC/BA,KAAK,CAAC1B,+BADyB;AAAA,GAdnB;AAgBdC,EAAAA,oBAAoB,EAAE,8BAACyB,KAAD;AAAA,WAAWA,KAAK,CAACzB,oBAAjB;AAAA,GAhBR;AAiBdE,EAAAA,oBAAoB,EAAE,8BAACuB,KAAD;AAAA,WAAWA,KAAK,CAACvB,oBAAjB;AAAA,GAjBR;AAkBdC,EAAAA,kBAAkB,EAAE,4BAACsB,KAAD;AAAA,WAAWA,KAAK,CAACtB,kBAAjB;AAAA,GAlBN;AAmBdC,EAAAA,cAAc,EAAE,wBAACqB,KAAD;AAAA,WAAWA,KAAK,CAACrB,cAAjB;AAAA,GAnBF;AAoBdC,EAAAA,kBAAkB,EAAE,4BAACoB,KAAD;AAAA,WAAWA,KAAK,CAACpB,kBAAjB;AAAA,GApBN;AAqBdC,EAAAA,sBAAsB,EAAE,gCAACmB,KAAD;AAAA,WAAWA,KAAK,CAACnB,sBAAjB;AAAA,GArBV;AAsBdC,EAAAA,WAAW,EAAE,qBAACkB,KAAD;AAAA,WAAWA,KAAK,CAAClB,WAAjB;AAAA,GAtBC;AAuBdC,EAAAA,WAAW,EAAE,qBAACiB,KAAD;AAAA,WAAWA,KAAK,CAACjB,WAAjB;AAAA,GAvBC;AAwBdC,EAAAA,iBAAiB,EAAE,2BAACgB,KAAD;AAAA,WAAWA,KAAK,CAAChB,iBAAjB;AAAA,GAxBL;AAyBdC,EAAAA,cAAc,EAAE,wBAACe,KAAD;AAAA,WAAWA,KAAK,CAACf,cAAjB;AAAA,GAzBF;AA0BdC,EAAAA,gBAAgB,EAAE,0BAACc,KAAD;AAAA,WAAWA,KAAK,CAACd,gBAAjB;AAAA,GA1BJ;AA2BdC,EAAAA,yBAAyB,EAAE,mCAACa,KAAD;AAAA,WAAWA,KAAK,CAACb,yBAAjB;AAAA,GA3Bb;AA4BdC,EAAAA,wBAAwB,EAAE,kCAACY,KAAD;AAAA,WAAWA,KAAK,CAACZ,wBAAjB;AAAA,GA5BZ;AA6BdC,EAAAA,qBAAqB,EAAE,+BAACW,KAAD;AAAA,WAAWA,KAAK,CAACX,qBAAjB;AAAA,GA7BT;AA8BdC,EAAAA,kBAAkB,EAAE,4BAACU,KAAD;AAAA,WAAWA,KAAK,CAACV,kBAAjB;AAAA,GA9BN;AA+BdC,EAAAA,yBAAyB,EAAE,mCAACS,KAAD;AAAA,WAAWA,KAAK,CAACT,yBAAjB;AAAA,GA/Bb;AAgCdC,EAAAA,oBAAoB,EAAE,8BAACQ,KAAD;AAAA,WAAWA,KAAK,CAACR,oBAAjB;AAAA,GAhCR;AAiCdC,EAAAA,oBAAoB,EAAE,8BAACO,KAAD;AAAA,WAAWA,KAAK,CAACP,oBAAjB;AAAA,GAjCR;AAkCdC,EAAAA,oBAAoB,EAAE,8BAACM,KAAD;AAAA,WAAWA,KAAK,CAACN,oBAAjB;AAAA,GAlCR;AAmCdC,EAAAA,YAAY,EAAE,sBAACK,KAAD;AAAA,WAAWA,KAAK,CAACL,YAAjB;AAAA,GAnCA;AAoCdC,EAAAA,kBAAkB,EAAE,4BAACI,KAAD;AAAA,WAAWA,KAAK,CAACJ,kBAAjB;AAAA,GApCN;AAqCdC,EAAAA,uBAAuB,EAAE,iCAACG,KAAD;AAAA,WAAWA,KAAK,CAACH,uBAAjB;AAAA,GArCX;AAsCdC,EAAAA,yBAAyB,EAAE,mCAACE,KAAD;AAAA,WAAWA,KAAK,CAACF,yBAAjB;AAAA,GAtCb;AAuCdC,EAAAA,iBAAiB,EAAE,2BAACC,KAAD;AAAA,WAAWA,KAAK,CAACD,iBAAjB;AAAA;AAvCL,CAAhB;AA0CA,IAAMG,SAAS,GAAG;AAChBC,EAAAA,sBAAsB,EAAE,gCAACH,KAAD,EAAQzC,mBAAR;AAAA,WACrByC,KAAK,CAACzC,mBAAN,GAA4BA,mBADP;AAAA,GADR;AAGhB6C,EAAAA,kBAAkB,EAAE,4BAACJ,KAAD;AAAA,WAClBK,MAAM,CAACC,MAAP,CAAcN,KAAd,EAAqB1C,uBAAuB,EAA5C,CADkB;AAAA,GAHJ;AAKhBiD,EAAAA,sBAAsB,EAAE,gCAACP,KAAD,EAAQxC,mBAAR;AAAA,WACrBwC,KAAK,CAACxC,mBAAN,GAA4BA,mBADP;AAAA,GALR;AAOhBgD,EAAAA,2BAA2B,EAAE,qCAACR,KAAD,EAAQvC,wBAAR;AAAA,WAC1BuC,KAAK,CAACvC,wBAAN,GAAiCA,wBADP;AAAA,GAPb;AAShBgD,EAAAA,kBAAkB,EAAE,4BAACT,KAAD,EAAQtC,eAAR;AAAA,WACjBsC,KAAK,CAACtC,eAAN,GAAwBA,eADP;AAAA,GATJ;AAWhBgD,EAAAA,uBAAuB,EAAE,iCAACV,KAAD,EAAQrC,oBAAR;AAAA,WACtBqC,KAAK,CAACrC,oBAAN,GAA6BA,oBADP;AAAA,GAXT;AAahBgD,EAAAA,4BAA4B,EAAE,sCAACX,KAAD,EAAQpC,yBAAR;AAAA,WAC3BoC,KAAK,CAACpC,yBAAN,GAAkCA,yBADP;AAAA,GAbd;AAehBgD,EAAAA,0BAA0B,EAAE,oCAACZ,KAAD,EAAQnC,uBAAR;AAAA,WACzBmC,KAAK,CAACnC,uBAAN,GAAgCA,uBADP;AAAA,GAfZ;AAiBhBgD,EAAAA,+BAA+B,EAAE,yCAACb,KAAD,EAAQlC,4BAAR;AAAA,WAC9BkC,KAAK,CAAClC,4BAAN,GAAqCA,4BADP;AAAA,GAjBjB;AAmBhBgD,EAAAA,wBAAwB,EAAE,kCAACd,KAAD,EAAQjC,qBAAR,EAAkC;AAC1DiC,IAAAA,KAAK,CAACjC,qBAAN,WAA+BA,qBAAqB,CAACgD,GAArD,KACEhD,qBAAqB,CAACiD,KADxB;AAED,GAtBe;AAuBhBC,EAAAA,wBAAwB,EAAE,kCAACjB,KAAD,EAAQ/B,qBAAR,EAAkC;AAC1D+B,IAAAA,KAAK,CAAC/B,qBAAN,WAA+BA,qBAAqB,CAAC8C,GAArD,KACE9C,qBAAqB,CAAC+C,KADxB;AAED,GA1Be;AA2BhBE,EAAAA,uBAAuB,EAAE,iCAAClB,KAAD,EAAQ5B,oBAAR;AAAA,WACtB4B,KAAK,CAAC5B,oBAAN,GAA6BA,oBADP;AAAA,GA3BT;AA6BhB+C,EAAAA,mBAAmB,EAAE,6BAACnB,KAAD,EAAQ3B,gBAAR;AAAA,WAClB2B,KAAK,CAAC3B,gBAAN,GAAyBA,gBADP;AAAA,GA7BL;AA+BhB+C,EAAAA,gBAAgB,EAAE,0BAACpB,KAAD,EAAQxB,aAAR;AAAA,WACfwB,KAAK,CAACxB,aAAN,GAAsBA,aADP;AAAA,GA/BF;AAiChB6C,EAAAA,kCAAkC,EAAE,4CAClCrB,KADkC,EAElC1B,+BAFkC;AAAA,WAIjC0B,KAAK,CAAC1B,+BAAN,GAAwCA,+BAJP;AAAA,GAjCpB;AAsChBgD,EAAAA,uBAAuB,EAAE,iCAACtB,KAAD,EAAQzB,oBAAR;AAAA,WACtByB,KAAK,CAACzB,oBAAN,GAA6BA,oBADP;AAAA,GAtCT;AAwChBgD,EAAAA,uBAAuB,EAAE,iCAACvB,KAAD,EAAQvB,oBAAR;AAAA,WACtBuB,KAAK,CAACvB,oBAAN,GAA6BA,oBADP;AAAA,GAxCT;AA0ChB+C,EAAAA,qBAAqB,EAAE,+BAACxB,KAAD,EAAQtB,kBAAR;AAAA,WACpBsB,KAAK,CAACtB,kBAAN,GAA2BA,kBADP;AAAA,GA1CP;AA4ChB+C,EAAAA,iBAAiB,EAAE,2BAACzB,KAAD,EAAQrB,cAAR;AAAA,WAChBqB,KAAK,CAACrB,cAAN,GAAuBA,cADP;AAAA,GA5CH;AA8ChB+C,EAAAA,qBAAqB,EAAE,+BAAC1B,KAAD,EAAQpB,kBAAR;AAAA,WACpBoB,KAAK,CAACpB,kBAAN,GAA2BA,kBADP;AAAA,GA9CP;AAgDhB+C,EAAAA,yBAAyB,EAAE,mCAAC3B,KAAD,EAAQnB,sBAAR;AAAA,WACxBmB,KAAK,CAACnB,sBAAN,GAA+BA,sBADP;AAAA,GAhDX;AAkDhB+C,EAAAA,oBAAoB,EAAE,8BAAC5B,KAAD,EAAQhB,iBAAR;AAAA,WACnBgB,KAAK,CAAChB,iBAAN,GAA0BA,iBADP;AAAA,GAlDN;AAoDhB6C,EAAAA,iBAAiB,EAAE,2BAAC7B,KAAD,EAAQf,cAAR;AAAA,WAChBe,KAAK,CAACf,cAAN,GAAuBA,cADP;AAAA,GApDH;AAsDhB6C,EAAAA,cAAc,EAAE,wBAAC9B,KAAD,EAAQlB,WAAR;AAAA,WAAyBkB,KAAK,CAAClB,WAAN,GAAoBA,WAA7C;AAAA,GAtDA;AAuDhBiD,EAAAA,cAAc,EAAE,wBAAC/B,KAAD,EAAQjB,WAAR;AAAA,WAAyBiB,KAAK,CAACjB,WAAN,GAAoBA,WAA7C;AAAA,GAvDA;AAwDhBiD,EAAAA,mBAAmB,EAAE,6BAAChC,KAAD,EAAQd,gBAAR;AAAA,WAClBc,KAAK,CAACd,gBAAN,GAAyBA,gBADP;AAAA,GAxDL;AA0DhB+C,EAAAA,4BAA4B,EAAE,sCAACjC,KAAD,EAAQb,yBAAR;AAAA,WAC3Ba,KAAK,CAACb,yBAAN,GAAkCA,yBADP;AAAA,GA1Dd;AA4DhB+C,EAAAA,2BAA2B,EAAE,qCAAClC,KAAD,EAAQZ,wBAAR;AAAA,WAC1BY,KAAK,CAACZ,wBAAN,GAAiCA,wBADP;AAAA,GA5Db;AA8DhB+C,EAAAA,wBAAwB,EAAE,kCAACnC,KAAD,EAAQX,qBAAR;AAAA,WACvBW,KAAK,CAACX,qBAAN,GAA8BA,qBADP;AAAA,GA9DV;AAgEhB+C,EAAAA,qBAAqB,EAAE,+BAACpC,KAAD,EAAQV,kBAAR;AAAA,WACpBU,KAAK,CAACV,kBAAN,GAA2BA,kBADP;AAAA,GAhEP;AAkEhB+C,EAAAA,4BAA4B,EAAE,sCAACrC,KAAD,EAAQT,yBAAR;AAAA,WAC3BS,KAAK,CAACT,yBAAN,GAAkCA,yBADP;AAAA,GAlEd;AAoEhB+C,EAAAA,uBAAuB,EAAE,iCAACtC,KAAD,EAAQR,oBAAR;AAAA,WACtBQ,KAAK,CAACR,oBAAN,GAA6BA,oBADP;AAAA,GApET;AAsEhB+C,EAAAA,uBAAuB,EAAE,iCAACvC,KAAD,EAAQP,oBAAR;AAAA,WACtBO,KAAK,CAACP,oBAAN,GAA6BA,oBADP;AAAA,GAtET;AAwEhB+C,EAAAA,uBAAuB,EAAE,iCAACxC,KAAD,EAAQN,oBAAR;AAAA,WACtBM,KAAK,CAACN,oBAAN,GAA6BA,oBADP;AAAA,GAxET;AA0EhB+C,EAAAA,eAAe,EAAE,yBAACzC,KAAD,EAAQL,YAAR;AAAA,WAA0BK,KAAK,CAACL,YAAN,GAAqBA,YAA/C;AAAA,GA1ED;AA2EhB+C,EAAAA,qBAAqB,EAAE,+BAAC1C,KAAD,EAAQJ,kBAAR;AAAA,WACpBI,KAAK,CAACJ,kBAAN,GAA2BA,kBADP;AAAA,GA3EP;AA6EhB+C,EAAAA,0BAA0B,EAAE,oCAAC3C,KAAD,EAAQH,uBAAR;AAAA,WACzBG,KAAK,CAACH,uBAAN,GAAgCA,uBADP;AAAA,GA7EZ;AA+EhB+C,EAAAA,4BAA4B,EAAE,sCAAC5C,KAAD,EAAQF,yBAAR;AAAA,WAC3BE,KAAK,CAACF,yBAAN,GAAkCA,yBADP;AAAA,GA/Ed;AAiFhB+C,EAAAA,oBAAoB,EAAE,8BAAC7C,KAAD,EAAQD,iBAAR;AAAA,WACnBC,KAAK,CAACD,iBAAN,GAA0BA,iBADP;AAAA;AAjFN,CAAlB;AAqFA,IAAM+C,OAAO,GAAG;AACRC,EAAAA,sBADQ,wCACoCC,OADpC,EAC6C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAA5BC,cAAAA,MAA4B,QAA5BA,MAA4B,EAApBhD,OAAoB,QAApBA,OAAoB;AAAA;AAAA;AAAA,qBAEhCnD,KAAK,CAACoG,GAAN,WAClBnG,OADkB,0DACqCiG,OADrC,GAErB;AAAEG,gBAAAA,OAAO,EAAE;AAAEC,kBAAAA,aAAa,gBAASnD,OAAO,CAACoD,SAAjB;AAAf;AAAX,eAFqB,CAFgC;;AAAA;AAEjDC,cAAAA,QAFiD;AAMnDC,cAAAA,WANmD,GAMrC;AAChBC,gBAAAA,EAAE,EAAEF,QAAQ,CAACG,IAAT,CAAcD,EADF;AAEhBE,gBAAAA,QAAQ,EAAEJ,QAAQ,CAACG,IAAT,CAAcC,QAFR;AAGhBC,gBAAAA,UAAU,EAAEL,QAAQ,CAACG,IAAT,CAAcE,UAHV;AAIhBC,gBAAAA,aAAa,EAAEN,QAAQ,CAACG,IAAT,CAAcG,aAJb;AAKhBC,gBAAAA,UAAU,EAAEP,QAAQ,CAACG,IAAT,CAAcI,UALV;AAMhBC,gBAAAA,kBAAkB,EAAER,QAAQ,CAACG,IAAT,CAAcK;AANlB,eANqC;AAAA;AAAA,qBAcjDb,MAAM,CAAC,wBAAD,EAA2BM,WAA3B,CAd2C;;AAAA;AAAA;AAAA,qBAejDN,MAAM,CACV,6BADU,EAEVK,QAAQ,CAACG,IAAT,CAAcM,wBAFJ,CAf2C;;AAAA;AAAA;AAAA,qBAmBjDd,MAAM,CAAC,oBAAD,EAAuBK,QAAQ,CAACG,IAAT,CAAcO,eAArC,CAnB2C;;AAAA;AAAA;AAAA,qBAoBjDf,MAAM,CACV,yBADU,EAEVK,QAAQ,CAACG,IAAT,CAAcQ,oBAFJ,CApB2C;;AAAA;AAAA;AAAA,qBAwBjDhB,MAAM,CACV,oCADU,EAEVK,QAAQ,CAACG,IAAT,CAAcS,+BAAd,CAA8C,CAA9C,CAFU,CAxB2C;;AAAA;AAAA;AAAA,qBA4BjD7G,MAAM,CAAC8G,IAAP,CAAY;AAAEC,gBAAAA,IAAI,EAAE;AAAR,eAAZ,CA5BiD;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AA8BvDnB,cAAAA,MAAM,CAAC,YAAD,EAAe,KAAf,CAAN;AACAoB,cAAAA,OAAO,CAACC,GAAR;;AA/BuD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAiC1D,GAlCa;AAmCRC,EAAAA,oBAnCQ,uCAmCkCvB,OAnClC,EAmC2C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAA5BC,cAAAA,MAA4B,SAA5BA,MAA4B,EAApBhD,OAAoB,SAApBA,OAAoB;AAAA;AAAA;AAAA,qBAE9BnD,KAAK,CAAC0H,IAAN,WAClBzH,OADkB,+BAErBiG,OAFqB,EAGrB;AAAEG,gBAAAA,OAAO,EAAE;AAAEC,kBAAAA,aAAa,gBAASnD,OAAO,CAACoD,SAAjB;AAAf;AAAX,eAHqB,CAF8B;;AAAA;AAE/CC,cAAAA,QAF+C;AAOjDtC,cAAAA,KAPiD,GAOzCyD,IAAI,CAACC,KAAL,CAAW1B,OAAO,CAAChC,KAAnB,CAPyC;AAAA;AAAA;;AAAA;AAAA;AAAA;AASrDiC,cAAAA,MAAM,CAAC,YAAD,EAAe,KAAf,CAAN;AACAoB,cAAAA,OAAO,CAACC,GAAR,CAAY,aAAIhB,QAAhB;;AAVqD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAYxD,GA/Ca;AAgDRqB,EAAAA,uBAhDQ,0CAgDqC3B,OAhDrC,EAgD8C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAA5BC,cAAAA,MAA4B,SAA5BA,MAA4B,EAApBhD,OAAoB,SAApBA,OAAoB;AAAA;AAAA;AAAA,qBAEjCnD,KAAK,CAAC8H,GAAN,WAClB7H,OADkB,+BAErBiG,OAFqB,EAGrB;AAAEG,gBAAAA,OAAO,EAAE;AAAEC,kBAAAA,aAAa,gBAASnD,OAAO,CAACoD,SAAjB;AAAf;AAAX,eAHqB,CAFiC;;AAAA;AAElDC,cAAAA,QAFkD;AAAA;AAAA;;AAAA;AAAA;AAAA;AAQxDL,cAAAA,MAAM,CAAC,YAAD,EAAe,KAAf,CAAN;AACAoB,cAAAA,OAAO,CAACC,GAAR,CAAY,aAAIhB,QAAhB;;AATwD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAW3D,GA3Da;AA4DRuB,EAAAA,0BA5DQ,6CA4DwC7B,OA5DxC,EA4DiD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAA5BC,cAAAA,MAA4B,SAA5BA,MAA4B,EAApBhD,OAAoB,SAApBA,OAAoB;AAAA;AAAA,qBACvDgD,MAAM,CAAC,uBAAD,EAA0BD,OAA1B,CADiD;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAE9D,GA9Da;AA+DR8B,EAAAA,kBA/DQ,qCA+D0C9B,OA/D1C,EA+DmD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAtCC,cAAAA,MAAsC,SAAtCA,MAAsC,EAA9B8B,QAA8B,SAA9BA,QAA8B,EAApB9E,OAAoB,SAApBA,OAAoB;AAC3D+E,cAAAA,MAD2D,GAClD;AACX7B,gBAAAA,OAAO,EAAE;AACP,kCAAgBhG;AADT;AADE,eADkD;AAAA;AAAA,qBAMxCL,KAAK,CAAC0H,IAAN,qCAErBxB,OAFqB,EAGrBgC,MAHqB,CANwC;;AAAA;AAMzD1B,cAAAA,QANyD;AAW/De,cAAAA,OAAO,CAACC,GAAR,CAAYhB,QAAQ,CAACG,IAArB;;AAX+D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAYhE,GA3Ea;AA4ERwB,EAAAA,0BA5EQ,6CA4EkDjC,OA5ElD,EA4E2D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAtCC,cAAAA,MAAsC,SAAtCA,MAAsC,EAA9B8B,QAA8B,SAA9BA,QAA8B,EAApB9E,OAAoB,SAApBA,OAAoB;AAAA;AAAA;AAAA,qBAE9CnD,KAAK,CAAC8H,GAAN,WAClB7H,OADkB,0CAErBiG,OAFqB,EAGrB;AAAEG,gBAAAA,OAAO,EAAE;AAAEC,kBAAAA,aAAa,gBAASnD,OAAO,CAACoD,SAAjB;AAAf;AAAX,eAHqB,CAF8C;;AAAA;AAE/DC,cAAAA,QAF+D;AAOrE;AAEI4B,cAAAA,MATiE,GAUnElC,OAAO,CAACmC,MAAR,IAAkB,CAAlB,GACI,YADJ,GAEInC,OAAO,CAACmC,MAAR,IAAkB,CAAlB,GACA,gBADA,GAEAnC,OAAO,CAACmC,MAAR,IAAkB,CAAlB,GACA,gBADA,GAEAnC,OAAO,CAACmC,MAAR,IAAkB,CAAlB,GACA,gBADA,GAEA,aAlB+D;AAoBrEJ,cAAAA,QAAQ,CAAC,cAAD,EAAiB;AACvBK,gBAAAA,IAAI,EAAE,SADiB;AAEvBC,gBAAAA,KAAK,EAAE,UAFgB;AAGvBC,gBAAAA,OAAO,gDAAyCJ,MAAzC;AAHgB,eAAjB,CAAR;AAKA7H,cAAAA,MAAM,CAAC8G,IAAP,CAAY;AAAEC,gBAAAA,IAAI,EAAE;AAAR,eAAZ;AAzBqE;AAAA;;AAAA;AAAA;AAAA;AA2BrEC,cAAAA,OAAO,CAACC,GAAR;AACArB,cAAAA,MAAM,CAAC,YAAD,EAAe,KAAf,CAAN;;AA5BqE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AA8BxE,GA1Ga;AA2GRsC,EAAAA,0BA3GQ,6CA2G4D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAvCtC,cAAAA,MAAuC,SAAvCA,MAAuC,EAA/BhD,OAA+B,SAA/BA,OAA+B,EAAtB8E,QAAsB,SAAtBA,QAAsB;AAAVS,cAAAA,IAAU,0EAAH,CAAG;AAAA;AAAA;AAAA,qBAE/C1I,KAAK,CAACoG,GAAN,WAClBnG,OADkB,2DACsCyI,IADtC,wBACwDvF,OAAO,CAACf,gBADhE,iBACuFe,OAAO,CAAChB,cAD/F,GAErB;AAAEkE,gBAAAA,OAAO,EAAE;AAAEC,kBAAAA,aAAa,gBAASnD,OAAO,CAACoD,SAAjB;AAAf;AAAX,eAFqB,CAF+C;;AAAA;AAEhEC,cAAAA,QAFgE;AAMtEL,cAAAA,MAAM,CAAC,sBAAD,EAAyBK,QAAQ,CAACG,IAAT,CAAcgC,WAAvC,CAAN;AACAxC,cAAAA,MAAM,CAAC,yBAAD,EAA4BK,QAAQ,CAACG,IAAT,CAAciC,OAA1C,CAAN;AAPsE;AAAA;;AAAA;AAAA;AAAA;AAStErB,cAAAA,OAAO,CAACC,GAAR,CAAY,aAAIhB,QAAhB;;AATsE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAWzE,GAtHa;AAuHRqC,EAAAA,uBAvHQ,0CAuHyD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAvC1C,cAAAA,MAAuC,SAAvCA,MAAuC,EAA/BhD,OAA+B,SAA/BA,OAA+B,EAAtB8E,QAAsB,SAAtBA,QAAsB;AAAVS,cAAAA,IAAU,6EAAH,CAAG;AAAA;AAAA;AAAA,qBAE5C1I,KAAK,CAACoG,GAAN,WAClBnG,OADkB,uDACkCyI,IADlC,GAErB;AAAErC,gBAAAA,OAAO,EAAE;AAAEC,kBAAAA,aAAa,gBAASnD,OAAO,CAACoD,SAAjB;AAAf;AAAX,eAFqB,CAF4C;;AAAA;AAE7DC,cAAAA,QAF6D;AAMnEL,cAAAA,MAAM,CAAC,yBAAD,EAA4BK,QAAQ,CAACG,IAAT,CAAciC,OAA1C,CAAN;AACAzC,cAAAA,MAAM,CAAC,sBAAD,EAAyBK,QAAQ,CAACG,IAAT,CAAcgC,WAAvC,CAAN;AAPmE;AAAA;;AAAA;AAAA;AAAA;AASnEpB,cAAAA,OAAO,CAACC,GAAR,CAAY,aAAIhB,QAAhB;;AATmE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAWtE,GAlIa;AAmIRsC,EAAAA,mBAnIQ,sCAmI2C5C,OAnI3C,EAmIoD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAtCC,cAAAA,MAAsC,SAAtCA,MAAsC,EAA9BhD,OAA8B,SAA9BA,OAA8B,EAArB8E,QAAqB,SAArBA,QAAqB;AAAA;AAAA;AAAA,qBAEvCjI,KAAK,CAACoG,GAAN,WAAanG,OAAb,6BAA8C;AACnEoG,gBAAAA,OAAO,EAAE;AAAEC,kBAAAA,aAAa,gBAASnD,OAAO,CAACoD,SAAjB;AAAf;AAD0D,eAA9C,CAFuC;;AAAA;AAExDC,cAAAA,QAFwD;AAK9DL,cAAAA,MAAM,CAAC,qBAAD,EAAwBK,QAAQ,CAACG,IAAjC,CAAN;AAL8D;AAAA;;AAAA;AAAA;AAAA;AAO9DY,cAAAA,OAAO,CAACC,GAAR,CAAY,aAAIhB,QAAhB;;AAP8D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AASjE,GA5Ia;AA6IRuC,EAAAA,uBA7IQ,2CA6I+C7C,OA7I/C,EA6IwD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAtCC,cAAAA,MAAsC,UAAtCA,MAAsC,EAA9BhD,OAA8B,UAA9BA,OAA8B,EAArB8E,QAAqB,UAArBA,QAAqB;AAAA;AAAA;AAAA,qBAE3CjI,KAAK,CAACoG,GAAN,WAClBnG,OADkB,kCAErB;AAAEoG,gBAAAA,OAAO,EAAE;AAAEC,kBAAAA,aAAa,gBAASnD,OAAO,CAACoD,SAAjB;AAAf;AAAX,eAFqB,CAF2C;;AAAA;AAE5DC,cAAAA,QAF4D;AAMlEL,cAAAA,MAAM,CAAC,yBAAD,EAA4BK,QAAQ,CAACG,IAArC,CAAN;AANkE;AAAA;;AAAA;AAAA;AAAA;AAQlEY,cAAAA,OAAO,CAACC,GAAR,CAAY,cAAIhB,QAAhB;;AARkE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAUrE,GAvJa;AAwJRwC,EAAAA,sBAxJQ,0CAwJ8C9C,OAxJ9C,EAwJuD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAtCC,cAAAA,MAAsC,UAAtCA,MAAsC,EAA9BhD,OAA8B,UAA9BA,OAA8B,EAArB8E,QAAqB,UAArBA,QAAqB;AAAA;AAAA;AAAA,qBAE1CjI,KAAK,CAAC0H,IAAN,WAClBzH,OADkB,wCAErBiG,OAFqB,EAGrB;AAAEG,gBAAAA,OAAO,EAAE;AAAEC,kBAAAA,aAAa,gBAASnD,OAAO,CAACoD,SAAjB;AAAf;AAAX,eAHqB,CAF0C;;AAAA;AAE3DC,cAAAA,QAF2D;AAOjEL,cAAAA,MAAM,CAAC,wBAAD,EAA2BK,QAAQ,CAACG,IAApC,CAAN;AAPiE;AAAA;;AAAA;AAAA;AAAA;AASjEY,cAAAA,OAAO,CAACC,GAAR,CAAY,cAAIhB,QAAhB;;AATiE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAWpE,GAnKa;AAoKRyC,EAAAA,yBApKQ,6CAoKiD/C,OApKjD,EAoK0D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAtCC,cAAAA,MAAsC,UAAtCA,MAAsC,EAA9BhD,OAA8B,UAA9BA,OAA8B,EAArB8E,QAAqB,UAArBA,QAAqB;AAAA;AAEpE/B,cAAAA,OAAO,CAACQ,EAAR,GAAavD,OAAO,CAACzC,mBAAR,CAA4BgG,EAAzC;AAFoE;AAAA,qBAG7C1G,KAAK,CAAC8H,GAAN,WAClB7H,OADkB,wCAErBiG,OAFqB,EAGrB;AAAEG,gBAAAA,OAAO,EAAE;AAAEC,kBAAAA,aAAa,gBAASnD,OAAO,CAACoD,SAAjB;AAAf;AAAX,eAHqB,CAH6C;;AAAA;AAG9DC,cAAAA,QAH8D;AAAA;AAAA;;AAAA;AAAA;AAAA;AASpEe,cAAAA,OAAO,CAACC,GAAR,CAAY,cAAIhB,QAAhB;;AAToE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAWvE,GA/Ka;AAgLR0C,EAAAA,2BAhLQ,+CAgLyChD,OAhLzC,EAgLkD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAA5BC,cAAAA,MAA4B,UAA5BA,MAA4B,EAApBhD,OAAoB,UAApBA,OAAoB;AAAA;AAE5D+C,cAAAA,OAAO,CAACiD,kBAAR,GAA6BhG,OAAO,CAACzC,mBAAR,CAA4BgG,EAAzD;AAF4D;AAAA,qBAGrC1G,KAAK,CAAC0H,IAAN,WAClBzH,OADkB,uCAErBiG,OAFqB,EAGrB;AAAEG,gBAAAA,OAAO,EAAE;AAAEC,kBAAAA,aAAa,gBAASnD,OAAO,CAACoD,SAAjB;AAAf;AAAX,eAHqB,CAHqC;;AAAA;AAGtDC,cAAAA,QAHsD;AAAA;AAAA,qBAQtDL,MAAM,CAAC,6BAAD,EAAgCK,QAAQ,CAACG,IAAzC,CARgD;;AAAA;AAS5DR,cAAAA,MAAM,CAAC,8BAAD,EAAiC,KAAjC,CAAN;AAT4D;AAAA;;AAAA;AAAA;AAAA;AAW5DA,cAAAA,MAAM,CAAC,8BAAD,EAAiC,IAAjC,CAAN;AACIiD,cAAAA,MAZwD,GAY/C;AAAEnF,gBAAAA,GAAG,EAAE,mBAAP;AAA4BC,gBAAAA,KAAK,EAAE,cAAIsC,QAAJ,CAAaG;AAAhD,eAZ+C;AAa5DR,cAAAA,MAAM,CAAC,0BAAD,EAA6BiD,MAA7B,CAAN;AACA7B,cAAAA,OAAO,CAACC,GAAR;;AAd4D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAgB/D,GAhMa;AAiMR6B,EAAAA,8BAjMQ,kDAiM4CnD,OAjM5C,EAiMqD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAA5BC,cAAAA,MAA4B,UAA5BA,MAA4B,EAApBhD,OAAoB,UAApBA,OAAoB;AAAA;AAE/D+C,cAAAA,OAAO,CAACQ,EAAR,GAAavD,OAAO,CAACxC,wBAAR,CAAiC+F,EAA9C;AAF+D;AAAA,qBAGxC1G,KAAK,CAAC8H,GAAN,WAClB7H,OADkB,uCAErBiG,OAFqB,EAGrB;AAAEG,gBAAAA,OAAO,EAAE;AAAEC,kBAAAA,aAAa,gBAASnD,OAAO,CAACoD,SAAjB;AAAf;AAAX,eAHqB,CAHwC;;AAAA;AAGzDC,cAAAA,QAHyD;AAQ/DL,cAAAA,MAAM,CAAC,6BAAD,EAAgCK,QAAQ,CAACG,IAAzC,CAAN;AACAR,cAAAA,MAAM,CAAC,8BAAD,EAAiC,KAAjC,CAAN;AAT+D;AAAA;;AAAA;AAAA;AAAA;AAW3DiD,cAAAA,MAX2D,GAWlD;AAAEnF,gBAAAA,GAAG,EAAE,mBAAP;AAA4BC,gBAAAA,KAAK,EAAE,cAAIsC,QAAJ,CAAaG;AAAhD,eAXkD;AAY/DR,cAAAA,MAAM,CAAC,0BAAD,EAA6BiD,MAA7B,CAAN;AACAjD,cAAAA,MAAM,CAAC,8BAAD,EAAiC,IAAjC,CAAN;AACAoB,cAAAA,OAAO,CAACC,GAAR,CAAY,cAAIhB,QAAhB;;AAd+D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAgBlE,GAjNa;AAkNR8C,EAAAA,kBAlNQ,sCAkNgCpD,OAlNhC,EAkNyC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAA5BC,cAAAA,MAA4B,UAA5BA,MAA4B,EAApBhD,OAAoB,UAApBA,OAAoB;AAAA;AAEnD+C,cAAAA,OAAO,CAACiD,kBAAR,GAA6BhG,OAAO,CAACzC,mBAAR,CAA4BgG,EAAzD;AAFmD;AAAA,qBAG5B1G,KAAK,CAAC0H,IAAN,WAClBzH,OADkB,6BAErBiG,OAFqB,EAGrB;AAAEG,gBAAAA,OAAO,EAAE;AAAEC,kBAAAA,aAAa,gBAASnD,OAAO,CAACoD,SAAjB;AAAf;AAAX,eAHqB,CAH4B;;AAAA;AAG7CC,cAAAA,QAH6C;AAQnDL,cAAAA,MAAM,CAAC,4BAAD,EAA+B,KAA/B,CAAN;AACAA,cAAAA,MAAM,CAAC,oBAAD,EAAuBK,QAAQ,CAACG,IAAhC,CAAN;AATmD;AAAA;;AAAA;AAAA;AAAA;AAW/CyC,cAAAA,MAX+C,GAWtC;AAAEnF,gBAAAA,GAAG,EAAE,kBAAP;AAA2BC,gBAAAA,KAAK,EAAE,cAAIsC,QAAJ,CAAaG;AAA/C,eAXsC;AAYnDR,cAAAA,MAAM,CAAC,0BAAD,EAA6BiD,MAA7B,CAAN;AACAjD,cAAAA,MAAM,CAAC,4BAAD,EAA+B,IAA/B,CAAN;AACAoB,cAAAA,OAAO,CAACC,GAAR,CAAY,cAAIhB,QAAhB;;AAdmD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAgBtD,GAlOa;AAmOR+C,EAAAA,uBAnOQ,2CAmOqCrD,OAnOrC,EAmO8C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAA5BC,cAAAA,MAA4B,UAA5BA,MAA4B,EAApBhD,OAAoB,UAApBA,OAAoB;AAAA;AAExD+C,cAAAA,OAAO,CAACiD,kBAAR,GAA6BhG,OAAO,CAACzC,mBAAR,CAA4BgG,EAAzD;AAFwD;AAAA,qBAGjC1G,KAAK,CAAC0H,IAAN,WAClBzH,OADkB,mCAErBiG,OAFqB,EAGrB;AAAEG,gBAAAA,OAAO,EAAE;AAAEC,kBAAAA,aAAa,gBAASnD,OAAO,CAACoD,SAAjB;AAAf;AAAX,eAHqB,CAHiC;;AAAA;AAGlDC,cAAAA,QAHkD;AAQxDL,cAAAA,MAAM,CAAC,iCAAD,EAAoC,KAApC,CAAN;AACAA,cAAAA,MAAM,CAAC,yBAAD,EAA4BK,QAAQ,CAACG,IAArC,CAAN;AATwD;AAAA;;AAAA;AAAA;AAAA;AAWpDyC,cAAAA,MAXoD,GAW3C;AAAEnF,gBAAAA,GAAG,EAAE,wBAAP;AAAiCC,gBAAAA,KAAK,EAAE,cAAIsC,QAAJ,CAAaG;AAArD,eAX2C;AAYxDR,cAAAA,MAAM,CAAC,0BAAD,EAA6BiD,MAA7B,CAAN;AACAjD,cAAAA,MAAM,CAAC,iCAAD,EAAoC,IAApC,CAAN;AACAoB,cAAAA,OAAO,CAACC,GAAR,CAAY,cAAIhB,QAAhB;;AAdwD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAgB3D,GAnPa;AAoPRgD,EAAAA,qBApPQ,yCAoPmCtD,OApPnC,EAoP4C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAA5BC,cAAAA,MAA4B,UAA5BA,MAA4B,EAApBhD,OAAoB,UAApBA,OAAoB;AAAA;AAEtD+C,cAAAA,OAAO,CAACQ,EAAR,GAAavD,OAAO,CAACvC,eAAR,CAAwB8F,EAArC;AAFsD;AAAA,qBAG/B1G,KAAK,CAAC8H,GAAN,WAClB7H,OADkB,6BAErBiG,OAFqB,EAGrB;AAAEG,gBAAAA,OAAO,EAAE;AAAEC,kBAAAA,aAAa,gBAASnD,OAAO,CAACoD,SAAjB;AAAf;AAAX,eAHqB,CAH+B;;AAAA;AAGhDC,cAAAA,QAHgD;AAQtDL,cAAAA,MAAM,CAAC,oBAAD,EAAuBK,QAAQ,CAACG,IAAhC,CAAN;AACAR,cAAAA,MAAM,CAAC,4BAAD,EAA+B,KAA/B,CAAN;AATsD;AAAA;;AAAA;AAAA;AAAA;AAWlDiD,cAAAA,MAXkD,GAWzC;AAAEnF,gBAAAA,GAAG,EAAE,kBAAP;AAA2BC,gBAAAA,KAAK,EAAE,cAAIsC,QAAJ,CAAaG;AAA/C,eAXyC;AAYtDR,cAAAA,MAAM,CAAC,0BAAD,EAA6BiD,MAA7B,CAAN;AACAjD,cAAAA,MAAM,CAAC,4BAAD,EAA+B,IAA/B,CAAN;AACAoB,cAAAA,OAAO,CAACC,GAAR,CAAY,cAAIhB,QAAhB;;AAdsD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAgBzD,GApQa;AAqQRiD,EAAAA,0BArQQ,8CAqQwCvD,OArQxC,EAqQiD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAA5BC,cAAAA,MAA4B,UAA5BA,MAA4B,EAApBhD,OAAoB,UAApBA,OAAoB;AAAA;AAE3D+C,cAAAA,OAAO,CAACQ,EAAR,GAAavD,OAAO,CAACtC,oBAAR,CAA6B6F,EAA1C;AAF2D;AAAA,qBAGpC1G,KAAK,CAAC8H,GAAN,WAClB7H,OADkB,mCAErBiG,OAFqB,EAGrB;AAAEG,gBAAAA,OAAO,EAAE;AAAEC,kBAAAA,aAAa,gBAASnD,OAAO,CAACoD,SAAjB;AAAf;AAAX,eAHqB,CAHoC;;AAAA;AAGrDC,cAAAA,QAHqD;AAQ3DL,cAAAA,MAAM,CAAC,yBAAD,EAA4BK,QAAQ,CAACG,IAArC,CAAN;AACAR,cAAAA,MAAM,CAAC,iCAAD,EAAoC,KAApC,CAAN;AAT2D;AAAA;;AAAA;AAAA;AAAA;AAWvDiD,cAAAA,MAXuD,GAW9C;AAAEnF,gBAAAA,GAAG,EAAE,wBAAP;AAAiCC,gBAAAA,KAAK,EAAE,cAAIsC,QAAJ,CAAaG;AAArD,eAX8C;AAY3DR,cAAAA,MAAM,CAAC,0BAAD,EAA6BiD,MAA7B,CAAN;AACA7B,cAAAA,OAAO,CAACC,GAAR,CAAY,cAAIhB,QAAhB;AACAL,cAAAA,MAAM,CAAC,iCAAD,EAAoC,IAApC,CAAN;;AAd2D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAgB9D,GArRa;AAsRRuD,EAAAA,kCAtRQ,sDAsRgDxD,OAtRhD,EAsRyD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAA5BC,cAAAA,MAA4B,UAA5BA,MAA4B,EAApBhD,OAAoB,UAApBA,OAAoB;AAAA;AAAA;AAAA,qBAE5CnD,KAAK,CAAC0H,IAAN,WAClBzH,OADkB,8CAErBiG,OAFqB,EAGrB;AAAEG,gBAAAA,OAAO,EAAE;AAAEC,kBAAAA,aAAa,gBAASnD,OAAO,CAACoD,SAAjB;AAAf;AAAX,eAHqB,CAF4C;;AAAA;AAE7DC,cAAAA,QAF6D;AAOnEL,cAAAA,MAAM,CAAC,oCAAD,EAAuCK,QAAQ,CAACG,IAAhD,CAAN;AAPmE;AAAA;;AAAA;AAAA;AAAA;AASnEY,cAAAA,OAAO,CAACC,GAAR,CAAY,cAAIhB,QAAhB;;AATmE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAWtE,GAjSa;AAkSRmD,EAAAA,0BAlSQ,8CAkSkDzD,OAlSlD,EAkS2D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAtCC,cAAAA,MAAsC,UAAtCA,MAAsC,EAA9BhD,OAA8B,UAA9BA,OAA8B,EAArB8E,QAAqB,UAArBA,QAAqB;AAAA;AAErE9B,cAAAA,MAAM,CAAC,YAAD,EAAe,IAAf,CAAN;AAFqE;AAAA,qBAG9CnG,KAAK,CAAC0H,IAAN,WAClBzH,OADkB,iCAErBiG,OAFqB,EAGrB;AAAEG,gBAAAA,OAAO,EAAE;AAAEC,kBAAAA,aAAa,gBAASnD,OAAO,CAACoD,SAAjB;AAAf;AAAX,eAHqB,CAH8C;;AAAA;AAG/DC,cAAAA,QAH+D;AAAA;AAAA,qBAQ/DyB,QAAQ,CAAC,oCAAD,CARuD;;AAAA;AASrE9B,cAAAA,MAAM,CAAC,uBAAD,EAA0B,KAA1B,CAAN;AACAA,cAAAA,MAAM,CAAC,YAAD,EAAe,KAAf,CAAN;AAVqE;AAAA;;AAAA;AAAA;AAAA;AAYrE,4BAAIK,QAAJ,GAAee,OAAO,CAACC,GAAR,CAAY,cAAIhB,QAAhB,CAAf,GAA2Ce,OAAO,CAACC,GAAR,eAA3C;AACArB,cAAAA,MAAM,CAAC,YAAD,EAAe,KAAf,CAAN;AACAA,cAAAA,MAAM,CAAC,uBAAD,EAA0B,IAA1B,CAAN;AACA8B,cAAAA,QAAQ,CAAC,cAAD,EAAiB;AACvBK,gBAAAA,IAAI,EAAE,OADiB;AAEvBC,gBAAAA,KAAK,EAAE,SAFgB;AAGvBC,gBAAAA,OAAO,EAAE;AAHc,eAAjB,CAAR;;AAfqE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAqBxE,GAvTa;AAwTRoB,EAAAA,kCAxTQ,sDAwTgD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAnBzD,cAAAA,MAAmB,UAAnBA,MAAmB,EAAXhD,OAAW,UAAXA,OAAW;AAAA;AAEtD+C,cAAAA,OAFsD,GAE5C;AAAEQ,gBAAAA,EAAE,EAAEvD,OAAO,CAAC3B,+BAAR,CAAwCkF;AAA9C,eAF4C;AAAA;AAAA,qBAGnC1G,KAAK,CAACoG,GAAN,WAClBnG,OADkB,8CAErB;AACEoG,gBAAAA,OAAO,EAAE;AAAEC,kBAAAA,aAAa,gBAASnD,OAAO,CAACoD,SAAjB;AAAf,iBADX;AAEEsD,gBAAAA,MAAM,EAAE3D;AAFV,eAFqB,CAHmC;;AAAA;AAGpDM,cAAAA,QAHoD;AAU1DA,cAAAA,QAAQ,CAACG,IAAT,CAAcmD,oBAAd,GAAqCtD,QAAQ,CAACG,IAAT,CAAcmD,oBAAd,CAAmCC,MAAnC,CACnC,UAACC,IAAD;AAAA,uBAAUA,IAAI,CAACC,SAAL,IAAkB,IAA5B;AAAA,eADmC,CAArC;AAGA9D,cAAAA,MAAM,CAAC,yBAAD,EAA4BK,QAAQ,CAACG,IAArC,CAAN;;AACA,kBAAIH,QAAQ,CAACG,IAAT,CAAcuD,iBAAd,CAAgCC,MAAhC,GAAyC,CAA7C,EAAgD;AAC9C3D,gBAAAA,QAAQ,CAACG,IAAT,CAAcuD,iBAAd,CAAgCE,GAAhC,CAAoC,UAACJ,IAAD,EAAU;AAC5C,sBAAIA,IAAI,CAACK,QAAL,KAAkB,OAAtB,EAA+B;AAC7BlE,oBAAAA,MAAM,CAAC,mBAAD,EAAsB6D,IAAtB,CAAN;AACD,mBAFD,MAEO,IAAIA,IAAI,CAACK,QAAL,KAAkB,WAAtB,EAAmC;AACxClE,oBAAAA,MAAM,CAAC,uBAAD,EAA0B6D,IAA1B,CAAN;AACD,mBAFM,MAEA,IAAIA,IAAI,CAACK,QAAL,KAAkB,eAAtB,EAAuC;AAC5ClE,oBAAAA,MAAM,CAAC,2BAAD,EAA8B6D,IAA9B,CAAN;AACD,mBAFM,MAEA,IAAIA,IAAI,CAACK,QAAL,KAAkB,cAAtB,EAAsC;AAC3ClE,oBAAAA,MAAM,CAAC,gBAAD,EAAmB6D,IAAnB,CAAN;AACD,mBAFM,MAEA,IAAIA,IAAI,CAACK,QAAL,KAAkB,cAAtB,EAAsC;AAC3ClE,oBAAAA,MAAM,CAAC,gBAAD,EAAmB6D,IAAnB,CAAN;AACD;AACF,iBAZD;AAaD;;AA5ByD;AAAA;;AAAA;AAAA;AAAA;AA8B1DzC,cAAAA,OAAO,CAACC,GAAR;;AA9B0D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAgC7D,GAxVa;AAyVR8C,EAAAA,yBAzVQ,6CAyViDpE,OAzVjD,EAyV0D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAtCC,cAAAA,MAAsC,UAAtCA,MAAsC,EAA9BhD,OAA8B,UAA9BA,OAA8B,EAArB8E,QAAqB,UAArBA,QAAqB;AAAA;AAAA;AAAA,qBAE7CjI,KAAK,CAAC0H,IAAN,WAClBzH,OADkB,sCAErBiG,OAFqB,EAGrB;AAAEG,gBAAAA,OAAO,EAAE;AAAEC,kBAAAA,aAAa,gBAASnD,OAAO,CAACoD,SAAjB;AAAf;AAAX,eAHqB,CAF6C;;AAAA;AAE9DC,cAAAA,QAF8D;AAOpEL,cAAAA,MAAM,CAAC,8BAAD,EAAiCK,QAAQ,CAACG,IAAT,CAAc6B,OAA/C,CAAN;AACArC,cAAAA,MAAM,CAAC,yBAAD,EAA4B,KAA5B,CAAN;AARoE;AAAA;;AAAA;AAAA;AAAA;AAUpEoB,cAAAA,OAAO,CAACC,GAAR;;AACA,kBAAI,cAAIhB,QAAR,EAAkB;AAChBe,gBAAAA,OAAO,CAACC,GAAR,CAAY,cAAIhB,QAAhB;AACAL,gBAAAA,MAAM,CAAC,yBAAD,EAA4B,IAA5B,CAAN;AACA8B,gBAAAA,QAAQ,CAAC,cAAD,EAAiB;AACvBK,kBAAAA,IAAI,EAAE,OADiB;AAEvBC,kBAAAA,KAAK,EAAE,SAFgB;AAGvBC,kBAAAA,OAAO,EAAE,cAAIhC,QAAJ,CAAaG,IAAb,CAAkB4D;AAHJ,iBAAjB,CAAR;AAKD;;AAnBmE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAqBvE,GA9Wa;AA+WRC,EAAAA,2BA/WQ,+CA+WyCtE,OA/WzC,EA+WkD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAA5BC,cAAAA,MAA4B,UAA5BA,MAA4B,EAApBhD,OAAoB,UAApBA,OAAoB;AAAA;AAAA;AAAA,qBAErCnD,KAAK,CAACoG,GAAN,WAClBnG,OADkB,sCAErB;AACEoG,gBAAAA,OAAO,EAAE;AAAEC,kBAAAA,aAAa,gBAASnD,OAAO,CAACoD,SAAjB;AAAf,iBADX;AAEEsD,gBAAAA,MAAM,EAAE3D;AAFV,eAFqB,CAFqC;;AAAA;AAEtDM,cAAAA,QAFsD;AAS5DL,cAAAA,MAAM,CAAC,6BAAD,EAAgCK,QAAQ,CAACG,IAAzC,CAAN;AAT4D;AAAA;;AAAA;AAAA;AAAA;AAW5DY,cAAAA,OAAO,CAACC,GAAR;;AACA,kBAAI,cAAIhB,QAAR,EAAkB;AAChBe,gBAAAA,OAAO,CAACC,GAAR,CAAY,cAAIhB,QAAhB;AACD;;AAd2D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAgB/D,GA/Xa;AAgYRiE,EAAAA,0BAhYQ,8CAgYwCvE,OAhYxC,EAgYiD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAA5BC,cAAAA,MAA4B,UAA5BA,MAA4B,EAApBhD,OAAoB,UAApBA,OAAoB;AAAA;AAAA;AAAA,qBAEpCnD,KAAK,CAACoG,GAAN,WAClBnG,OADkB,+CAErB;AACEoG,gBAAAA,OAAO,EAAE;AAAEC,kBAAAA,aAAa,gBAASnD,OAAO,CAACoD,SAAjB;AAAf,iBADX;AAEEsD,gBAAAA,MAAM,EAAE3D;AAFV,eAFqB,CAFoC;;AAAA;AAErDM,cAAAA,QAFqD;AAS3DL,cAAAA,MAAM,CAAC,0BAAD,EAA6BK,QAAQ,CAACG,IAAT,CAAc+D,UAA3C,CAAN;AACAvE,cAAAA,MAAM,CAAC,uBAAD,EAA0BK,QAAQ,CAACG,IAAT,CAAcgE,eAAxC,CAAN;AAV2D;AAAA;;AAAA;AAAA;AAAA;AAY3DpD,cAAAA,OAAO,CAACC,GAAR;;AACA,kBAAI,cAAIhB,QAAR,EAAkB;AAChBe,gBAAAA,OAAO,CAACC,GAAR,CAAY,cAAIhB,QAAhB;AACD;;AAf0D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAiB9D,GAjZa;AAkZRoE,EAAAA,4BAlZQ,gDAkZoD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAA7BzE,cAAAA,MAA6B,UAA7BA,MAA6B,EAArBhD,OAAqB,UAArBA,OAAqB;AAAVuF,cAAAA,IAAU,6EAAH,CAAG;AAAA;AAAA;AAAA,qBAEvC1I,KAAK,CAACoG,GAAN,WAClBnG,OADkB,sDACiCyI,IADjC,GAErB;AACErC,gBAAAA,OAAO,EAAE;AAAEC,kBAAAA,aAAa,gBAASnD,OAAO,CAACoD,SAAjB;AAAf;AADX,eAFqB,CAFuC;;AAAA;AAExDC,cAAAA,QAFwD;AAQ9DL,cAAAA,MAAM,CAAC,8BAAD,EAAiCK,QAAQ,CAACG,IAAT,CAAciC,OAA/C,CAAN;AACAzC,cAAAA,MAAM,CAAC,sBAAD,EAAyBK,QAAQ,CAACG,IAAT,CAAcgC,WAAvC,CAAN;AAT8D;AAAA;;AAAA;AAAA;AAAA;AAW9DpB,cAAAA,OAAO,CAACC,GAAR;;AACA,kBAAI,cAAIhB,QAAR,EAAkB;AAChBe,gBAAAA,OAAO,CAACC,GAAR,CAAY,cAAIhB,QAAJ,CAAaG,IAAzB;AACD;;AAd6D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAgBjE,GAlaa;AAmaRkE,EAAAA,uBAnaQ,2CAma+C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAA7B1E,cAAAA,MAA6B,UAA7BA,MAA6B,EAArBhD,OAAqB,UAArBA,OAAqB;AAAVuF,cAAAA,IAAU,6EAAH,CAAG;AAAA;AAAA;AAAA,qBAElC1I,KAAK,CAACoG,GAAN,WAClBnG,OADkB,4DACuCyI,IADvC,GAErB;AACErC,gBAAAA,OAAO,EAAE;AAAEC,kBAAAA,aAAa,gBAASnD,OAAO,CAACoD,SAAjB;AAAf;AADX,eAFqB,CAFkC;;AAAA;AAEnDC,cAAAA,QAFmD;AAQzDL,cAAAA,MAAM,CAAC,yBAAD,EAA4BK,QAAQ,CAACG,IAAT,CAAciC,OAA1C,CAAN;AACAzC,cAAAA,MAAM,CAAC,sBAAD,EAAyBK,QAAQ,CAACG,IAAT,CAAcgC,WAAvC,CAAN;AATyD;AAAA;;AAAA;AAAA;AAAA;AAWzDpB,cAAAA,OAAO,CAACC,GAAR;;AACA,kBAAI,cAAIhB,QAAR,EAAkB;AAChBe,gBAAAA,OAAO,CAACC,GAAR,CAAY,cAAIhB,QAAJ,CAAaG,IAAzB;AACD;;AAdwD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAgB5D,GAnba;AAobRmE,EAAAA,uBApbQ,2CAobqC5E,OApbrC,EAob8C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAA5BC,cAAAA,MAA4B,UAA5BA,MAA4B,EAApBhD,OAAoB,UAApBA,OAAoB;AAAA;AAAA;AAAA,qBAEjCnD,KAAK,CAAC8H,GAAN,WAClB7H,OADkB,uCAErBiG,OAFqB,EAGrB;AACEG,gBAAAA,OAAO,EAAE;AAAEC,kBAAAA,aAAa,gBAASnD,OAAO,CAACoD,SAAjB;AAAf;AADX,eAHqB,CAFiC;;AAAA;AAElDC,cAAAA,QAFkD;AAAA;AAAA;;AAAA;AAAA;AAAA;AAUxDe,cAAAA,OAAO,CAACC,GAAR;;AACA,kBAAI,cAAIhB,QAAR,EAAkB;AAChBe,gBAAAA,OAAO,CAACC,GAAR,CAAY,cAAIhB,QAAJ,CAAaG,IAAzB;AACD;;AAbuD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAe3D,GAnca;AAocRoE,EAAAA,+BApcQ,mDAoc6C7E,OApc7C,EAocsD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAA5BC,cAAAA,MAA4B,UAA5BA,MAA4B,EAApBhD,OAAoB,UAApBA,OAAoB;AAAA;AAAA;AAAA,qBAEzCnD,KAAK,CAACoG,GAAN,WAClBnG,OADkB,uCAErB;AACEoG,gBAAAA,OAAO,EAAE;AAAEC,kBAAAA,aAAa,gBAASnD,OAAO,CAACoD,SAAjB;AAAf,iBADX;AAEEsD,gBAAAA,MAAM,EAAE3D;AAFV,eAFqB,CAFyC;;AAAA;AAE1DM,cAAAA,QAF0D;AAShEL,cAAAA,MAAM,CAAC,6BAAD,EAAgCK,QAAQ,CAACG,IAAzC,CAAN;AATgE;AAAA;;AAAA;AAAA;AAAA;AAWhEY,cAAAA,OAAO,CAACC,GAAR;;AACA,kBAAI,cAAIhB,QAAR,EAAkB;AAChBe,gBAAAA,OAAO,CAACC,GAAR,CAAY,cAAIhB,QAAhB;AACD;;AAd+D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAgBnE;AApda,CAAhB;AAudA,eAAe;AACbtD,EAAAA,KAAK,EAALA,KADa;AAEbC,EAAAA,OAAO,EAAPA,OAFa;AAGb6C,EAAAA,OAAO,EAAPA,OAHa;AAIb5C,EAAAA,SAAS,EAATA;AAJa,CAAf","sourcesContent":["import axios from \"axios\";\nconst baseUrl = process.env.VUE_APP_API_URL;\nconst oneDocToken = process.env.VUE_APP_ONE_DOC_TOKEN;\nimport router from \"../../router/index.js\";\nconst getDefaultPropertyState = () => {\n  return {\n    currentPropertyStep: \"1\",\n    buildingApplication: {},\n    buildingBasicInformation: {},\n    buildingDetails: {},\n    buildingOtherDetails: {},\n    buildingBasicInfoHasError: false,\n    buildingDetailsHasError: false,\n    buildingOtherDetailsHasError: false,\n    buildingStepOneErrors: {\n      basic_information: [],\n    },\n    buildingStepTwoErrors: {\n      building_details: [],\n      building_other_details: [],\n    },\n    buildingApplications: [],\n    buildingProfiles: [],\n    buildingApplicationRequirements: {},\n    buildingRequirements: [],\n    draftProperty: false,\n    realPropertyProfiles: [],\n    applicationRemarks: {},\n    legalDocuments: {},\n    technicalDocuments: {},\n    supplementaryDocuments: {},\n    designPlans: {},\n    designSpecs: {},\n    currentBuildingId: 0,\n    buildingSearch: \"\",\n    propertyFilterBy: \"all\",\n    buildingAssessmentMessage: \"\",\n    buildingAssessmentResult: [],\n    buildingDeptCanAssess: false,\n    isLastBuildingDept: false,\n    forBuildingAssessmentList: [],\n    assessedBuildingList: [],\n    isBuildingAssessment: false,\n    isAssessmentHasError: false,\n    isEvaluation: false,\n    isFileUploadFailed: false,\n    currentSelectedProperty: {},\n    buildingAssessmentPayload: {},\n    propertyPageCount: 0,\n  };\n};\n\nconst state = getDefaultPropertyState();\n\nconst getters = {\n  currentPropertyStep: (state) => state.currentPropertyStep,\n  buildingApplication: (state) => state.buildingApplication,\n  buildingBasicInformation: (state) => state.buildingBasicInformation,\n  buildingDetails: (state) => state.buildingDetails,\n  buildingOtherDetails: (state) => state.buildingOtherDetails,\n  buildingBasicInfoHasError: (state) => state.buildingBasicInfoHasError,\n  buildingDetailsHasError: (state) => state.buildingDetailsHasError,\n  buildingOtherDetailsHasError: (state) => state.buildingOtherDetailsHasError,\n  buildingStepOneErrors: (state) => state.buildingStepOneErrors,\n  buildingStepTwoErrors: (state) => state.buildingStepTwoErrors,\n  buildingApplications: (state) => state.buildingApplications,\n  buildingProfiles: (state) => state.buildingProfiles,\n  draftProperty: (state) => state.draftProperty,\n  buildingApplicationRequirements: (state) =>\n    state.buildingApplicationRequirements,\n  buildingRequirements: (state) => state.buildingRequirements,\n  realPropertyProfiles: (state) => state.realPropertyProfiles,\n  applicationRemarks: (state) => state.applicationRemarks,\n  legalDocuments: (state) => state.legalDocuments,\n  technicalDocuments: (state) => state.technicalDocuments,\n  supplementaryDocuments: (state) => state.supplementaryDocuments,\n  designPlans: (state) => state.designPlans,\n  designSpecs: (state) => state.designSpecs,\n  currentBuildingId: (state) => state.currentBuildingId,\n  buildingSearch: (state) => state.buildingSearch,\n  propertyFilterBy: (state) => state.propertyFilterBy,\n  buildingAssessmentMessage: (state) => state.buildingAssessmentMessage,\n  buildingAssessmentResult: (state) => state.buildingAssessmentResult,\n  buildingDeptCanAssess: (state) => state.buildingDeptCanAssess,\n  isLastBuildingDept: (state) => state.isLastBuildingDept,\n  forBuildingAssessmentList: (state) => state.forBuildingAssessmentList,\n  assessedBuildingList: (state) => state.assessedBuildingList,\n  isBuildingAssessment: (state) => state.isBuildingAssessment,\n  isAssessmentHasError: (state) => state.isAssessmentHasError,\n  isEvaluation: (state) => state.isEvaluation,\n  isFileUploadFailed: (state) => state.isFileUploadFailed,\n  currentSelectedProperty: (state) => state.currentSelectedProperty,\n  buildingAssessmentPayload: (state) => state.buildingAssessmentPayload,\n  propertyPageCount: (state) => state.propertyPageCount,\n};\n\nconst mutations = {\n  setCurrentPropertyStep: (state, currentPropertyStep) =>\n    (state.currentPropertyStep = currentPropertyStep),\n  resetPropertyState: (state) =>\n    Object.assign(state, getDefaultPropertyState()),\n  setBuildingApplication: (state, buildingApplication) =>\n    (state.buildingApplication = buildingApplication),\n  setBuildingBasicInformation: (state, buildingBasicInformation) =>\n    (state.buildingBasicInformation = buildingBasicInformation),\n  setBuildingDetails: (state, buildingDetails) =>\n    (state.buildingDetails = buildingDetails),\n  setBuildingOtherDetails: (state, buildingOtherDetails) =>\n    (state.buildingOtherDetails = buildingOtherDetails),\n  setBuildingBasicInfoHasError: (state, buildingBasicInfoHasError) =>\n    (state.buildingBasicInfoHasError = buildingBasicInfoHasError),\n  setBuildingDetailsHasError: (state, buildingDetailsHasError) =>\n    (state.buildingDetailsHasError = buildingDetailsHasError),\n  setBuildingOtherDetailsHasError: (state, buildingOtherDetailsHasError) =>\n    (state.buildingOtherDetailsHasError = buildingOtherDetailsHasError),\n  buildingSetStepOneErrors: (state, buildingStepOneErrors) => {\n    state.buildingStepOneErrors[`${buildingStepOneErrors.key}`] =\n      buildingStepOneErrors.value;\n  },\n  buildingSetStepTwoErrors: (state, buildingStepTwoErrors) => {\n    state.buildingStepTwoErrors[`${buildingStepTwoErrors.key}`] =\n      buildingStepTwoErrors.value;\n  },\n  setBuildingApplications: (state, buildingApplications) =>\n    (state.buildingApplications = buildingApplications),\n  setBuildingProfiles: (state, buildingProfiles) =>\n    (state.buildingProfiles = buildingProfiles),\n  setDraftProperty: (state, draftProperty) =>\n    (state.draftProperty = draftProperty),\n  setBuildingApplicationRequirements: (\n    state,\n    buildingApplicationRequirements\n  ) =>\n    (state.buildingApplicationRequirements = buildingApplicationRequirements),\n  setBuildingRequirements: (state, buildingRequirements) =>\n    (state.buildingRequirements = buildingRequirements),\n  setRealPropertyProfiles: (state, realPropertyProfiles) =>\n    (state.realPropertyProfiles = realPropertyProfiles),\n  setApplicationRemarks: (state, applicationRemarks) =>\n    (state.applicationRemarks = applicationRemarks),\n  setLegalDocuments: (state, legalDocuments) =>\n    (state.legalDocuments = legalDocuments),\n  setTechnicalDocuments: (state, technicalDocuments) =>\n    (state.technicalDocuments = technicalDocuments),\n  setSupplementaryDocuments: (state, supplementaryDocuments) =>\n    (state.supplementaryDocuments = supplementaryDocuments),\n  setCurrentBuildingId: (state, currentBuildingId) =>\n    (state.currentBuildingId = currentBuildingId),\n  setBuildingSearch: (state, buildingSearch) =>\n    (state.buildingSearch = buildingSearch),\n  setDesignPlans: (state, designPlans) => (state.designPlans = designPlans),\n  setDesignSpecs: (state, designSpecs) => (state.designSpecs = designSpecs),\n  setPropertyFilterBy: (state, propertyFilterBy) =>\n    (state.propertyFilterBy = propertyFilterBy),\n  setBuildingAssessmentMessage: (state, buildingAssessmentMessage) =>\n    (state.buildingAssessmentMessage = buildingAssessmentMessage),\n  setBuildingAssessmentResult: (state, buildingAssessmentResult) =>\n    (state.buildingAssessmentResult = buildingAssessmentResult),\n  setBuildingDeptCanAssess: (state, buildingDeptCanAssess) =>\n    (state.buildingDeptCanAssess = buildingDeptCanAssess),\n  setIsLastBuildingDept: (state, isLastBuildingDept) =>\n    (state.isLastBuildingDept = isLastBuildingDept),\n  setForBuildingAssessmentList: (state, forBuildingAssessmentList) =>\n    (state.forBuildingAssessmentList = forBuildingAssessmentList),\n  setAssessedBuildingList: (state, assessedBuildingList) =>\n    (state.assessedBuildingList = assessedBuildingList),\n  setIsBuildingAssessment: (state, isBuildingAssessment) =>\n    (state.isBuildingAssessment = isBuildingAssessment),\n  setIsAssessmentHasError: (state, isAssessmentHasError) =>\n    (state.isAssessmentHasError = isAssessmentHasError),\n  setIsEvaluation: (state, isEvaluation) => (state.isEvaluation = isEvaluation),\n  setIsFileUploadFailed: (state, isFileUploadFailed) =>\n    (state.isFileUploadFailed = isFileUploadFailed),\n  setCurrentSelectedProperty: (state, currentSelectedProperty) =>\n    (state.currentSelectedProperty = currentSelectedProperty),\n  setBuildingAssessmentPayload: (state, buildingAssessmentPayload) =>\n    (state.buildingAssessmentPayload = buildingAssessmentPayload),\n  setPropertyPageCount: (state, propertyPageCount) =>\n    (state.propertyPageCount = propertyPageCount),\n};\n\nconst actions = {\n  async getBuildingApplication({ commit, getters }, payload) {\n    try {\n      const response = await axios.get(\n        `${baseUrl}/api/building-application?application_number=${payload}`,\n        { headers: { Authorization: `jwt ${getters.authToken}` } }\n      );\n      let application = {\n        id: response.data.id,\n        is_draft: response.data.is_draft,\n        is_approve: response.data.is_approve,\n        is_disapprove: response.data.is_disapprove,\n        created_at: response.data.created_at,\n        application_status: response.data.application_status,\n      };\n      await commit(\"setBuildingApplication\", application);\n      await commit(\n        \"setBuildingBasicInformation\",\n        response.data.buildingbasicinformation\n      );\n      await commit(\"setBuildingDetails\", response.data.buildingdetails);\n      await commit(\n        \"setBuildingOtherDetails\",\n        response.data.buildingotherdetails\n      );\n      await commit(\n        \"setBuildingApplicationRequirements\",\n        response.data.buildingapplicationrequirements[0]\n      );\n      await router.push({ name: \"BuildingPermitApplication\" });\n    } catch (err) {\n      commit(\"setLoading\", false);\n      console.log(err);\n    }\n  },\n  async setBuildingCheckList({ commit, getters }, payload) {\n    try {\n      const response = await axios.post(\n        `${baseUrl}/api/building-checklist/`,\n        payload,\n        { headers: { Authorization: `jwt ${getters.authToken}` } }\n      );\n      let value = JSON.parse(payload.value);\n    } catch (err) {\n      commit(\"setLoading\", false);\n      console.log(err.response);\n    }\n  },\n  async updateBuildingCheckList({ commit, getters }, payload) {\n    try {\n      const response = await axios.put(\n        `${baseUrl}/api/building-checklist/`,\n        payload,\n        { headers: { Authorization: `jwt ${getters.authToken}` } }\n      );\n    } catch (err) {\n      commit(\"setLoading\", false);\n      console.log(err.response);\n    }\n  },\n  async setApplicationStateRemarks({ commit, getters }, payload) {\n    await commit(\"setApplicationRemarks\", payload);\n  },\n  async propertyEnrollment({ commit, dispatch, getters }, payload) {\n    let config = {\n      headers: {\n        \"OneDoc-Token\": oneDocToken,\n      },\n    };\n    const response = await axios.post(\n      `http://122.55.20.85:8012/lguapi/`,\n      payload,\n      config\n    );\n    console.log(response.data);\n  },\n  async approveBuildingApplication({ commit, dispatch, getters }, payload) {\n    try {\n      const response = await axios.put(\n        `${baseUrl}/staff/building-permit-application/`,\n        payload,\n        { headers: { Authorization: `jwt ${getters.authToken}` } }\n      );\n      // # 0 = For approval, 1 = disapprove / incomplete, 2 = complete, 3 = for inspection, 4 = for compliance, 5 = for payment / approve\n\n      let action =\n        payload.status == 1\n          ? \"incomplete\"\n          : payload.status == 2\n          ? \"for evaluation\"\n          : payload.status == 3\n          ? \"for inspection\"\n          : payload.status == 4\n          ? \"for compliance\"\n          : \"for payment\";\n\n      dispatch(\"createPrompt\", {\n        type: \"success\",\n        title: \"Success!\",\n        message: `Application was successfully set to ${action}!`,\n      });\n      router.push({ name: \"Applications\" });\n    } catch (err) {\n      console.log(err);\n      commit(\"setLoading\", false);\n    }\n  },\n  async getAllBuildingApplications({ commit, getters, dispatch }, page = 1) {\n    try {\n      const response = await axios.get(\n        `${baseUrl}/staff/building-permit-application-list/?page=${page}&filter_by=${getters.propertyFilterBy}&id=${getters.buildingSearch}`,\n        { headers: { Authorization: `jwt ${getters.authToken}` } }\n      );\n      commit(\"setPropertyPageCount\", response.data.total_pages);\n      commit(\"setBuildingApplications\", response.data.results);\n    } catch (err) {\n      console.log(err.response);\n    }\n  },\n  async getBuildingApplications({ commit, getters, dispatch }, page = 1) {\n    try {\n      const response = await axios.get(\n        `${baseUrl}/api/user-building-application-list/?page=${page}`,\n        { headers: { Authorization: `jwt ${getters.authToken}` } }\n      );\n      commit(\"setBuildingApplications\", response.data.results);\n      commit(\"setPropertyPageCount\", response.data.total_pages);\n    } catch (err) {\n      console.log(err.response);\n    }\n  },\n  async getBuildingProfiles({ commit, getters, dispatch }, payload) {\n    try {\n      const response = await axios.get(`${baseUrl}/api/building-profile/`, {\n        headers: { Authorization: `jwt ${getters.authToken}` },\n      });\n      commit(\"setBuildingProfiles\", response.data);\n    } catch (err) {\n      console.log(err.response);\n    }\n  },\n  async getRealPropertyProfiles({ commit, getters, dispatch }, payload) {\n    try {\n      const response = await axios.get(\n        `${baseUrl}/api/real-property-profile/`,\n        { headers: { Authorization: `jwt ${getters.authToken}` } }\n      );\n      commit(\"setRealPropertyProfiles\", response.data);\n    } catch (err) {\n      console.log(err.response);\n    }\n  },\n  async addBuildingApplication({ commit, getters, dispatch }, payload) {\n    try {\n      const response = await axios.post(\n        `${baseUrl}/api/building-permit-application/`,\n        payload,\n        { headers: { Authorization: `jwt ${getters.authToken}` } }\n      );\n      commit(\"setBuildingApplication\", response.data);\n    } catch (err) {\n      console.log(err.response);\n    }\n  },\n  async updateBuildingApplication({ commit, getters, dispatch }, payload) {\n    try {\n      payload.id = getters.buildingApplication.id;\n      const response = await axios.put(\n        `${baseUrl}/api/building-permit-application/`,\n        payload,\n        { headers: { Authorization: `jwt ${getters.authToken}` } }\n      );\n    } catch (err) {\n      console.log(err.response);\n    }\n  },\n  async addBuildingBasicInformation({ commit, getters }, payload) {\n    try {\n      payload.application_number = getters.buildingApplication.id;\n      const response = await axios.post(\n        `${baseUrl}/api/building-basic-information/`,\n        payload,\n        { headers: { Authorization: `jwt ${getters.authToken}` } }\n      );\n      await commit(\"setBuildingBasicInformation\", response.data);\n      commit(\"setBuildingBasicInfoHasError\", false);\n    } catch (err) {\n      commit(\"setBuildingBasicInfoHasError\", true);\n      let errors = { key: \"basic_information\", value: err.response.data };\n      commit(\"buildingSetStepOneErrors\", errors);\n      console.log(err);\n    }\n  },\n  async updateBuildingBasicInformation({ commit, getters }, payload) {\n    try {\n      payload.id = getters.buildingBasicInformation.id;\n      const response = await axios.put(\n        `${baseUrl}/api/building-basic-information/`,\n        payload,\n        { headers: { Authorization: `jwt ${getters.authToken}` } }\n      );\n      commit(\"setBuildingBasicInformation\", response.data);\n      commit(\"setBuildingBasicInfoHasError\", false);\n    } catch (err) {\n      let errors = { key: \"basic_information\", value: err.response.data };\n      commit(\"buildingSetStepOneErrors\", errors);\n      commit(\"setBuildingBasicInfoHasError\", true);\n      console.log(err.response);\n    }\n  },\n  async addBuildingDetails({ commit, getters }, payload) {\n    try {\n      payload.application_number = getters.buildingApplication.id;\n      const response = await axios.post(\n        `${baseUrl}/api/building-details/`,\n        payload,\n        { headers: { Authorization: `jwt ${getters.authToken}` } }\n      );\n      commit(\"setBuildingDetailsHasError\", false);\n      commit(\"setBuildingDetails\", response.data);\n    } catch (err) {\n      let errors = { key: \"building_details\", value: err.response.data };\n      commit(\"buildingSetStepTwoErrors\", errors);\n      commit(\"setBuildingDetailsHasError\", true);\n      console.log(err.response);\n    }\n  },\n  async addBuildingOtherDetails({ commit, getters }, payload) {\n    try {\n      payload.application_number = getters.buildingApplication.id;\n      const response = await axios.post(\n        `${baseUrl}/api/building-other-details/`,\n        payload,\n        { headers: { Authorization: `jwt ${getters.authToken}` } }\n      );\n      commit(\"setBuildingOtherDetailsHasError\", false);\n      commit(\"setBuildingOtherDetails\", response.data);\n    } catch (err) {\n      let errors = { key: \"building_other_details\", value: err.response.data };\n      commit(\"buildingSetStepTwoErrors\", errors);\n      commit(\"setBuildingOtherDetailsHasError\", true);\n      console.log(err.response);\n    }\n  },\n  async updateBuildingDetails({ commit, getters }, payload) {\n    try {\n      payload.id = getters.buildingDetails.id;\n      const response = await axios.put(\n        `${baseUrl}/api/building-details/`,\n        payload,\n        { headers: { Authorization: `jwt ${getters.authToken}` } }\n      );\n      commit(\"setBuildingDetails\", response.data);\n      commit(\"setBuildingDetailsHasError\", false);\n    } catch (err) {\n      let errors = { key: \"building_details\", value: err.response.data };\n      commit(\"buildingSetStepTwoErrors\", errors);\n      commit(\"setBuildingDetailsHasError\", true);\n      console.log(err.response);\n    }\n  },\n  async updateBuildingOtherDetails({ commit, getters }, payload) {\n    try {\n      payload.id = getters.buildingOtherDetails.id;\n      const response = await axios.put(\n        `${baseUrl}/api/building-other-details/`,\n        payload,\n        { headers: { Authorization: `jwt ${getters.authToken}` } }\n      );\n      commit(\"setBuildingOtherDetails\", response.data);\n      commit(\"setBuildingOtherDetailsHasError\", false);\n    } catch (err) {\n      let errors = { key: \"building_other_details\", value: err.response.data };\n      commit(\"buildingSetStepTwoErrors\", errors);\n      console.log(err.response);\n      commit(\"setBuildingOtherDetailsHasError\", true);\n    }\n  },\n  async addBuildingApplicationRequirements({ commit, getters }, payload) {\n    try {\n      const response = await axios.post(\n        `${baseUrl}/api/building-application-requirements/`,\n        payload,\n        { headers: { Authorization: `jwt ${getters.authToken}` } }\n      );\n      commit(\"setBuildingApplicationRequirements\", response.data);\n    } catch (err) {\n      console.log(err.response);\n    }\n  },\n  async uploadBuildingRequirements({ commit, getters, dispatch }, payload) {\n    try {\n      commit(\"setLoading\", true);\n      const response = await axios.post(\n        `${baseUrl}/api/building-file-upload/`,\n        payload,\n        { headers: { Authorization: `jwt ${getters.authToken}` } }\n      );\n      await dispatch(\"getBuildingApplicationRequirements\");\n      commit(\"setIsFileUploadFailed\", false);\n      commit(\"setLoading\", false);\n    } catch (err) {\n      err.response ? console.log(err.response) : console.log(err);\n      commit(\"setLoading\", false);\n      commit(\"setIsFileUploadFailed\", true);\n      dispatch(\"createPrompt\", {\n        type: \"error\",\n        title: \"Failed!\",\n        message: \"Something went wrong! Please try again later.\",\n      });\n    }\n  },\n  async getBuildingApplicationRequirements({ commit, getters }) {\n    try {\n      let payload = { id: getters.buildingApplicationRequirements.id };\n      const response = await axios.get(\n        `${baseUrl}/api/building-application-requirements/`,\n        {\n          headers: { Authorization: `jwt ${getters.authToken}` },\n          params: payload,\n        }\n      );\n      response.data.buildingrequirements = response.data.buildingrequirements.filter(\n        (item) => item.is_active == true\n      );\n      commit(\"setBuildingRequirements\", response.data);\n      if (response.data.buildingchecklist.length > 0) {\n        response.data.buildingchecklist.map((item) => {\n          if (item.category === \"legal\") {\n            commit(\"setLegalDocuments\", item);\n          } else if (item.category === \"technical\") {\n            commit(\"setTechnicalDocuments\", item);\n          } else if (item.category === \"supplementary\") {\n            commit(\"setSupplementaryDocuments\", item);\n          } else if (item.category === \"design_plans\") {\n            commit(\"setDesignPlans\", item);\n          } else if (item.category === \"design_specs\") {\n            commit(\"setDesignSpecs\", item);\n          }\n        });\n      }\n    } catch (err) {\n      console.log(err);\n    }\n  },\n  async assessBuildingApplication({ commit, getters, dispatch }, payload) {\n    try {\n      const response = await axios.post(\n        `${baseUrl}/staff/building-dept-assessment`,\n        payload,\n        { headers: { Authorization: `jwt ${getters.authToken}` } }\n      );\n      commit(\"setBuildingAssessmentMessage\", response.data.message);\n      commit(\"setIsAssessmentHasError\", false);\n    } catch (err) {\n      console.log(err);\n      if (err.response) {\n        console.log(err.response);\n        commit(\"setIsAssessmentHasError\", true);\n        dispatch(\"createPrompt\", {\n          type: \"error\",\n          title: \"Failed!\",\n          message: err.response.data.detail,\n        });\n      }\n    }\n  },\n  async getBuildingAssessmentResult({ commit, getters }, payload) {\n    try {\n      const response = await axios.get(\n        `${baseUrl}/staff/building-dept-assessment`,\n        {\n          headers: { Authorization: `jwt ${getters.authToken}` },\n          params: payload,\n        }\n      );\n      commit(\"setBuildingAssessmentResult\", response.data);\n    } catch (err) {\n      console.log(err);\n      if (err.response) {\n        console.log(err.response);\n      }\n    }\n  },\n  async checkBuildingDeptCanAssess({ commit, getters }, payload) {\n    try {\n      const response = await axios.get(\n        `${baseUrl}/staff/check-building-dept-if-can-assess`,\n        {\n          headers: { Authorization: `jwt ${getters.authToken}` },\n          params: payload,\n        }\n      );\n      commit(\"setBuildingDeptCanAssess\", response.data.can_assess);\n      commit(\"setIsLastBuildingDept\", response.data.last_department);\n    } catch (err) {\n      console.log(err);\n      if (err.response) {\n        console.log(err.response);\n      }\n    }\n  },\n  async getForBuildingAssessmentList({ commit, getters }, page = 1) {\n    try {\n      const response = await axios.get(\n        `${baseUrl}/staff/for-building-assessment-list?page=${page}`,\n        {\n          headers: { Authorization: `jwt ${getters.authToken}` },\n        }\n      );\n      commit(\"setForBuildingAssessmentList\", response.data.results);\n      commit(\"setPropertyPageCount\", response.data.total_pages);\n    } catch (err) {\n      console.log(err);\n      if (err.response) {\n        console.log(err.response.data);\n      }\n    }\n  },\n  async getAssessedBuildingList({ commit, getters }, page = 1) {\n    try {\n      const response = await axios.get(\n        `${baseUrl}/staff/assessed-building-application-list?page=${page}`,\n        {\n          headers: { Authorization: `jwt ${getters.authToken}` },\n        }\n      );\n      commit(\"setAssessedBuildingList\", response.data.results);\n      commit(\"setPropertyPageCount\", response.data.total_pages);\n    } catch (err) {\n      console.log(err);\n      if (err.response) {\n        console.log(err.response.data);\n      }\n    }\n  },\n  async resetBuildingAssessment({ commit, getters }, payload) {\n    try {\n      const response = await axios.put(\n        `${baseUrl}/staff/reset-building-assessment`,\n        payload,\n        {\n          headers: { Authorization: `jwt ${getters.authToken}` },\n        }\n      );\n    } catch (err) {\n      console.log(err);\n      if (err.response) {\n        console.log(err.response.data);\n      }\n    }\n  },\n  async getUserBuildingAssessmentResult({ commit, getters }, payload) {\n    try {\n      const response = await axios.get(\n        `${baseUrl}/api/building-assessment-result/`,\n        {\n          headers: { Authorization: `jwt ${getters.authToken}` },\n          params: payload,\n        }\n      );\n      commit(\"setBuildingAssessmentResult\", response.data);\n    } catch (err) {\n      console.log(err);\n      if (err.response) {\n        console.log(err.response);\n      }\n    }\n  },\n};\n\nexport default {\n  state,\n  getters,\n  actions,\n  mutations,\n};\n"]}]}