{"remainingRequest":"/var/www/html/boss-web/node_modules/babel-loader/lib/index.js!/var/www/html/boss-web/src/store/modules/business.js","dependencies":[{"path":"/var/www/html/boss-web/src/store/modules/business.js","mtime":1611297473582},{"path":"/var/www/html/boss-web/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/var/www/html/boss-web/node_modules/babel-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:aW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMuYXJyYXkuY29uY2F0IjsKaW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMuYXJyYXkuZmlsdGVyIjsKaW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMuYXJyYXkuZm9yLWVhY2giOwppbXBvcnQgImNvcmUtanMvbW9kdWxlcy9lcy5vYmplY3QudG8tc3RyaW5nIjsKaW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMucmVnZXhwLmV4ZWMiOwppbXBvcnQgImNvcmUtanMvbW9kdWxlcy9lcy5yZWdleHAudG8tc3RyaW5nIjsKaW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMuc3RyaW5nLnJlcGxhY2UiOwppbXBvcnQgImNvcmUtanMvbW9kdWxlcy9lcy5zdHJpbmcuc3BsaXQiOwppbXBvcnQgImNvcmUtanMvbW9kdWxlcy93ZWIuZG9tLWNvbGxlY3Rpb25zLmZvci1lYWNoIjsKaW1wb3J0IF9jcmVhdGVGb3JPZkl0ZXJhdG9ySGVscGVyIGZyb20gIi92YXIvd3d3L2h0bWwvYm9zcy13ZWIvbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2NyZWF0ZUZvck9mSXRlcmF0b3JIZWxwZXIiOwppbXBvcnQgInJlZ2VuZXJhdG9yLXJ1bnRpbWUvcnVudGltZSI7CmltcG9ydCBfYXN5bmNUb0dlbmVyYXRvciBmcm9tICIvdmFyL3d3dy9odG1sL2Jvc3Mtd2ViL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9hc3luY1RvR2VuZXJhdG9yIjsKaW1wb3J0IGF4aW9zIGZyb20gImF4aW9zIjsKdmFyIGJhc2VVcmwgPSBwcm9jZXNzLmVudi5WVUVfQVBQX0FQSV9VUkw7CnZhciBvbmVEb2NUb2tlbiA9IHByb2Nlc3MuZW52LlZVRV9BUFBfT05FX0RPQ19UT0tFTjsKaW1wb3J0IHJvdXRlciBmcm9tICIuLi8uLi9yb3V0ZXIvaW5kZXguanMiOwoKdmFyIGdldERlZmF1bHRCdXNpbmVzc1N0YXRlID0gZnVuY3Rpb24gZ2V0RGVmYXVsdEJ1c2luZXNzU3RhdGUoKSB7CiAgcmV0dXJuIHsKICAgIGN1cnJlbnRCdXNpbmVzc1N0ZXA6ICIxIiwKICAgIGJ1c2luZXNzQXBwbGljYXRpb246IHt9LAogICAgYnVzaW5lc3NCYXNpY0luZm9ybWF0aW9uOiB7fSwKICAgIGJ1c2luZXNzRGV0YWlsczoge30sCiAgICBsZXNzb3JEZXRhaWxzOiB7fSwKICAgIGJ1c2luZXNzQWN0aXZpdGllczogW10sCiAgICBhcHBsaWNhdGlvbkhhc0Vycm9yOiBmYWxzZSwKICAgIGJhc2ljSW5mb0hhc0Vycm9yOiBmYWxzZSwKICAgIGRldGFpbHNIYXNFcnJvcjogZmFsc2UsCiAgICBsZXNzb3JEZXRhaWxzSGFzRXJyb3I6IGZhbHNlLAogICAgYWN0aXZpdGllc0hhc0Vycm9yOiBmYWxzZSwKICAgIHN0ZXBPbmVFcnJvcnM6IHsKICAgICAgYXBwbGljYXRpb246IFtdLAogICAgICBiYXNpY19pbmZvcm1hdGlvbjogW10KICAgIH0sCiAgICBzdGVwVHdvRXJyb3JzOiB7CiAgICAgIGJ1c2luZXNzX2RldGFpbHM6IFtdLAogICAgICBsZXNzb3JfZGV0YWlsczogW10KICAgIH0sCiAgICBhcHBsaWNhdGlvbnM6IFtdLAogICAgYnVzaW5lc3NQcm9maWxlczogW10sCiAgICBhcHBsaWNhdGlvblJlcXVpcmVtZW50czoge30sCiAgICByZXF1aXJlbWVudHM6IFtdLAogICAgaXNVcGxvYWRpbmc6IGZhbHNlLAogICAgZHJhZnRCdXNpbmVzczogZmFsc2UsCiAgICBwYWdlQ291bnQ6IDAsCiAgICBmaWx0ZXJCeTogImFsbCIsCiAgICBpc0J1c2luZXNzRW5yb2xsbWVudFN1Y2Nlc3M6IGZhbHNlLAogICAgdHlwZU9mT3JnYW5pemF0aW9uOiAiIiwKICAgIGN1cnJlbnRCdXNpbmVzc0lkOiAwLAogICAgYnVzaW5lc3NTZWFyY2g6ICIiLAogICAgYnVzaW5lc3NBc3Nlc3NtZW50TWVzc2FnZTogIiIsCiAgICBidXNpbmVzc0Fzc2Vzc21lbnRSZXN1bHQ6IFtdLAogICAgYnVzaW5lc3NEZXB0Q2FuQXNzZXNzOiBmYWxzZSwKICAgIGlzTGFzdEJ1c2luZXNzRGVwdDogZmFsc2UsCiAgICBmb3JCdXNpbmVzc0Fzc2Vzc21lbnRMaXN0OiBbXSwKICAgIGFzc2Vzc2VkQnVzaW5lc3NMaXN0OiBbXSwKICAgIGN1cnJlbnRTZWxlY3RlZEJ1c2luZXNzOiB7fSwKICAgIGlzQnVzaW5lc3NBc3Nlc3NtZW50OiBmYWxzZSwKICAgIGFzc2Vzc21lbnRQYXlsb2FkOiB7fSwKICAgIGFjdGl2aXR5RXJyb3JzOiB7fSwKICAgIHNob3dBY3Rpb25CdXR0b25zOiB0cnVlCiAgfTsKfTsKCnZhciBzdGF0ZSA9IGdldERlZmF1bHRCdXNpbmVzc1N0YXRlKCk7CnZhciBnZXR0ZXJzID0gewogIGN1cnJlbnRCdXNpbmVzc1N0ZXA6IGZ1bmN0aW9uIGN1cnJlbnRCdXNpbmVzc1N0ZXAoc3RhdGUpIHsKICAgIHJldHVybiBzdGF0ZS5jdXJyZW50QnVzaW5lc3NTdGVwOwogIH0sCiAgYnVzaW5lc3NBcHBsaWNhdGlvbjogZnVuY3Rpb24gYnVzaW5lc3NBcHBsaWNhdGlvbihzdGF0ZSkgewogICAgcmV0dXJuIHN0YXRlLmJ1c2luZXNzQXBwbGljYXRpb247CiAgfSwKICBidXNpbmVzc0Jhc2ljSW5mb3JtYXRpb246IGZ1bmN0aW9uIGJ1c2luZXNzQmFzaWNJbmZvcm1hdGlvbihzdGF0ZSkgewogICAgcmV0dXJuIHN0YXRlLmJ1c2luZXNzQmFzaWNJbmZvcm1hdGlvbjsKICB9LAogIGJ1c2luZXNzRGV0YWlsczogZnVuY3Rpb24gYnVzaW5lc3NEZXRhaWxzKHN0YXRlKSB7CiAgICByZXR1cm4gc3RhdGUuYnVzaW5lc3NEZXRhaWxzOwogIH0sCiAgbGVzc29yRGV0YWlsczogZnVuY3Rpb24gbGVzc29yRGV0YWlscyhzdGF0ZSkgewogICAgcmV0dXJuIHN0YXRlLmxlc3NvckRldGFpbHM7CiAgfSwKICBidXNpbmVzc0FjdGl2aXRpZXM6IGZ1bmN0aW9uIGJ1c2luZXNzQWN0aXZpdGllcyhzdGF0ZSkgewogICAgcmV0dXJuIHN0YXRlLmJ1c2luZXNzQWN0aXZpdGllczsKICB9LAogIGFwcGxpY2F0aW9uSGFzRXJyb3I6IGZ1bmN0aW9uIGFwcGxpY2F0aW9uSGFzRXJyb3Ioc3RhdGUpIHsKICAgIHJldHVybiBzdGF0ZS5hcHBsaWNhdGlvbkhhc0Vycm9yOwogIH0sCiAgYmFzaWNJbmZvSGFzRXJyb3I6IGZ1bmN0aW9uIGJhc2ljSW5mb0hhc0Vycm9yKHN0YXRlKSB7CiAgICByZXR1cm4gc3RhdGUuYmFzaWNJbmZvSGFzRXJyb3I7CiAgfSwKICBkZXRhaWxzSGFzRXJyb3I6IGZ1bmN0aW9uIGRldGFpbHNIYXNFcnJvcihzdGF0ZSkgewogICAgcmV0dXJuIHN0YXRlLmRldGFpbHNIYXNFcnJvcjsKICB9LAogIGxlc3NvckRldGFpbHNIYXNFcnJvcjogZnVuY3Rpb24gbGVzc29yRGV0YWlsc0hhc0Vycm9yKHN0YXRlKSB7CiAgICByZXR1cm4gc3RhdGUubGVzc29yRGV0YWlsc0hhc0Vycm9yOwogIH0sCiAgYWN0aXZpdGllc0hhc0Vycm9yOiBmdW5jdGlvbiBhY3Rpdml0aWVzSGFzRXJyb3Ioc3RhdGUpIHsKICAgIHJldHVybiBzdGF0ZS5hY3Rpdml0aWVzSGFzRXJyb3I7CiAgfSwKICBzdGVwT25lRXJyb3JzOiBmdW5jdGlvbiBzdGVwT25lRXJyb3JzKHN0YXRlKSB7CiAgICByZXR1cm4gc3RhdGUuc3RlcE9uZUVycm9yczsKICB9LAogIHN0ZXBUd29FcnJvcnM6IGZ1bmN0aW9uIHN0ZXBUd29FcnJvcnMoc3RhdGUpIHsKICAgIHJldHVybiBzdGF0ZS5zdGVwVHdvRXJyb3JzOwogIH0sCiAgYXBwbGljYXRpb25zOiBmdW5jdGlvbiBhcHBsaWNhdGlvbnMoc3RhdGUpIHsKICAgIHJldHVybiBzdGF0ZS5hcHBsaWNhdGlvbnM7CiAgfSwKICBidXNpbmVzc1Byb2ZpbGVzOiBmdW5jdGlvbiBidXNpbmVzc1Byb2ZpbGVzKHN0YXRlKSB7CiAgICByZXR1cm4gc3RhdGUuYnVzaW5lc3NQcm9maWxlczsKICB9LAogIGFwcGxpY2F0aW9uUmVxdWlyZW1lbnRzOiBmdW5jdGlvbiBhcHBsaWNhdGlvblJlcXVpcmVtZW50cyhzdGF0ZSkgewogICAgcmV0dXJuIHN0YXRlLmFwcGxpY2F0aW9uUmVxdWlyZW1lbnRzOwogIH0sCiAgaXNVcGxvYWRpbmc6IGZ1bmN0aW9uIGlzVXBsb2FkaW5nKHN0YXRlKSB7CiAgICByZXR1cm4gc3RhdGUuaXNVcGxvYWRpbmc7CiAgfSwKICByZXF1aXJlbWVudHM6IGZ1bmN0aW9uIHJlcXVpcmVtZW50cyhzdGF0ZSkgewogICAgcmV0dXJuIHN0YXRlLnJlcXVpcmVtZW50czsKICB9LAogIGRyYWZ0QnVzaW5lc3M6IGZ1bmN0aW9uIGRyYWZ0QnVzaW5lc3Moc3RhdGUpIHsKICAgIHJldHVybiBzdGF0ZS5kcmFmdEJ1c2luZXNzOwogIH0sCiAgcGFnZUNvdW50OiBmdW5jdGlvbiBwYWdlQ291bnQoc3RhdGUpIHsKICAgIHJldHVybiBzdGF0ZS5wYWdlQ291bnQ7CiAgfSwKICBmaWx0ZXJCeTogZnVuY3Rpb24gZmlsdGVyQnkoc3RhdGUpIHsKICAgIHJldHVybiBzdGF0ZS5maWx0ZXJCeTsKICB9LAogIGlzQnVzaW5lc3NFbnJvbGxtZW50U3VjY2VzczogZnVuY3Rpb24gaXNCdXNpbmVzc0Vucm9sbG1lbnRTdWNjZXNzKHN0YXRlKSB7CiAgICByZXR1cm4gc3RhdGUuaXNCdXNpbmVzc0Vucm9sbG1lbnRTdWNjZXNzOwogIH0sCiAgdHlwZU9mT3JnYW5pemF0aW9uOiBmdW5jdGlvbiB0eXBlT2ZPcmdhbml6YXRpb24oc3RhdGUpIHsKICAgIHJldHVybiBzdGF0ZS50eXBlT2ZPcmdhbml6YXRpb247CiAgfSwKICBjdXJyZW50QnVzaW5lc3NJZDogZnVuY3Rpb24gY3VycmVudEJ1c2luZXNzSWQoc3RhdGUpIHsKICAgIHJldHVybiBzdGF0ZS5jdXJyZW50QnVzaW5lc3NJZDsKICB9LAogIGJ1c2luZXNzU2VhcmNoOiBmdW5jdGlvbiBidXNpbmVzc1NlYXJjaChzdGF0ZSkgewogICAgcmV0dXJuIHN0YXRlLmJ1c2luZXNzU2VhcmNoOwogIH0sCiAgYnVzaW5lc3NBc3Nlc3NtZW50TWVzc2FnZTogZnVuY3Rpb24gYnVzaW5lc3NBc3Nlc3NtZW50TWVzc2FnZShzdGF0ZSkgewogICAgcmV0dXJuIHN0YXRlLmJ1c2luZXNzQXNzZXNzbWVudE1lc3NhZ2U7CiAgfSwKICBidXNpbmVzc0Fzc2Vzc21lbnRSZXN1bHQ6IGZ1bmN0aW9uIGJ1c2luZXNzQXNzZXNzbWVudFJlc3VsdChzdGF0ZSkgewogICAgcmV0dXJuIHN0YXRlLmJ1c2luZXNzQXNzZXNzbWVudFJlc3VsdDsKICB9LAogIGJ1c2luZXNzRGVwdENhbkFzc2VzczogZnVuY3Rpb24gYnVzaW5lc3NEZXB0Q2FuQXNzZXNzKHN0YXRlKSB7CiAgICByZXR1cm4gc3RhdGUuYnVzaW5lc3NEZXB0Q2FuQXNzZXNzOwogIH0sCiAgaXNMYXN0QnVzaW5lc3NEZXB0OiBmdW5jdGlvbiBpc0xhc3RCdXNpbmVzc0RlcHQoc3RhdGUpIHsKICAgIHJldHVybiBzdGF0ZS5pc0xhc3RCdXNpbmVzc0RlcHQ7CiAgfSwKICBmb3JCdXNpbmVzc0Fzc2Vzc21lbnRMaXN0OiBmdW5jdGlvbiBmb3JCdXNpbmVzc0Fzc2Vzc21lbnRMaXN0KHN0YXRlKSB7CiAgICByZXR1cm4gc3RhdGUuZm9yQnVzaW5lc3NBc3Nlc3NtZW50TGlzdDsKICB9LAogIGFzc2Vzc2VkQnVzaW5lc3NMaXN0OiBmdW5jdGlvbiBhc3Nlc3NlZEJ1c2luZXNzTGlzdChzdGF0ZSkgewogICAgcmV0dXJuIHN0YXRlLmFzc2Vzc2VkQnVzaW5lc3NMaXN0OwogIH0sCiAgY3VycmVudFNlbGVjdGVkQnVzaW5lc3M6IGZ1bmN0aW9uIGN1cnJlbnRTZWxlY3RlZEJ1c2luZXNzKHN0YXRlKSB7CiAgICByZXR1cm4gc3RhdGUuY3VycmVudFNlbGVjdGVkQnVzaW5lc3M7CiAgfSwKICBpc0J1c2luZXNzQXNzZXNzbWVudDogZnVuY3Rpb24gaXNCdXNpbmVzc0Fzc2Vzc21lbnQoc3RhdGUpIHsKICAgIHJldHVybiBzdGF0ZS5pc0J1c2luZXNzQXNzZXNzbWVudDsKICB9LAogIGFzc2Vzc21lbnRQYXlsb2FkOiBmdW5jdGlvbiBhc3Nlc3NtZW50UGF5bG9hZChzdGF0ZSkgewogICAgcmV0dXJuIHN0YXRlLmFzc2Vzc21lbnRQYXlsb2FkOwogIH0sCiAgYWN0aXZpdHlFcnJvcnM6IGZ1bmN0aW9uIGFjdGl2aXR5RXJyb3JzKHN0YXRlKSB7CiAgICByZXR1cm4gc3RhdGUuYWN0aXZpdHlFcnJvcnM7CiAgfSwKICBzaG93QWN0aW9uQnV0dG9uczogZnVuY3Rpb24gc2hvd0FjdGlvbkJ1dHRvbnMoc3RhdGUpIHsKICAgIHJldHVybiBzdGF0ZS5zaG93QWN0aW9uQnV0dG9uczsKICB9Cn07CnZhciBtdXRhdGlvbnMgPSB7CiAgc2V0Q3VycmVudEJ1c2luZXNzU3RlcDogZnVuY3Rpb24gc2V0Q3VycmVudEJ1c2luZXNzU3RlcChzdGF0ZSwgY3VycmVudEJ1c2luZXNzU3RlcCkgewogICAgcmV0dXJuIHN0YXRlLmN1cnJlbnRCdXNpbmVzc1N0ZXAgPSBjdXJyZW50QnVzaW5lc3NTdGVwOwogIH0sCiAgcmVzZXRCdXNpbmVzc1N0YXRlOiBmdW5jdGlvbiByZXNldEJ1c2luZXNzU3RhdGUoc3RhdGUpIHsKICAgIHJldHVybiBPYmplY3QuYXNzaWduKHN0YXRlLCBnZXREZWZhdWx0QnVzaW5lc3NTdGF0ZSgpKTsKICB9LAogIHNldEJ1c2luZXNzQXBwbGljYXRpb246IGZ1bmN0aW9uIHNldEJ1c2luZXNzQXBwbGljYXRpb24oc3RhdGUsIGJ1c2luZXNzQXBwbGljYXRpb24pIHsKICAgIHJldHVybiBzdGF0ZS5idXNpbmVzc0FwcGxpY2F0aW9uID0gYnVzaW5lc3NBcHBsaWNhdGlvbjsKICB9LAogIHNldEJ1c2luZXNzQmFzaWNJbmZvcm1hdGlvbjogZnVuY3Rpb24gc2V0QnVzaW5lc3NCYXNpY0luZm9ybWF0aW9uKHN0YXRlLCBidXNpbmVzc0Jhc2ljSW5mb3JtYXRpb24pIHsKICAgIHJldHVybiBzdGF0ZS5idXNpbmVzc0Jhc2ljSW5mb3JtYXRpb24gPSBidXNpbmVzc0Jhc2ljSW5mb3JtYXRpb247CiAgfSwKICBzZXRCdXNpbmVzc0RldGFpbHM6IGZ1bmN0aW9uIHNldEJ1c2luZXNzRGV0YWlscyhzdGF0ZSwgYnVzaW5lc3NEZXRhaWxzKSB7CiAgICByZXR1cm4gc3RhdGUuYnVzaW5lc3NEZXRhaWxzID0gYnVzaW5lc3NEZXRhaWxzOwogIH0sCiAgc2V0TGVzc29yRGV0YWlsczogZnVuY3Rpb24gc2V0TGVzc29yRGV0YWlscyhzdGF0ZSwgbGVzc29yRGV0YWlscykgewogICAgcmV0dXJuIHN0YXRlLmxlc3NvckRldGFpbHMgPSBsZXNzb3JEZXRhaWxzOwogIH0sCiAgc2V0QnVzaW5lc3NBY3Rpdml0aWVzOiBmdW5jdGlvbiBzZXRCdXNpbmVzc0FjdGl2aXRpZXMoc3RhdGUsIGJ1c2luZXNzQWN0aXZpdGllcykgewogICAgcmV0dXJuIHN0YXRlLmJ1c2luZXNzQWN0aXZpdGllcyA9IGJ1c2luZXNzQWN0aXZpdGllczsKICB9LAogIHNldEFwcGxpY2F0aW9uSGFzRXJyb3I6IGZ1bmN0aW9uIHNldEFwcGxpY2F0aW9uSGFzRXJyb3Ioc3RhdGUsIGFwcGxpY2F0aW9uSGFzRXJyb3IpIHsKICAgIHJldHVybiBzdGF0ZS5hcHBsaWNhdGlvbkhhc0Vycm9yID0gYXBwbGljYXRpb25IYXNFcnJvcjsKICB9LAogIHNldEJhc2ljSW5mb0hhc0Vycm9yOiBmdW5jdGlvbiBzZXRCYXNpY0luZm9IYXNFcnJvcihzdGF0ZSwgYmFzaWNJbmZvSGFzRXJyb3IpIHsKICAgIHJldHVybiBzdGF0ZS5iYXNpY0luZm9IYXNFcnJvciA9IGJhc2ljSW5mb0hhc0Vycm9yOwogIH0sCiAgc2V0RGV0YWlsc0hhc0Vycm9yOiBmdW5jdGlvbiBzZXREZXRhaWxzSGFzRXJyb3Ioc3RhdGUsIGRldGFpbHNIYXNFcnJvcikgewogICAgcmV0dXJuIHN0YXRlLmRldGFpbHNIYXNFcnJvciA9IGRldGFpbHNIYXNFcnJvcjsKICB9LAogIHNldExlc3NvckRldGFpbHNIYXNFcnJvcjogZnVuY3Rpb24gc2V0TGVzc29yRGV0YWlsc0hhc0Vycm9yKHN0YXRlLCBsZXNzb3JEZXRhaWxzSGFzRXJyb3IpIHsKICAgIHJldHVybiBzdGF0ZS5sZXNzb3JEZXRhaWxzSGFzRXJyb3IgPSBsZXNzb3JEZXRhaWxzSGFzRXJyb3I7CiAgfSwKICBzZXRTdGVwT25lRXJyb3JzOiBmdW5jdGlvbiBzZXRTdGVwT25lRXJyb3JzKHN0YXRlLCBzdGVwT25lRXJyb3JzKSB7CiAgICBzdGF0ZS5zdGVwT25lRXJyb3JzWyIiLmNvbmNhdChzdGVwT25lRXJyb3JzLmtleSldID0gc3RlcE9uZUVycm9ycy52YWx1ZTsKICB9LAogIHNldFN0ZXBUd29FcnJvcnM6IGZ1bmN0aW9uIHNldFN0ZXBUd29FcnJvcnMoc3RhdGUsIHN0ZXBUd29FcnJvcnMpIHsKICAgIHN0YXRlLnN0ZXBUd29FcnJvcnNbIiIuY29uY2F0KHN0ZXBUd29FcnJvcnMua2V5KV0gPSBzdGVwVHdvRXJyb3JzLnZhbHVlOwogIH0sCiAgc2V0QXBwbGljYXRpb25zOiBmdW5jdGlvbiBzZXRBcHBsaWNhdGlvbnMoc3RhdGUsIGFwcGxpY2F0aW9ucykgewogICAgcmV0dXJuIHN0YXRlLmFwcGxpY2F0aW9ucyA9IGFwcGxpY2F0aW9uczsKICB9LAogIHNldEJ1c2luZXNzUHJvZmlsZXM6IGZ1bmN0aW9uIHNldEJ1c2luZXNzUHJvZmlsZXMoc3RhdGUsIGJ1c2luZXNzUHJvZmlsZXMpIHsKICAgIHJldHVybiBzdGF0ZS5idXNpbmVzc1Byb2ZpbGVzID0gYnVzaW5lc3NQcm9maWxlczsKICB9LAogIHNldEFwcGxpY2F0aW9uUmVxdWlyZW1lbnRzOiBmdW5jdGlvbiBzZXRBcHBsaWNhdGlvblJlcXVpcmVtZW50cyhzdGF0ZSwgYXBwbGljYXRpb25SZXF1aXJlbWVudHMpIHsKICAgIHJldHVybiBzdGF0ZS5hcHBsaWNhdGlvblJlcXVpcmVtZW50cyA9IGFwcGxpY2F0aW9uUmVxdWlyZW1lbnRzOwogIH0sCiAgc2V0SXNVcGxvYWRpbmc6IGZ1bmN0aW9uIHNldElzVXBsb2FkaW5nKHN0YXRlLCBpc1VwbG9hZGluZykgewogICAgcmV0dXJuIHN0YXRlLmlzVXBsb2FkaW5nID0gaXNVcGxvYWRpbmc7CiAgfSwKICBzZXRSZXF1aXJlbWVudHM6IGZ1bmN0aW9uIHNldFJlcXVpcmVtZW50cyhzdGF0ZSwgcmVxdWlyZW1lbnRzKSB7CiAgICByZXR1cm4gc3RhdGUucmVxdWlyZW1lbnRzID0gcmVxdWlyZW1lbnRzOwogIH0sCiAgc2V0RHJhZnRCdXNpbmVzczogZnVuY3Rpb24gc2V0RHJhZnRCdXNpbmVzcyhzdGF0ZSwgZHJhZnRCdXNpbmVzcykgewogICAgcmV0dXJuIHN0YXRlLmRyYWZ0QnVzaW5lc3MgPSBkcmFmdEJ1c2luZXNzOwogIH0sCiAgc2V0UGFnZUNvdW50OiBmdW5jdGlvbiBzZXRQYWdlQ291bnQoc3RhdGUsIHBhZ2VDb3VudCkgewogICAgcmV0dXJuIHN0YXRlLnBhZ2VDb3VudCA9IHBhZ2VDb3VudDsKICB9LAogIHNldEZpbHRlckJ5OiBmdW5jdGlvbiBzZXRGaWx0ZXJCeShzdGF0ZSwgZmlsdGVyQnkpIHsKICAgIHJldHVybiBzdGF0ZS5maWx0ZXJCeSA9IGZpbHRlckJ5OwogIH0sCiAgc2V0SXNCdXNpbmVzc0Vucm9sbG1lbnRTdWNjZXNzOiBmdW5jdGlvbiBzZXRJc0J1c2luZXNzRW5yb2xsbWVudFN1Y2Nlc3Moc3RhdGUsIGlzQnVzaW5lc3NFbnJvbGxtZW50U3VjY2VzcykgewogICAgcmV0dXJuIHN0YXRlLmlzQnVzaW5lc3NFbnJvbGxtZW50U3VjY2VzcyA9IGlzQnVzaW5lc3NFbnJvbGxtZW50U3VjY2VzczsKICB9LAogIHNldFR5cGVPZk9yZ2FuaXphdGlvbjogZnVuY3Rpb24gc2V0VHlwZU9mT3JnYW5pemF0aW9uKHN0YXRlLCB0eXBlT2ZPcmdhbml6YXRpb24pIHsKICAgIHJldHVybiBzdGF0ZS50eXBlT2ZPcmdhbml6YXRpb24gPSB0eXBlT2ZPcmdhbml6YXRpb247CiAgfSwKICBzZXRDdXJyZW50QnVzaW5lc3NJZDogZnVuY3Rpb24gc2V0Q3VycmVudEJ1c2luZXNzSWQoc3RhdGUsIGN1cnJlbnRCdXNpbmVzc0lkKSB7CiAgICByZXR1cm4gc3RhdGUuY3VycmVudEJ1c2luZXNzSWQgPSBjdXJyZW50QnVzaW5lc3NJZDsKICB9LAogIHNldEJ1c2luZXNzU2VhcmNoOiBmdW5jdGlvbiBzZXRCdXNpbmVzc1NlYXJjaChzdGF0ZSwgYnVzaW5lc3NTZWFyY2gpIHsKICAgIHJldHVybiBzdGF0ZS5idXNpbmVzc1NlYXJjaCA9IGJ1c2luZXNzU2VhcmNoOwogIH0sCiAgc2V0QnVzaW5lc3NBc3Nlc3NtZW50TWVzc2FnZTogZnVuY3Rpb24gc2V0QnVzaW5lc3NBc3Nlc3NtZW50TWVzc2FnZShzdGF0ZSwgYnVzaW5lc3NBc3Nlc3NtZW50TWVzc2FnZSkgewogICAgcmV0dXJuIHN0YXRlLmJ1c2luZXNzQXNzZXNzbWVudE1lc3NhZ2UgPSBidXNpbmVzc0Fzc2Vzc21lbnRNZXNzYWdlOwogIH0sCiAgc2V0QnVzaW5lc3NBc3Nlc3NtZW50UmVzdWx0OiBmdW5jdGlvbiBzZXRCdXNpbmVzc0Fzc2Vzc21lbnRSZXN1bHQoc3RhdGUsIGJ1c2luZXNzQXNzZXNzbWVudFJlc3VsdCkgewogICAgcmV0dXJuIHN0YXRlLmJ1c2luZXNzQXNzZXNzbWVudFJlc3VsdCA9IGJ1c2luZXNzQXNzZXNzbWVudFJlc3VsdDsKICB9LAogIHNldEJ1c2luZXNzRGVwdENhbkFzc2VzczogZnVuY3Rpb24gc2V0QnVzaW5lc3NEZXB0Q2FuQXNzZXNzKHN0YXRlLCBidXNpbmVzc0RlcHRDYW5Bc3Nlc3MpIHsKICAgIHJldHVybiBzdGF0ZS5idXNpbmVzc0RlcHRDYW5Bc3Nlc3MgPSBidXNpbmVzc0RlcHRDYW5Bc3Nlc3M7CiAgfSwKICBzZXRJc0xhc3RCdXNpbmVzc0RlcHQ6IGZ1bmN0aW9uIHNldElzTGFzdEJ1c2luZXNzRGVwdChzdGF0ZSwgaXNMYXN0QnVzaW5lc3NEZXB0KSB7CiAgICByZXR1cm4gc3RhdGUuaXNMYXN0QnVzaW5lc3NEZXB0ID0gaXNMYXN0QnVzaW5lc3NEZXB0OwogIH0sCiAgc2V0Rm9yQnVzaW5lc3NBc3Nlc3NtZW50TGlzdDogZnVuY3Rpb24gc2V0Rm9yQnVzaW5lc3NBc3Nlc3NtZW50TGlzdChzdGF0ZSwgZm9yQnVzaW5lc3NBc3Nlc3NtZW50TGlzdCkgewogICAgcmV0dXJuIHN0YXRlLmZvckJ1c2luZXNzQXNzZXNzbWVudExpc3QgPSBmb3JCdXNpbmVzc0Fzc2Vzc21lbnRMaXN0OwogIH0sCiAgc2V0QXNzZXNzZWRCdXNpbmVzc0xpc3Q6IGZ1bmN0aW9uIHNldEFzc2Vzc2VkQnVzaW5lc3NMaXN0KHN0YXRlLCBhc3Nlc3NlZEJ1c2luZXNzTGlzdCkgewogICAgcmV0dXJuIHN0YXRlLmFzc2Vzc2VkQnVzaW5lc3NMaXN0ID0gYXNzZXNzZWRCdXNpbmVzc0xpc3Q7CiAgfSwKICBzZXRDdXJyZW50U2VsZWN0ZWRCdXNpbmVzczogZnVuY3Rpb24gc2V0Q3VycmVudFNlbGVjdGVkQnVzaW5lc3Moc3RhdGUsIGN1cnJlbnRTZWxlY3RlZEJ1c2luZXNzKSB7CiAgICByZXR1cm4gc3RhdGUuY3VycmVudFNlbGVjdGVkQnVzaW5lc3MgPSBjdXJyZW50U2VsZWN0ZWRCdXNpbmVzczsKICB9LAogIHNldElzQnVzaW5lc3NBc3Nlc3NtZW50OiBmdW5jdGlvbiBzZXRJc0J1c2luZXNzQXNzZXNzbWVudChzdGF0ZSwgaXNCdXNpbmVzc0Fzc2Vzc21lbnQpIHsKICAgIHJldHVybiBzdGF0ZS5pc0J1c2luZXNzQXNzZXNzbWVudCA9IGlzQnVzaW5lc3NBc3Nlc3NtZW50OwogIH0sCiAgc2V0QXNzZXNzbWVudFBheWxvYWQ6IGZ1bmN0aW9uIHNldEFzc2Vzc21lbnRQYXlsb2FkKHN0YXRlLCBhc3Nlc3NtZW50UGF5bG9hZCkgewogICAgcmV0dXJuIHN0YXRlLmFzc2Vzc21lbnRQYXlsb2FkID0gYXNzZXNzbWVudFBheWxvYWQ7CiAgfSwKICBzZXRBY3Rpdml0eUVycm9yczogZnVuY3Rpb24gc2V0QWN0aXZpdHlFcnJvcnMoc3RhdGUsIGFjdGl2aXR5RXJyb3JzKSB7CiAgICByZXR1cm4gc3RhdGUuYWN0aXZpdHlFcnJvcnMgPSBhY3Rpdml0eUVycm9yczsKICB9LAogIHNldFNob3dBY3Rpb25CdXR0b25zOiBmdW5jdGlvbiBzZXRTaG93QWN0aW9uQnV0dG9ucyhzdGF0ZSwgc2hvd0FjdGlvbkJ1dHRvbnMpIHsKICAgIHJldHVybiBzdGF0ZS5zaG93QWN0aW9uQnV0dG9ucyA9IHNob3dBY3Rpb25CdXR0b25zOwogIH0KfTsKdmFyIGFjdGlvbnMgPSB7CiAgZ2V0QnVzaW5lc3NBcHBsaWNhdGlvbjogZnVuY3Rpb24gZ2V0QnVzaW5lc3NBcHBsaWNhdGlvbihfcmVmLCBwYXlsb2FkKSB7CiAgICByZXR1cm4gX2FzeW5jVG9HZW5lcmF0b3IoIC8qI19fUFVSRV9fKi9yZWdlbmVyYXRvclJ1bnRpbWUubWFyayhmdW5jdGlvbiBfY2FsbGVlKCkgewogICAgICB2YXIgY29tbWl0LCBkaXNwYXRjaCwgZ2V0dGVycywgcmVzcG9uc2UsIGFwcGxpY2F0aW9uOwogICAgICByZXR1cm4gcmVnZW5lcmF0b3JSdW50aW1lLndyYXAoZnVuY3Rpb24gX2NhbGxlZSQoX2NvbnRleHQpIHsKICAgICAgICB3aGlsZSAoMSkgewogICAgICAgICAgc3dpdGNoIChfY29udGV4dC5wcmV2ID0gX2NvbnRleHQubmV4dCkgewogICAgICAgICAgICBjYXNlIDA6CiAgICAgICAgICAgICAgY29tbWl0ID0gX3JlZi5jb21taXQsIGRpc3BhdGNoID0gX3JlZi5kaXNwYXRjaCwgZ2V0dGVycyA9IF9yZWYuZ2V0dGVyczsKICAgICAgICAgICAgICBfY29udGV4dC5wcmV2ID0gMTsKICAgICAgICAgICAgICBfY29udGV4dC5uZXh0ID0gNDsKICAgICAgICAgICAgICByZXR1cm4gYXhpb3MuZ2V0KCIiLmNvbmNhdChiYXNlVXJsLCAiL2FwaS9idXNpbmVzcy1hcHBsaWNhdGlvbj9hcHBsaWNhdGlvbl9udW1iZXI9IikuY29uY2F0KHBheWxvYWQpLCB7CiAgICAgICAgICAgICAgICBoZWFkZXJzOiB7CiAgICAgICAgICAgICAgICAgIEF1dGhvcml6YXRpb246ICJqd3QgIi5jb25jYXQoZ2V0dGVycy5hdXRoVG9rZW4pCiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgfSk7CgogICAgICAgICAgICBjYXNlIDQ6CiAgICAgICAgICAgICAgcmVzcG9uc2UgPSBfY29udGV4dC5zZW50OwogICAgICAgICAgICAgIGFwcGxpY2F0aW9uID0gewogICAgICAgICAgICAgICAgaWQ6IHJlc3BvbnNlLmRhdGEuaWQsCiAgICAgICAgICAgICAgICBjcmVhdGVkX2F0OiByZXNwb25zZS5kYXRhLmNyZWF0ZWRfYXQsCiAgICAgICAgICAgICAgICBpc19kcmFmdDogcmVzcG9uc2UuZGF0YS5pc19kcmFmdCwKICAgICAgICAgICAgICAgIGlzX2FwcHJvdmU6IHJlc3BvbnNlLmRhdGEuaXNfYXBwcm92ZSwKICAgICAgICAgICAgICAgIGlzX2Rpc2FwcHJvdmU6IHJlc3BvbnNlLmRhdGEuaXNfZGlzYXBwcm92ZSwKICAgICAgICAgICAgICAgIGFjY291bnRfbnVtYmVyOiByZXNwb25zZS5kYXRhLmFjY291bnRfbnVtYmVyLAogICAgICAgICAgICAgICAgYXBwbGljYXRpb25fc3RhdHVzOiByZXNwb25zZS5kYXRhLmJ1c2luZXNzX2FwcGxpY2F0aW9uCiAgICAgICAgICAgICAgfTsKICAgICAgICAgICAgICBfY29udGV4dC5uZXh0ID0gODsKICAgICAgICAgICAgICByZXR1cm4gY29tbWl0KCJzZXRCdXNpbmVzc0FwcGxpY2F0aW9uIiwgYXBwbGljYXRpb24pOwoKICAgICAgICAgICAgY2FzZSA4OgogICAgICAgICAgICAgIF9jb250ZXh0Lm5leHQgPSAxMDsKICAgICAgICAgICAgICByZXR1cm4gY29tbWl0KCJzZXRCdXNpbmVzc0Jhc2ljSW5mb3JtYXRpb24iLCByZXNwb25zZS5kYXRhLmJ1c2luZXNzYmFzaWNpbmZvcm1hdGlvbik7CgogICAgICAgICAgICBjYXNlIDEwOgogICAgICAgICAgICAgIF9jb250ZXh0Lm5leHQgPSAxMjsKICAgICAgICAgICAgICByZXR1cm4gY29tbWl0KCJzZXRCdXNpbmVzc0RldGFpbHMiLCByZXNwb25zZS5kYXRhLmJ1c2luZXNzZGV0YWlscyk7CgogICAgICAgICAgICBjYXNlIDEyOgogICAgICAgICAgICAgIF9jb250ZXh0Lm5leHQgPSAxNDsKICAgICAgICAgICAgICByZXR1cm4gY29tbWl0KCJzZXRMZXNzb3JEZXRhaWxzIiwgcmVzcG9uc2UuZGF0YS5sZXNzb3JkZXRhaWxzKTsKCiAgICAgICAgICAgIGNhc2UgMTQ6CiAgICAgICAgICAgICAgX2NvbnRleHQubmV4dCA9IDE2OwogICAgICAgICAgICAgIHJldHVybiBkaXNwYXRjaCgiZ2V0QnVzaW5lc3NBY3Rpdml0eVJlbmV3YWwiLCByZXNwb25zZS5kYXRhLmlkKTsKCiAgICAgICAgICAgIGNhc2UgMTY6CiAgICAgICAgICAgICAgaWYgKCFyZXNwb25zZS5kYXRhLm9uX3JlbmV3YWwpIHsKICAgICAgICAgICAgICAgIF9jb250ZXh0Lm5leHQgPSAyMzsKICAgICAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgX2NvbnRleHQubmV4dCA9IDE5OwogICAgICAgICAgICAgIHJldHVybiBkaXNwYXRjaCgiZ2V0QnVzaW5lc3NSZXF1aXJlbWVudFJlbmV3YWwiLCByZXNwb25zZS5kYXRhLmlkKTsKCiAgICAgICAgICAgIGNhc2UgMTk6CiAgICAgICAgICAgICAgX2NvbnRleHQubmV4dCA9IDIxOwogICAgICAgICAgICAgIHJldHVybiByb3V0ZXIucHVzaCh7CiAgICAgICAgICAgICAgICBuYW1lOiAiQnVzaW5lc3NSZW5ld2FsIgogICAgICAgICAgICAgIH0pOwoKICAgICAgICAgICAgY2FzZSAyMToKICAgICAgICAgICAgICBfY29udGV4dC5uZXh0ID0gMjc7CiAgICAgICAgICAgICAgYnJlYWs7CgogICAgICAgICAgICBjYXNlIDIzOgogICAgICAgICAgICAgIF9jb250ZXh0Lm5leHQgPSAyNTsKICAgICAgICAgICAgICByZXR1cm4gY29tbWl0KCJzZXRBcHBsaWNhdGlvblJlcXVpcmVtZW50cyIsIHJlc3BvbnNlLmRhdGEuYnVzaW5lc3NhcHBsaWNhdGlvbnJlcXVpcmVtZW50c1swXSk7CgogICAgICAgICAgICBjYXNlIDI1OgogICAgICAgICAgICAgIF9jb250ZXh0Lm5leHQgPSAyNzsKICAgICAgICAgICAgICByZXR1cm4gcm91dGVyLnB1c2goewogICAgICAgICAgICAgICAgbmFtZTogIkJ1c2luZXNzUGVybWl0QXBwbGljYXRpb24iCiAgICAgICAgICAgICAgfSk7CgogICAgICAgICAgICBjYXNlIDI3OgogICAgICAgICAgICAgIF9jb250ZXh0Lm5leHQgPSAzMzsKICAgICAgICAgICAgICBicmVhazsKCiAgICAgICAgICAgIGNhc2UgMjk6CiAgICAgICAgICAgICAgX2NvbnRleHQucHJldiA9IDI5OwogICAgICAgICAgICAgIF9jb250ZXh0LnQwID0gX2NvbnRleHRbImNhdGNoIl0oMSk7CiAgICAgICAgICAgICAgY29uc29sZS5sb2coX2NvbnRleHQudDApOwogICAgICAgICAgICAgIGNvbnNvbGUubG9nKF9jb250ZXh0LnQwLnJlc3BvbnNlKTsKCiAgICAgICAgICAgIGNhc2UgMzM6CiAgICAgICAgICAgIGNhc2UgImVuZCI6CiAgICAgICAgICAgICAgcmV0dXJuIF9jb250ZXh0LnN0b3AoKTsKICAgICAgICAgIH0KICAgICAgICB9CiAgICAgIH0sIF9jYWxsZWUsIG51bGwsIFtbMSwgMjldXSk7CiAgICB9KSkoKTsKICB9LAogIGJ1c2luZXNzRW5yb2xsbWVudDogZnVuY3Rpb24gYnVzaW5lc3NFbnJvbGxtZW50KF9yZWYyLCBwYXlsb2FkKSB7CiAgICB2YXIgX3RoaXMgPSB0aGlzOwoKICAgIHJldHVybiBfYXN5bmNUb0dlbmVyYXRvciggLyojX19QVVJFX18qL3JlZ2VuZXJhdG9yUnVudGltZS5tYXJrKGZ1bmN0aW9uIF9jYWxsZWUyKCkgewogICAgICB2YXIgY29tbWl0LCBkaXNwYXRjaCwgZ2V0dGVycywgY29uZmlnLCByZXNwb25zZTsKICAgICAgcmV0dXJuIHJlZ2VuZXJhdG9yUnVudGltZS53cmFwKGZ1bmN0aW9uIF9jYWxsZWUyJChfY29udGV4dDIpIHsKICAgICAgICB3aGlsZSAoMSkgewogICAgICAgICAgc3dpdGNoIChfY29udGV4dDIucHJldiA9IF9jb250ZXh0Mi5uZXh0KSB7CiAgICAgICAgICAgIGNhc2UgMDoKICAgICAgICAgICAgICBjb21taXQgPSBfcmVmMi5jb21taXQsIGRpc3BhdGNoID0gX3JlZjIuZGlzcGF0Y2gsIGdldHRlcnMgPSBfcmVmMi5nZXR0ZXJzOwogICAgICAgICAgICAgIGNvbmZpZyA9IHsKICAgICAgICAgICAgICAgIGhlYWRlcnM6IHsKICAgICAgICAgICAgICAgICAgIk9uZURvYy1Ub2tlbiI6IG9uZURvY1Rva2VuLAogICAgICAgICAgICAgICAgICAiQ29udGVudC1UeXBlIjogImFwcGxpY2F0aW9uL2pzb24iCiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgfTsKICAgICAgICAgICAgICBfY29udGV4dDIubmV4dCA9IDQ7CiAgICAgICAgICAgICAgcmV0dXJuIGF4aW9zLnBvc3QoImh0dHA6Ly8xMjIuNTUuMjAuODU6ODAxMi9sZ3VhcGkvIiwgcGF5bG9hZCwgY29uZmlnKTsKCiAgICAgICAgICAgIGNhc2UgNDoKICAgICAgICAgICAgICByZXNwb25zZSA9IF9jb250ZXh0Mi5zZW50OwoKICAgICAgICAgICAgICBpZiAocmVzcG9uc2UuZGF0YS5SZXNwb25zZS5SZXN1bHQuYnVzaW5lc3NpZCkgewogICAgICAgICAgICAgICAgY29tbWl0KCJzZXRJc0J1c2luZXNzRW5yb2xsbWVudFN1Y2Nlc3MiLCB0cnVlKTsKICAgICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgICAgX3RoaXMuJHN3YWwoewogICAgICAgICAgICAgICAgICB0aXRsZTogIkZhaWxlZCEiLAogICAgICAgICAgICAgICAgICB0ZXh0OiAiTm8gcmVjb3JkIGZvdW5kLiIsCiAgICAgICAgICAgICAgICAgIGljb246ICJlcnJvciIKICAgICAgICAgICAgICAgIH0pOwogICAgICAgICAgICAgIH0KCiAgICAgICAgICAgIGNhc2UgNjoKICAgICAgICAgICAgY2FzZSAiZW5kIjoKICAgICAgICAgICAgICByZXR1cm4gX2NvbnRleHQyLnN0b3AoKTsKICAgICAgICAgIH0KICAgICAgICB9CiAgICAgIH0sIF9jYWxsZWUyKTsKICAgIH0pKSgpOwogIH0sCiAgYXBwcm92ZUJ1c2luZXNzQXBwbGljYXRpb246IGZ1bmN0aW9uIGFwcHJvdmVCdXNpbmVzc0FwcGxpY2F0aW9uKF9yZWYzLCBwYXlsb2FkKSB7CiAgICByZXR1cm4gX2FzeW5jVG9HZW5lcmF0b3IoIC8qI19fUFVSRV9fKi9yZWdlbmVyYXRvclJ1bnRpbWUubWFyayhmdW5jdGlvbiBfY2FsbGVlMygpIHsKICAgICAgdmFyIGNvbW1pdCwgZGlzcGF0Y2gsIGdldHRlcnMsIHJlc3BvbnNlLCBhY3Rpb247CiAgICAgIHJldHVybiByZWdlbmVyYXRvclJ1bnRpbWUud3JhcChmdW5jdGlvbiBfY2FsbGVlMyQoX2NvbnRleHQzKSB7CiAgICAgICAgd2hpbGUgKDEpIHsKICAgICAgICAgIHN3aXRjaCAoX2NvbnRleHQzLnByZXYgPSBfY29udGV4dDMubmV4dCkgewogICAgICAgICAgICBjYXNlIDA6CiAgICAgICAgICAgICAgY29tbWl0ID0gX3JlZjMuY29tbWl0LCBkaXNwYXRjaCA9IF9yZWYzLmRpc3BhdGNoLCBnZXR0ZXJzID0gX3JlZjMuZ2V0dGVyczsKICAgICAgICAgICAgICBfY29udGV4dDMucHJldiA9IDE7CiAgICAgICAgICAgICAgX2NvbnRleHQzLm5leHQgPSA0OwogICAgICAgICAgICAgIHJldHVybiBheGlvcy5wdXQoIiIuY29uY2F0KGJhc2VVcmwsICIvc3RhZmYvYnVzaW5lc3MtcGVybWl0LWFwcGxpY2F0aW9uLyIpLCBwYXlsb2FkLCB7CiAgICAgICAgICAgICAgICBoZWFkZXJzOiB7CiAgICAgICAgICAgICAgICAgIEF1dGhvcml6YXRpb246ICJqd3QgIi5jb25jYXQoZ2V0dGVycy5hdXRoVG9rZW4pCiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgfSk7CgogICAgICAgICAgICBjYXNlIDQ6CiAgICAgICAgICAgICAgcmVzcG9uc2UgPSBfY29udGV4dDMuc2VudDsKICAgICAgICAgICAgICBhY3Rpb24gPSBwYXlsb2FkLnN0YXR1cyA9PSAxID8gImluY29tcGxldGUiIDogcGF5bG9hZC5zdGF0dXMgPT0gMiA/ICJmb3IgYXNzZXNzbWVudCIgOiBwYXlsb2FkLnN0YXR1cyA9PSAzID8gImZvciBjb21wbGlhbmNlIiA6IHBheWxvYWQuc3RhdHVzID09IDQgPyAiZm9yIHBheW1lbnQiIDogIiI7CiAgICAgICAgICAgICAgZGlzcGF0Y2goImNyZWF0ZVByb21wdCIsIHsKICAgICAgICAgICAgICAgIHR5cGU6ICJzdWNjZXNzIiwKICAgICAgICAgICAgICAgIHRpdGxlOiAiU3VjY2VzcyEiLAogICAgICAgICAgICAgICAgbWVzc2FnZTogIkFwcGxpY2F0aW9uIHdhcyBzdWNjZXNzZnVsbHkgc2V0IHRvICIuY29uY2F0KGFjdGlvbiwgIiEiKQogICAgICAgICAgICAgIH0pOwogICAgICAgICAgICAgIHJvdXRlci5wdXNoKHsKICAgICAgICAgICAgICAgIG5hbWU6ICJBcHBsaWNhdGlvbnMiCiAgICAgICAgICAgICAgfSk7CiAgICAgICAgICAgICAgX2NvbnRleHQzLm5leHQgPSAxNDsKICAgICAgICAgICAgICBicmVhazsKCiAgICAgICAgICAgIGNhc2UgMTA6CiAgICAgICAgICAgICAgX2NvbnRleHQzLnByZXYgPSAxMDsKICAgICAgICAgICAgICBfY29udGV4dDMudDAgPSBfY29udGV4dDNbImNhdGNoIl0oMSk7CiAgICAgICAgICAgICAgY29uc29sZS5sb2coX2NvbnRleHQzLnQwKTsKICAgICAgICAgICAgICBjb21taXQoInNldExvYWRpbmciLCBmYWxzZSk7CgogICAgICAgICAgICBjYXNlIDE0OgogICAgICAgICAgICBjYXNlICJlbmQiOgogICAgICAgICAgICAgIHJldHVybiBfY29udGV4dDMuc3RvcCgpOwogICAgICAgICAgfQogICAgICAgIH0KICAgICAgfSwgX2NhbGxlZTMsIG51bGwsIFtbMSwgMTBdXSk7CiAgICB9KSkoKTsKICB9LAogIGdldEFsbEJ1c2luZXNzQXBwbGljYXRpb25zOiBmdW5jdGlvbiBnZXRBbGxCdXNpbmVzc0FwcGxpY2F0aW9ucyhfcmVmNCkgewogICAgdmFyIF9hcmd1bWVudHMgPSBhcmd1bWVudHM7CiAgICByZXR1cm4gX2FzeW5jVG9HZW5lcmF0b3IoIC8qI19fUFVSRV9fKi9yZWdlbmVyYXRvclJ1bnRpbWUubWFyayhmdW5jdGlvbiBfY2FsbGVlNCgpIHsKICAgICAgdmFyIGNvbW1pdCwgZGlzcGF0Y2gsIGdldHRlcnMsIHBhZ2UsIHJlc3BvbnNlOwogICAgICByZXR1cm4gcmVnZW5lcmF0b3JSdW50aW1lLndyYXAoZnVuY3Rpb24gX2NhbGxlZTQkKF9jb250ZXh0NCkgewogICAgICAgIHdoaWxlICgxKSB7CiAgICAgICAgICBzd2l0Y2ggKF9jb250ZXh0NC5wcmV2ID0gX2NvbnRleHQ0Lm5leHQpIHsKICAgICAgICAgICAgY2FzZSAwOgogICAgICAgICAgICAgIGNvbW1pdCA9IF9yZWY0LmNvbW1pdCwgZGlzcGF0Y2ggPSBfcmVmNC5kaXNwYXRjaCwgZ2V0dGVycyA9IF9yZWY0LmdldHRlcnM7CiAgICAgICAgICAgICAgcGFnZSA9IF9hcmd1bWVudHMubGVuZ3RoID4gMSAmJiBfYXJndW1lbnRzWzFdICE9PSB1bmRlZmluZWQgPyBfYXJndW1lbnRzWzFdIDogMTsKICAgICAgICAgICAgICBfY29udGV4dDQucHJldiA9IDI7CiAgICAgICAgICAgICAgX2NvbnRleHQ0Lm5leHQgPSA1OwogICAgICAgICAgICAgIHJldHVybiBheGlvcy5nZXQoIiIuY29uY2F0KGJhc2VVcmwsICIvc3RhZmYvYnVzaW5lc3MtcGVybWl0LWFwcGxpY2F0aW9uLWxpc3QvP3BhZ2U9IikuY29uY2F0KHBhZ2UsICImZmlsdGVyX2J5PSIpLmNvbmNhdChnZXR0ZXJzLmZpbHRlckJ5LCAiJmlkPSIpLmNvbmNhdChnZXR0ZXJzLmJ1c2luZXNzU2VhcmNoKSwgewogICAgICAgICAgICAgICAgaGVhZGVyczogewogICAgICAgICAgICAgICAgICBBdXRob3JpemF0aW9uOiAiand0ICIuY29uY2F0KGdldHRlcnMuYXV0aFRva2VuKQogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgIH0pOwoKICAgICAgICAgICAgY2FzZSA1OgogICAgICAgICAgICAgIHJlc3BvbnNlID0gX2NvbnRleHQ0LnNlbnQ7CiAgICAgICAgICAgICAgX2NvbnRleHQ0Lm5leHQgPSA4OwogICAgICAgICAgICAgIHJldHVybiBjb21taXQoInNldFBhZ2VDb3VudCIsIHJlc3BvbnNlLmRhdGEudG90YWxfcGFnZXMpOwoKICAgICAgICAgICAgY2FzZSA4OgogICAgICAgICAgICAgIF9jb250ZXh0NC5uZXh0ID0gMTA7CiAgICAgICAgICAgICAgcmV0dXJuIGNvbW1pdCgic2V0QXBwbGljYXRpb25zIiwgcmVzcG9uc2UuZGF0YS5yZXN1bHRzKTsKCiAgICAgICAgICAgIGNhc2UgMTA6CiAgICAgICAgICAgICAgX2NvbnRleHQ0Lm5leHQgPSAxNjsKICAgICAgICAgICAgICBicmVhazsKCiAgICAgICAgICAgIGNhc2UgMTI6CiAgICAgICAgICAgICAgX2NvbnRleHQ0LnByZXYgPSAxMjsKICAgICAgICAgICAgICBfY29udGV4dDQudDAgPSBfY29udGV4dDRbImNhdGNoIl0oMik7CiAgICAgICAgICAgICAgY29uc29sZS5sb2coX2NvbnRleHQ0LnQwLnJlc3BvbnNlKTsKICAgICAgICAgICAgICBjb21taXQoInNldExvYWRpbmciLCBmYWxzZSk7CgogICAgICAgICAgICBjYXNlIDE2OgogICAgICAgICAgICBjYXNlICJlbmQiOgogICAgICAgICAgICAgIHJldHVybiBfY29udGV4dDQuc3RvcCgpOwogICAgICAgICAgfQogICAgICAgIH0KICAgICAgfSwgX2NhbGxlZTQsIG51bGwsIFtbMiwgMTJdXSk7CiAgICB9KSkoKTsKICB9LAogIGdldEJ1c2luZXNzQXBwbGljYXRpb25zOiBmdW5jdGlvbiBnZXRCdXNpbmVzc0FwcGxpY2F0aW9ucyhfcmVmNSkgewogICAgdmFyIF9hcmd1bWVudHMyID0gYXJndW1lbnRzOwogICAgcmV0dXJuIF9hc3luY1RvR2VuZXJhdG9yKCAvKiNfX1BVUkVfXyovcmVnZW5lcmF0b3JSdW50aW1lLm1hcmsoZnVuY3Rpb24gX2NhbGxlZTUoKSB7CiAgICAgIHZhciBjb21taXQsIGRpc3BhdGNoLCBnZXR0ZXJzLCBwYWdlLCByZXNwb25zZTsKICAgICAgcmV0dXJuIHJlZ2VuZXJhdG9yUnVudGltZS53cmFwKGZ1bmN0aW9uIF9jYWxsZWU1JChfY29udGV4dDUpIHsKICAgICAgICB3aGlsZSAoMSkgewogICAgICAgICAgc3dpdGNoIChfY29udGV4dDUucHJldiA9IF9jb250ZXh0NS5uZXh0KSB7CiAgICAgICAgICAgIGNhc2UgMDoKICAgICAgICAgICAgICBjb21taXQgPSBfcmVmNS5jb21taXQsIGRpc3BhdGNoID0gX3JlZjUuZGlzcGF0Y2gsIGdldHRlcnMgPSBfcmVmNS5nZXR0ZXJzOwogICAgICAgICAgICAgIHBhZ2UgPSBfYXJndW1lbnRzMi5sZW5ndGggPiAxICYmIF9hcmd1bWVudHMyWzFdICE9PSB1bmRlZmluZWQgPyBfYXJndW1lbnRzMlsxXSA6IDE7CiAgICAgICAgICAgICAgX2NvbnRleHQ1LnByZXYgPSAyOwogICAgICAgICAgICAgIF9jb250ZXh0NS5uZXh0ID0gNTsKICAgICAgICAgICAgICByZXR1cm4gYXhpb3MuZ2V0KCIiLmNvbmNhdChiYXNlVXJsLCAiL2FwaS91c2VyLWJ1c2luZXNzLWFwcGxpY2F0aW9uLWxpc3QvP3BhZ2U9IikuY29uY2F0KHBhZ2UpLCB7CiAgICAgICAgICAgICAgICBoZWFkZXJzOiB7CiAgICAgICAgICAgICAgICAgIEF1dGhvcml6YXRpb246ICJqd3QgIi5jb25jYXQoZ2V0dGVycy5hdXRoVG9rZW4pCiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgfSk7CgogICAgICAgICAgICBjYXNlIDU6CiAgICAgICAgICAgICAgcmVzcG9uc2UgPSBfY29udGV4dDUuc2VudDsKICAgICAgICAgICAgICBfY29udGV4dDUubmV4dCA9IDg7CiAgICAgICAgICAgICAgcmV0dXJuIGNvbW1pdCgic2V0QXBwbGljYXRpb25zIiwgcmVzcG9uc2UuZGF0YS5yZXN1bHRzKTsKCiAgICAgICAgICAgIGNhc2UgODoKICAgICAgICAgICAgICBfY29udGV4dDUubmV4dCA9IDEwOwogICAgICAgICAgICAgIHJldHVybiBjb21taXQoInNldFBhZ2VDb3VudCIsIHJlc3BvbnNlLmRhdGEudG90YWxfcGFnZXMpOwoKICAgICAgICAgICAgY2FzZSAxMDoKICAgICAgICAgICAgICBfY29udGV4dDUubmV4dCA9IDE3OwogICAgICAgICAgICAgIGJyZWFrOwoKICAgICAgICAgICAgY2FzZSAxMjoKICAgICAgICAgICAgICBfY29udGV4dDUucHJldiA9IDEyOwogICAgICAgICAgICAgIF9jb250ZXh0NS50MCA9IF9jb250ZXh0NVsiY2F0Y2giXSgyKTsKICAgICAgICAgICAgICBjb25zb2xlLmxvZyhfY29udGV4dDUudDAucmVzcG9uc2UpOwogICAgICAgICAgICAgIF9jb250ZXh0NS5uZXh0ID0gMTc7CiAgICAgICAgICAgICAgcmV0dXJuIGNvbW1pdCgic2V0TG9hZGluZyIsIGZhbHNlKTsKCiAgICAgICAgICAgIGNhc2UgMTc6CiAgICAgICAgICAgIGNhc2UgImVuZCI6CiAgICAgICAgICAgICAgcmV0dXJuIF9jb250ZXh0NS5zdG9wKCk7CiAgICAgICAgICB9CiAgICAgICAgfQogICAgICB9LCBfY2FsbGVlNSwgbnVsbCwgW1syLCAxMl1dKTsKICAgIH0pKSgpOwogIH0sCiAgZ2V0QnVzaW5lc3NQcm9maWxlczogZnVuY3Rpb24gZ2V0QnVzaW5lc3NQcm9maWxlcyhfcmVmNikgewogICAgcmV0dXJuIF9hc3luY1RvR2VuZXJhdG9yKCAvKiNfX1BVUkVfXyovcmVnZW5lcmF0b3JSdW50aW1lLm1hcmsoZnVuY3Rpb24gX2NhbGxlZTYoKSB7CiAgICAgIHZhciBjb21taXQsIGRpc3BhdGNoLCBnZXR0ZXJzLCByZXNwb25zZTsKICAgICAgcmV0dXJuIHJlZ2VuZXJhdG9yUnVudGltZS53cmFwKGZ1bmN0aW9uIF9jYWxsZWU2JChfY29udGV4dDYpIHsKICAgICAgICB3aGlsZSAoMSkgewogICAgICAgICAgc3dpdGNoIChfY29udGV4dDYucHJldiA9IF9jb250ZXh0Ni5uZXh0KSB7CiAgICAgICAgICAgIGNhc2UgMDoKICAgICAgICAgICAgICBjb21taXQgPSBfcmVmNi5jb21taXQsIGRpc3BhdGNoID0gX3JlZjYuZGlzcGF0Y2gsIGdldHRlcnMgPSBfcmVmNi5nZXR0ZXJzOwogICAgICAgICAgICAgIF9jb250ZXh0Ni5wcmV2ID0gMTsKICAgICAgICAgICAgICBfY29udGV4dDYubmV4dCA9IDQ7CiAgICAgICAgICAgICAgcmV0dXJuIGF4aW9zLmdldCgiIi5jb25jYXQoYmFzZVVybCwgIi9hcGkvYnVzaW5lc3MtcHJvZmlsZS8iKSwgewogICAgICAgICAgICAgICAgaGVhZGVyczogewogICAgICAgICAgICAgICAgICBBdXRob3JpemF0aW9uOiAiand0ICIuY29uY2F0KGdldHRlcnMuYXV0aFRva2VuKQogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgIH0pOwoKICAgICAgICAgICAgY2FzZSA0OgogICAgICAgICAgICAgIHJlc3BvbnNlID0gX2NvbnRleHQ2LnNlbnQ7CiAgICAgICAgICAgICAgY29tbWl0KCJzZXRCdXNpbmVzc1Byb2ZpbGVzIiwgcmVzcG9uc2UuZGF0YSk7CiAgICAgICAgICAgICAgX2NvbnRleHQ2Lm5leHQgPSAxMjsKICAgICAgICAgICAgICBicmVhazsKCiAgICAgICAgICAgIGNhc2UgODoKICAgICAgICAgICAgICBfY29udGV4dDYucHJldiA9IDg7CiAgICAgICAgICAgICAgX2NvbnRleHQ2LnQwID0gX2NvbnRleHQ2WyJjYXRjaCJdKDEpOwogICAgICAgICAgICAgIGNvbnNvbGUubG9nKF9jb250ZXh0Ni50MC5yZXNwb25zZSk7CiAgICAgICAgICAgICAgY29tbWl0KCJzZXRMb2FkaW5nIiwgZmFsc2UpOwoKICAgICAgICAgICAgY2FzZSAxMjoKICAgICAgICAgICAgY2FzZSAiZW5kIjoKICAgICAgICAgICAgICByZXR1cm4gX2NvbnRleHQ2LnN0b3AoKTsKICAgICAgICAgIH0KICAgICAgICB9CiAgICAgIH0sIF9jYWxsZWU2LCBudWxsLCBbWzEsIDhdXSk7CiAgICB9KSkoKTsKICB9LAogIGFkZEJ1c2luZXNzQXBwbGljYXRpb246IGZ1bmN0aW9uIGFkZEJ1c2luZXNzQXBwbGljYXRpb24oX3JlZjcsIHBheWxvYWQpIHsKICAgIHJldHVybiBfYXN5bmNUb0dlbmVyYXRvciggLyojX19QVVJFX18qL3JlZ2VuZXJhdG9yUnVudGltZS5tYXJrKGZ1bmN0aW9uIF9jYWxsZWU3KCkgewogICAgICB2YXIgY29tbWl0LCBkaXNwYXRjaCwgZ2V0dGVycywgcmVzcG9uc2UsIGVycm9ycywgX2Vycm9yczsKCiAgICAgIHJldHVybiByZWdlbmVyYXRvclJ1bnRpbWUud3JhcChmdW5jdGlvbiBfY2FsbGVlNyQoX2NvbnRleHQ3KSB7CiAgICAgICAgd2hpbGUgKDEpIHsKICAgICAgICAgIHN3aXRjaCAoX2NvbnRleHQ3LnByZXYgPSBfY29udGV4dDcubmV4dCkgewogICAgICAgICAgICBjYXNlIDA6CiAgICAgICAgICAgICAgY29tbWl0ID0gX3JlZjcuY29tbWl0LCBkaXNwYXRjaCA9IF9yZWY3LmRpc3BhdGNoLCBnZXR0ZXJzID0gX3JlZjcuZ2V0dGVyczsKICAgICAgICAgICAgICBfY29udGV4dDcucHJldiA9IDE7CiAgICAgICAgICAgICAgX2NvbnRleHQ3Lm5leHQgPSA0OwogICAgICAgICAgICAgIHJldHVybiBheGlvcy5wb3N0KCIiLmNvbmNhdChiYXNlVXJsLCAiL2FwaS9idXNpbmVzcy1wZXJtaXQtYXBwbGljYXRpb24vIiksIHBheWxvYWQsIHsKICAgICAgICAgICAgICAgIGhlYWRlcnM6IHsKICAgICAgICAgICAgICAgICAgQXV0aG9yaXphdGlvbjogImp3dCAiLmNvbmNhdChnZXR0ZXJzLmF1dGhUb2tlbikKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICB9KTsKCiAgICAgICAgICAgIGNhc2UgNDoKICAgICAgICAgICAgICByZXNwb25zZSA9IF9jb250ZXh0Ny5zZW50OwogICAgICAgICAgICAgIGNvbW1pdCgic2V0QXBwbGljYXRpb25IYXNFcnJvciIsIGZhbHNlKTsKICAgICAgICAgICAgICBjb21taXQoInNldEJ1c2luZXNzQXBwbGljYXRpb24iLCByZXNwb25zZS5kYXRhKTsKICAgICAgICAgICAgICBlcnJvcnMgPSB7CiAgICAgICAgICAgICAgICBrZXk6ICJhcHBsaWNhdGlvbiIsCiAgICAgICAgICAgICAgICB2YWx1ZToge30KICAgICAgICAgICAgICB9OwogICAgICAgICAgICAgIGNvbW1pdCgic2V0U3RlcE9uZUVycm9ycyIsIGVycm9ycyk7CiAgICAgICAgICAgICAgX2NvbnRleHQ3Lm5leHQgPSAxODsKICAgICAgICAgICAgICBicmVhazsKCiAgICAgICAgICAgIGNhc2UgMTE6CiAgICAgICAgICAgICAgX2NvbnRleHQ3LnByZXYgPSAxMTsKICAgICAgICAgICAgICBfY29udGV4dDcudDAgPSBfY29udGV4dDdbImNhdGNoIl0oMSk7CiAgICAgICAgICAgICAgY29tbWl0KCJzZXRBcHBsaWNhdGlvbkhhc0Vycm9yIiwgdHJ1ZSk7CiAgICAgICAgICAgICAgX2Vycm9ycyA9IHsKICAgICAgICAgICAgICAgIGtleTogImFwcGxpY2F0aW9uIiwKICAgICAgICAgICAgICAgIHZhbHVlOiBfY29udGV4dDcudDAucmVzcG9uc2UuZGF0YQogICAgICAgICAgICAgIH07CiAgICAgICAgICAgICAgY29tbWl0KCJzZXRTdGVwT25lRXJyb3JzIiwgX2Vycm9ycyk7CiAgICAgICAgICAgICAgY29uc29sZS5sb2coX2NvbnRleHQ3LnQwLnJlc3BvbnNlKTsKICAgICAgICAgICAgICBjb21taXQoInNldExvYWRpbmciLCBmYWxzZSk7CgogICAgICAgICAgICBjYXNlIDE4OgogICAgICAgICAgICBjYXNlICJlbmQiOgogICAgICAgICAgICAgIHJldHVybiBfY29udGV4dDcuc3RvcCgpOwogICAgICAgICAgfQogICAgICAgIH0KICAgICAgfSwgX2NhbGxlZTcsIG51bGwsIFtbMSwgMTFdXSk7CiAgICB9KSkoKTsKICB9LAogIGFkZEJ1c2luZXNzQmFzaWNJbmZvcm1hdGlvbjogZnVuY3Rpb24gYWRkQnVzaW5lc3NCYXNpY0luZm9ybWF0aW9uKF9yZWY4LCBwYXlsb2FkKSB7CiAgICByZXR1cm4gX2FzeW5jVG9HZW5lcmF0b3IoIC8qI19fUFVSRV9fKi9yZWdlbmVyYXRvclJ1bnRpbWUubWFyayhmdW5jdGlvbiBfY2FsbGVlOCgpIHsKICAgICAgdmFyIGNvbW1pdCwgZ2V0dGVycywgcmVzcG9uc2UsIGVycm9ycywgX2Vycm9yczI7CgogICAgICByZXR1cm4gcmVnZW5lcmF0b3JSdW50aW1lLndyYXAoZnVuY3Rpb24gX2NhbGxlZTgkKF9jb250ZXh0OCkgewogICAgICAgIHdoaWxlICgxKSB7CiAgICAgICAgICBzd2l0Y2ggKF9jb250ZXh0OC5wcmV2ID0gX2NvbnRleHQ4Lm5leHQpIHsKICAgICAgICAgICAgY2FzZSAwOgogICAgICAgICAgICAgIGNvbW1pdCA9IF9yZWY4LmNvbW1pdCwgZ2V0dGVycyA9IF9yZWY4LmdldHRlcnM7CiAgICAgICAgICAgICAgX2NvbnRleHQ4LnByZXYgPSAxOwogICAgICAgICAgICAgIHBheWxvYWQuYXBwbGljYXRpb25fbnVtYmVyID0gZ2V0dGVycy5idXNpbmVzc0FwcGxpY2F0aW9uLmlkOwogICAgICAgICAgICAgIF9jb250ZXh0OC5uZXh0ID0gNTsKICAgICAgICAgICAgICByZXR1cm4gYXhpb3MucG9zdCgiIi5jb25jYXQoYmFzZVVybCwgIi9hcGkvYnVzaW5lc3MtYmFzaWMtaW5mb3JtYXRpb24vIiksIHBheWxvYWQsIHsKICAgICAgICAgICAgICAgIGhlYWRlcnM6IHsKICAgICAgICAgICAgICAgICAgQXV0aG9yaXphdGlvbjogImp3dCAiLmNvbmNhdChnZXR0ZXJzLmF1dGhUb2tlbikKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICB9KTsKCiAgICAgICAgICAgIGNhc2UgNToKICAgICAgICAgICAgICByZXNwb25zZSA9IF9jb250ZXh0OC5zZW50OwogICAgICAgICAgICAgIGNvbW1pdCgic2V0QmFzaWNJbmZvSGFzRXJyb3IiLCBmYWxzZSk7CiAgICAgICAgICAgICAgY29tbWl0KCJzZXRCdXNpbmVzc0Jhc2ljSW5mb3JtYXRpb24iLCByZXNwb25zZS5kYXRhKTsKICAgICAgICAgICAgICBlcnJvcnMgPSB7CiAgICAgICAgICAgICAgICBrZXk6ICJiYXNpY19pbmZvcm1hdGlvbiIsCiAgICAgICAgICAgICAgICB2YWx1ZToge30KICAgICAgICAgICAgICB9OwogICAgICAgICAgICAgIGNvbW1pdCgic2V0U3RlcE9uZUVycm9ycyIsIGVycm9ycyk7CiAgICAgICAgICAgICAgX2NvbnRleHQ4Lm5leHQgPSAxOTsKICAgICAgICAgICAgICBicmVhazsKCiAgICAgICAgICAgIGNhc2UgMTI6CiAgICAgICAgICAgICAgX2NvbnRleHQ4LnByZXYgPSAxMjsKICAgICAgICAgICAgICBfY29udGV4dDgudDAgPSBfY29udGV4dDhbImNhdGNoIl0oMSk7CiAgICAgICAgICAgICAgY29uc29sZS5sb2coX2NvbnRleHQ4LnQwLnJlc3BvbnNlKTsKICAgICAgICAgICAgICBfZXJyb3JzMiA9IHsKICAgICAgICAgICAgICAgIGtleTogImJhc2ljX2luZm9ybWF0aW9uIiwKICAgICAgICAgICAgICAgIHZhbHVlOiBfY29udGV4dDgudDAucmVzcG9uc2UuZGF0YQogICAgICAgICAgICAgIH07CiAgICAgICAgICAgICAgY29tbWl0KCJzZXRTdGVwT25lRXJyb3JzIiwgX2Vycm9yczIpOwogICAgICAgICAgICAgIGNvbW1pdCgic2V0QmFzaWNJbmZvSGFzRXJyb3IiLCB0cnVlKTsKICAgICAgICAgICAgICBjb21taXQoInNldExvYWRpbmciLCBmYWxzZSk7CgogICAgICAgICAgICBjYXNlIDE5OgogICAgICAgICAgICBjYXNlICJlbmQiOgogICAgICAgICAgICAgIHJldHVybiBfY29udGV4dDguc3RvcCgpOwogICAgICAgICAgfQogICAgICAgIH0KICAgICAgfSwgX2NhbGxlZTgsIG51bGwsIFtbMSwgMTJdXSk7CiAgICB9KSkoKTsKICB9LAogIGFkZEJ1c2luZXNzRGV0YWlsczogZnVuY3Rpb24gYWRkQnVzaW5lc3NEZXRhaWxzKF9yZWY5LCBwYXlsb2FkKSB7CiAgICByZXR1cm4gX2FzeW5jVG9HZW5lcmF0b3IoIC8qI19fUFVSRV9fKi9yZWdlbmVyYXRvclJ1bnRpbWUubWFyayhmdW5jdGlvbiBfY2FsbGVlOSgpIHsKICAgICAgdmFyIGNvbW1pdCwgZ2V0dGVycywgcmVzcG9uc2UsIGVycm9ycywgX2Vycm9yczM7CgogICAgICByZXR1cm4gcmVnZW5lcmF0b3JSdW50aW1lLndyYXAoZnVuY3Rpb24gX2NhbGxlZTkkKF9jb250ZXh0OSkgewogICAgICAgIHdoaWxlICgxKSB7CiAgICAgICAgICBzd2l0Y2ggKF9jb250ZXh0OS5wcmV2ID0gX2NvbnRleHQ5Lm5leHQpIHsKICAgICAgICAgICAgY2FzZSAwOgogICAgICAgICAgICAgIGNvbW1pdCA9IF9yZWY5LmNvbW1pdCwgZ2V0dGVycyA9IF9yZWY5LmdldHRlcnM7CiAgICAgICAgICAgICAgX2NvbnRleHQ5LnByZXYgPSAxOwogICAgICAgICAgICAgIHBheWxvYWQuYXBwbGljYXRpb25fbnVtYmVyID0gZ2V0dGVycy5idXNpbmVzc0FwcGxpY2F0aW9uLmlkOwogICAgICAgICAgICAgIF9jb250ZXh0OS5uZXh0ID0gNTsKICAgICAgICAgICAgICByZXR1cm4gYXhpb3MucG9zdCgiIi5jb25jYXQoYmFzZVVybCwgIi9hcGkvYnVzaW5lc3MtZGV0YWlscy8iKSwgcGF5bG9hZCwgewogICAgICAgICAgICAgICAgaGVhZGVyczogewogICAgICAgICAgICAgICAgICBBdXRob3JpemF0aW9uOiAiand0ICIuY29uY2F0KGdldHRlcnMuYXV0aFRva2VuKQogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgIH0pOwoKICAgICAgICAgICAgY2FzZSA1OgogICAgICAgICAgICAgIHJlc3BvbnNlID0gX2NvbnRleHQ5LnNlbnQ7CiAgICAgICAgICAgICAgY29tbWl0KCJzZXREZXRhaWxzSGFzRXJyb3IiLCBmYWxzZSk7CiAgICAgICAgICAgICAgY29tbWl0KCJzZXRCdXNpbmVzc0RldGFpbHMiLCByZXNwb25zZS5kYXRhKTsKICAgICAgICAgICAgICBlcnJvcnMgPSB7CiAgICAgICAgICAgICAgICBrZXk6ICJidXNpbmVzc19kZXRhaWxzIiwKICAgICAgICAgICAgICAgIHZhbHVlOiB7fQogICAgICAgICAgICAgIH07CiAgICAgICAgICAgICAgY29tbWl0KCJzZXRTdGVwVHdvRXJyb3JzIiwgZXJyb3JzKTsKICAgICAgICAgICAgICBfY29udGV4dDkubmV4dCA9IDE5OwogICAgICAgICAgICAgIGJyZWFrOwoKICAgICAgICAgICAgY2FzZSAxMjoKICAgICAgICAgICAgICBfY29udGV4dDkucHJldiA9IDEyOwogICAgICAgICAgICAgIF9jb250ZXh0OS50MCA9IF9jb250ZXh0OVsiY2F0Y2giXSgxKTsKICAgICAgICAgICAgICBfZXJyb3JzMyA9IHsKICAgICAgICAgICAgICAgIGtleTogImJ1c2luZXNzX2RldGFpbHMiLAogICAgICAgICAgICAgICAgdmFsdWU6IF9jb250ZXh0OS50MC5yZXNwb25zZS5kYXRhCiAgICAgICAgICAgICAgfTsKICAgICAgICAgICAgICBjb21taXQoInNldFN0ZXBUd29FcnJvcnMiLCBfZXJyb3JzMyk7CiAgICAgICAgICAgICAgY29uc29sZS5sb2coX2NvbnRleHQ5LnQwLnJlc3BvbnNlKTsKICAgICAgICAgICAgICBjb21taXQoInNldERldGFpbHNIYXNFcnJvciIsIHRydWUpOwogICAgICAgICAgICAgIGNvbW1pdCgic2V0TG9hZGluZyIsIGZhbHNlKTsKCiAgICAgICAgICAgIGNhc2UgMTk6CiAgICAgICAgICAgIGNhc2UgImVuZCI6CiAgICAgICAgICAgICAgcmV0dXJuIF9jb250ZXh0OS5zdG9wKCk7CiAgICAgICAgICB9CiAgICAgICAgfQogICAgICB9LCBfY2FsbGVlOSwgbnVsbCwgW1sxLCAxMl1dKTsKICAgIH0pKSgpOwogIH0sCiAgYWRkTGVzc29yRGV0YWlsczogZnVuY3Rpb24gYWRkTGVzc29yRGV0YWlscyhfcmVmMTAsIHBheWxvYWQpIHsKICAgIHJldHVybiBfYXN5bmNUb0dlbmVyYXRvciggLyojX19QVVJFX18qL3JlZ2VuZXJhdG9yUnVudGltZS5tYXJrKGZ1bmN0aW9uIF9jYWxsZWUxMCgpIHsKICAgICAgdmFyIGNvbW1pdCwgZ2V0dGVycywgcmVzcG9uc2UsIGVycm9ycywgX2Vycm9yczQ7CgogICAgICByZXR1cm4gcmVnZW5lcmF0b3JSdW50aW1lLndyYXAoZnVuY3Rpb24gX2NhbGxlZTEwJChfY29udGV4dDEwKSB7CiAgICAgICAgd2hpbGUgKDEpIHsKICAgICAgICAgIHN3aXRjaCAoX2NvbnRleHQxMC5wcmV2ID0gX2NvbnRleHQxMC5uZXh0KSB7CiAgICAgICAgICAgIGNhc2UgMDoKICAgICAgICAgICAgICBjb21taXQgPSBfcmVmMTAuY29tbWl0LCBnZXR0ZXJzID0gX3JlZjEwLmdldHRlcnM7CiAgICAgICAgICAgICAgX2NvbnRleHQxMC5wcmV2ID0gMTsKICAgICAgICAgICAgICBwYXlsb2FkLmFwcGxpY2F0aW9uX251bWJlciA9IGdldHRlcnMuYnVzaW5lc3NBcHBsaWNhdGlvbi5pZDsKICAgICAgICAgICAgICBfY29udGV4dDEwLm5leHQgPSA1OwogICAgICAgICAgICAgIHJldHVybiBheGlvcy5wb3N0KCIiLmNvbmNhdChiYXNlVXJsLCAiL2FwaS9idXNpbmVzcy1sZXNzb3ItZGV0YWlscy8iKSwgcGF5bG9hZCwgewogICAgICAgICAgICAgICAgaGVhZGVyczogewogICAgICAgICAgICAgICAgICBBdXRob3JpemF0aW9uOiAiand0ICIuY29uY2F0KGdldHRlcnMuYXV0aFRva2VuKQogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgIH0pOwoKICAgICAgICAgICAgY2FzZSA1OgogICAgICAgICAgICAgIHJlc3BvbnNlID0gX2NvbnRleHQxMC5zZW50OwogICAgICAgICAgICAgIGNvbW1pdCgic2V0TGVzc29yRGV0YWlsc0hhc0Vycm9yIiwgZmFsc2UpOwogICAgICAgICAgICAgIGNvbW1pdCgic2V0TGVzc29yRGV0YWlscyIsIHJlc3BvbnNlLmRhdGEpOwogICAgICAgICAgICAgIGVycm9ycyA9IHsKICAgICAgICAgICAgICAgIGtleTogImxlc3Nvcl9kZXRhaWxzIiwKICAgICAgICAgICAgICAgIHZhbHVlOiB7fQogICAgICAgICAgICAgIH07CiAgICAgICAgICAgICAgY29tbWl0KCJzZXRTdGVwVHdvRXJyb3JzIiwgZXJyb3JzKTsKICAgICAgICAgICAgICBfY29udGV4dDEwLm5leHQgPSAxOTsKICAgICAgICAgICAgICBicmVhazsKCiAgICAgICAgICAgIGNhc2UgMTI6CiAgICAgICAgICAgICAgX2NvbnRleHQxMC5wcmV2ID0gMTI7CiAgICAgICAgICAgICAgX2NvbnRleHQxMC50MCA9IF9jb250ZXh0MTBbImNhdGNoIl0oMSk7CiAgICAgICAgICAgICAgX2Vycm9yczQgPSB7CiAgICAgICAgICAgICAgICBrZXk6ICJsZXNzb3JfZGV0YWlscyIsCiAgICAgICAgICAgICAgICB2YWx1ZTogX2NvbnRleHQxMC50MC5yZXNwb25zZS5kYXRhCiAgICAgICAgICAgICAgfTsKICAgICAgICAgICAgICBjb21taXQoInNldFN0ZXBUd29FcnJvcnMiLCBfZXJyb3JzNCk7CiAgICAgICAgICAgICAgY29tbWl0KCJzZXRMZXNzb3JEZXRhaWxzSGFzRXJyb3IiLCB0cnVlKTsKICAgICAgICAgICAgICBjb25zb2xlLmxvZyhfY29udGV4dDEwLnQwLnJlc3BvbnNlKTsKICAgICAgICAgICAgICBjb21taXQoInNldExvYWRpbmciLCBmYWxzZSk7CgogICAgICAgICAgICBjYXNlIDE5OgogICAgICAgICAgICBjYXNlICJlbmQiOgogICAgICAgICAgICAgIHJldHVybiBfY29udGV4dDEwLnN0b3AoKTsKICAgICAgICAgIH0KICAgICAgICB9CiAgICAgIH0sIF9jYWxsZWUxMCwgbnVsbCwgW1sxLCAxMl1dKTsKICAgIH0pKSgpOwogIH0sCiAgYWRkQnVzaW5lc3NBY3Rpdml0eTogZnVuY3Rpb24gYWRkQnVzaW5lc3NBY3Rpdml0eShfcmVmMTEsIHBheWxvYWQpIHsKICAgIHJldHVybiBfYXN5bmNUb0dlbmVyYXRvciggLyojX19QVVJFX18qL3JlZ2VuZXJhdG9yUnVudGltZS5tYXJrKGZ1bmN0aW9uIF9jYWxsZWUxMSgpIHsKICAgICAgdmFyIGNvbW1pdCwgZ2V0dGVycywgZGlzcGF0Y2gsIF9pdGVyYXRvciwgX3N0ZXAsIGl0ZW0sIHJlc3BvbnNlOwoKICAgICAgcmV0dXJuIHJlZ2VuZXJhdG9yUnVudGltZS53cmFwKGZ1bmN0aW9uIF9jYWxsZWUxMSQoX2NvbnRleHQxMSkgewogICAgICAgIHdoaWxlICgxKSB7CiAgICAgICAgICBzd2l0Y2ggKF9jb250ZXh0MTEucHJldiA9IF9jb250ZXh0MTEubmV4dCkgewogICAgICAgICAgICBjYXNlIDA6CiAgICAgICAgICAgICAgY29tbWl0ID0gX3JlZjExLmNvbW1pdCwgZ2V0dGVycyA9IF9yZWYxMS5nZXR0ZXJzLCBkaXNwYXRjaCA9IF9yZWYxMS5kaXNwYXRjaDsKICAgICAgICAgICAgICBfY29udGV4dDExLnByZXYgPSAxOwogICAgICAgICAgICAgIF9pdGVyYXRvciA9IF9jcmVhdGVGb3JPZkl0ZXJhdG9ySGVscGVyKHBheWxvYWQpOwoKICAgICAgICAgICAgICB0cnkgewogICAgICAgICAgICAgICAgZm9yIChfaXRlcmF0b3IucygpOyAhKF9zdGVwID0gX2l0ZXJhdG9yLm4oKSkuZG9uZTspIHsKICAgICAgICAgICAgICAgICAgaXRlbSA9IF9zdGVwLnZhbHVlOwogICAgICAgICAgICAgICAgICBpdGVtLmNhcGl0YWxpemF0aW9uID0gaXRlbS5jYXBpdGFsaXphdGlvbi50b1N0cmluZygpLnJlcGxhY2UoLywvZywgIiIpOwogICAgICAgICAgICAgICAgICBpdGVtLmNhcGl0YWxpemF0aW9uID0gaXRlbS5jYXBpdGFsaXphdGlvbi5zcGxpdCgiLiIpWzBdOwogICAgICAgICAgICAgICAgICBpdGVtLnVuaXRzID09PSAiIiA/IGl0ZW0udW5pdHMgPSAxIDogaXRlbS51bml0cyA9IGl0ZW0udW5pdHM7CgogICAgICAgICAgICAgICAgICBpZiAoaXRlbS5hcHBsaWNhdGlvbl9udW1iZXIgPT0gIiIgfHwgaXRlbS5hcHBsaWNhdGlvbl9udW1iZXIgPT0gbnVsbCB8fCBpdGVtLmFwcGxpY2F0aW9uX251bWJlciA9PSB1bmRlZmluZWQpIHsKICAgICAgICAgICAgICAgICAgICBpdGVtLmFwcGxpY2F0aW9uX251bWJlciA9IGdldHRlcnMuYnVzaW5lc3NBcHBsaWNhdGlvbi5pZDsKICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgIH0gY2F0Y2ggKGVycikgewogICAgICAgICAgICAgICAgX2l0ZXJhdG9yLmUoZXJyKTsKICAgICAgICAgICAgICB9IGZpbmFsbHkgewogICAgICAgICAgICAgICAgX2l0ZXJhdG9yLmYoKTsKICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgIF9jb250ZXh0MTEubmV4dCA9IDY7CiAgICAgICAgICAgICAgcmV0dXJuIGF4aW9zLnBvc3QoIiIuY29uY2F0KGJhc2VVcmwsICIvYXBpL2J1c2luZXNzLWFjdGl2aXR5LyIpLCBwYXlsb2FkLCB7CiAgICAgICAgICAgICAgICBoZWFkZXJzOiB7CiAgICAgICAgICAgICAgICAgIEF1dGhvcml6YXRpb246ICJqd3QgIi5jb25jYXQoZ2V0dGVycy5hdXRoVG9rZW4pCiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgfSk7CgogICAgICAgICAgICBjYXNlIDY6CiAgICAgICAgICAgICAgcmVzcG9uc2UgPSBfY29udGV4dDExLnNlbnQ7CiAgICAgICAgICAgICAgX2NvbnRleHQxMS5uZXh0ID0gOTsKICAgICAgICAgICAgICByZXR1cm4gZGlzcGF0Y2goImdldEJ1c2luZXNzQWN0aXZpdHkiKTsKCiAgICAgICAgICAgIGNhc2UgOToKICAgICAgICAgICAgICBfY29udGV4dDExLm5leHQgPSAxNTsKICAgICAgICAgICAgICBicmVhazsKCiAgICAgICAgICAgIGNhc2UgMTE6CiAgICAgICAgICAgICAgX2NvbnRleHQxMS5wcmV2ID0gMTE7CiAgICAgICAgICAgICAgX2NvbnRleHQxMS50MCA9IF9jb250ZXh0MTFbImNhdGNoIl0oMSk7CiAgICAgICAgICAgICAgX2NvbnRleHQxMS50MC5yZXNwb25zZSA/IGNvbnNvbGUubG9nKF9jb250ZXh0MTEudDAucmVzcG9uc2UpIDogY29uc29sZS5sb2coX2NvbnRleHQxMS50MCk7CiAgICAgICAgICAgICAgY29tbWl0KCJzZXRMb2FkaW5nIiwgZmFsc2UpOwoKICAgICAgICAgICAgY2FzZSAxNToKICAgICAgICAgICAgY2FzZSAiZW5kIjoKICAgICAgICAgICAgICByZXR1cm4gX2NvbnRleHQxMS5zdG9wKCk7CiAgICAgICAgICB9CiAgICAgICAgfQogICAgICB9LCBfY2FsbGVlMTEsIG51bGwsIFtbMSwgMTFdXSk7CiAgICB9KSkoKTsKICB9LAogIGFkZFJlbmV3QnVzaW5lc3NBY3Rpdml0eTogZnVuY3Rpb24gYWRkUmVuZXdCdXNpbmVzc0FjdGl2aXR5KF9yZWYxMiwgcGF5bG9hZCkgewogICAgcmV0dXJuIF9hc3luY1RvR2VuZXJhdG9yKCAvKiNfX1BVUkVfXyovcmVnZW5lcmF0b3JSdW50aW1lLm1hcmsoZnVuY3Rpb24gX2NhbGxlZTEyKCkgewogICAgICB2YXIgY29tbWl0LCBnZXR0ZXJzLCBkaXNwYXRjaCwgcmVzcG9uc2U7CiAgICAgIHJldHVybiByZWdlbmVyYXRvclJ1bnRpbWUud3JhcChmdW5jdGlvbiBfY2FsbGVlMTIkKF9jb250ZXh0MTIpIHsKICAgICAgICB3aGlsZSAoMSkgewogICAgICAgICAgc3dpdGNoIChfY29udGV4dDEyLnByZXYgPSBfY29udGV4dDEyLm5leHQpIHsKICAgICAgICAgICAgY2FzZSAwOgogICAgICAgICAgICAgIGNvbW1pdCA9IF9yZWYxMi5jb21taXQsIGdldHRlcnMgPSBfcmVmMTIuZ2V0dGVycywgZGlzcGF0Y2ggPSBfcmVmMTIuZGlzcGF0Y2g7CiAgICAgICAgICAgICAgX2NvbnRleHQxMi5wcmV2ID0gMTsKICAgICAgICAgICAgICBfY29udGV4dDEyLm5leHQgPSA0OwogICAgICAgICAgICAgIHJldHVybiBheGlvcy5wb3N0KCIiLmNvbmNhdChiYXNlVXJsLCAiL2FwaS9idXNpbmVzcy1hY3Rpdml0eS8iKSwgcGF5bG9hZCwgewogICAgICAgICAgICAgICAgaGVhZGVyczogewogICAgICAgICAgICAgICAgICBBdXRob3JpemF0aW9uOiAiand0ICIuY29uY2F0KGdldHRlcnMuYXV0aFRva2VuKQogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgIH0pOwoKICAgICAgICAgICAgY2FzZSA0OgogICAgICAgICAgICAgIHJlc3BvbnNlID0gX2NvbnRleHQxMi5zZW50OwogICAgICAgICAgICAgIF9jb250ZXh0MTIubmV4dCA9IDEwOwogICAgICAgICAgICAgIGJyZWFrOwoKICAgICAgICAgICAgY2FzZSA3OgogICAgICAgICAgICAgIF9jb250ZXh0MTIucHJldiA9IDc7CiAgICAgICAgICAgICAgX2NvbnRleHQxMi50MCA9IF9jb250ZXh0MTJbImNhdGNoIl0oMSk7CiAgICAgICAgICAgICAgX2NvbnRleHQxMi50MC5yZXNwb25zZSA/IGNvbnNvbGUubG9nKF9jb250ZXh0MTIudDAucmVzcG9uc2UpIDogY29uc29sZS5sb2coX2NvbnRleHQxMi50MCk7CgogICAgICAgICAgICBjYXNlIDEwOgogICAgICAgICAgICBjYXNlICJlbmQiOgogICAgICAgICAgICAgIHJldHVybiBfY29udGV4dDEyLnN0b3AoKTsKICAgICAgICAgIH0KICAgICAgICB9CiAgICAgIH0sIF9jYWxsZWUxMiwgbnVsbCwgW1sxLCA3XV0pOwogICAgfSkpKCk7CiAgfSwKICB1cGRhdGVCdXNpbmVzc0FwcGxpY2F0aW9uOiBmdW5jdGlvbiB1cGRhdGVCdXNpbmVzc0FwcGxpY2F0aW9uKF9yZWYxMywgcGF5bG9hZCkgewogICAgcmV0dXJuIF9hc3luY1RvR2VuZXJhdG9yKCAvKiNfX1BVUkVfXyovcmVnZW5lcmF0b3JSdW50aW1lLm1hcmsoZnVuY3Rpb24gX2NhbGxlZTEzKCkgewogICAgICB2YXIgY29tbWl0LCBnZXR0ZXJzLCByZXNwb25zZSwgZXJyb3JzLCBfZXJyb3JzNTsKCiAgICAgIHJldHVybiByZWdlbmVyYXRvclJ1bnRpbWUud3JhcChmdW5jdGlvbiBfY2FsbGVlMTMkKF9jb250ZXh0MTMpIHsKICAgICAgICB3aGlsZSAoMSkgewogICAgICAgICAgc3dpdGNoIChfY29udGV4dDEzLnByZXYgPSBfY29udGV4dDEzLm5leHQpIHsKICAgICAgICAgICAgY2FzZSAwOgogICAgICAgICAgICAgIGNvbW1pdCA9IF9yZWYxMy5jb21taXQsIGdldHRlcnMgPSBfcmVmMTMuZ2V0dGVyczsKICAgICAgICAgICAgICBfY29udGV4dDEzLnByZXYgPSAxOwogICAgICAgICAgICAgIHBheWxvYWQuaWQgPSBnZXR0ZXJzLmJ1c2luZXNzQXBwbGljYXRpb24uaWQ7CiAgICAgICAgICAgICAgX2NvbnRleHQxMy5uZXh0ID0gNTsKICAgICAgICAgICAgICByZXR1cm4gYXhpb3MucHV0KCIiLmNvbmNhdChiYXNlVXJsLCAiL2FwaS9idXNpbmVzcy1wZXJtaXQtYXBwbGljYXRpb24vIiksIHBheWxvYWQsIHsKICAgICAgICAgICAgICAgIGhlYWRlcnM6IHsKICAgICAgICAgICAgICAgICAgQXV0aG9yaXphdGlvbjogImp3dCAiLmNvbmNhdChnZXR0ZXJzLmF1dGhUb2tlbikKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICB9KTsKCiAgICAgICAgICAgIGNhc2UgNToKICAgICAgICAgICAgICByZXNwb25zZSA9IF9jb250ZXh0MTMuc2VudDsKICAgICAgICAgICAgICBjb21taXQoInNldEFwcGxpY2F0aW9uSGFzRXJyb3IiLCBmYWxzZSk7CiAgICAgICAgICAgICAgY29tbWl0KCJzZXRCdXNpbmVzc0FwcGxpY2F0aW9uIiwgcmVzcG9uc2UuZGF0YSk7CiAgICAgICAgICAgICAgZXJyb3JzID0gewogICAgICAgICAgICAgICAga2V5OiAiYXBwbGljYXRpb24iLAogICAgICAgICAgICAgICAgdmFsdWU6IHt9CiAgICAgICAgICAgICAgfTsKICAgICAgICAgICAgICBjb21taXQoInNldFN0ZXBPbmVFcnJvcnMiLCBlcnJvcnMpOwogICAgICAgICAgICAgIF9jb250ZXh0MTMubmV4dCA9IDIwOwogICAgICAgICAgICAgIGJyZWFrOwoKICAgICAgICAgICAgY2FzZSAxMjoKICAgICAgICAgICAgICBfY29udGV4dDEzLnByZXYgPSAxMjsKICAgICAgICAgICAgICBfY29udGV4dDEzLnQwID0gX2NvbnRleHQxM1siY2F0Y2giXSgxKTsKICAgICAgICAgICAgICBjb25zb2xlLmxvZyhfY29udGV4dDEzLnQwKTsKICAgICAgICAgICAgICBfZXJyb3JzNSA9IHsKICAgICAgICAgICAgICAgIGtleTogImFwcGxpY2F0aW9uIiwKICAgICAgICAgICAgICAgIHZhbHVlOiBfY29udGV4dDEzLnQwLnJlc3BvbnNlLmRhdGEKICAgICAgICAgICAgICB9OwogICAgICAgICAgICAgIGNvbW1pdCgic2V0U3RlcE9uZUVycm9ycyIsIF9lcnJvcnM1KTsKICAgICAgICAgICAgICBjb21taXQoInNldEFwcGxpY2F0aW9uSGFzRXJyb3IiLCB0cnVlKTsKICAgICAgICAgICAgICBjb25zb2xlLmxvZyhfY29udGV4dDEzLnQwLnJlc3BvbnNlKTsKICAgICAgICAgICAgICBjb21taXQoInNldExvYWRpbmciLCBmYWxzZSk7CgogICAgICAgICAgICBjYXNlIDIwOgogICAgICAgICAgICBjYXNlICJlbmQiOgogICAgICAgICAgICAgIHJldHVybiBfY29udGV4dDEzLnN0b3AoKTsKICAgICAgICAgIH0KICAgICAgICB9CiAgICAgIH0sIF9jYWxsZWUxMywgbnVsbCwgW1sxLCAxMl1dKTsKICAgIH0pKSgpOwogIH0sCiAgdXBkYXRlQnVzaW5lc3NCYXNpY0luZm9ybWF0aW9uOiBmdW5jdGlvbiB1cGRhdGVCdXNpbmVzc0Jhc2ljSW5mb3JtYXRpb24oX3JlZjE0LCBwYXlsb2FkKSB7CiAgICByZXR1cm4gX2FzeW5jVG9HZW5lcmF0b3IoIC8qI19fUFVSRV9fKi9yZWdlbmVyYXRvclJ1bnRpbWUubWFyayhmdW5jdGlvbiBfY2FsbGVlMTQoKSB7CiAgICAgIHZhciBjb21taXQsIGdldHRlcnMsIHJlc3BvbnNlLCBlcnJvcnMsIF9lcnJvcnM2OwoKICAgICAgcmV0dXJuIHJlZ2VuZXJhdG9yUnVudGltZS53cmFwKGZ1bmN0aW9uIF9jYWxsZWUxNCQoX2NvbnRleHQxNCkgewogICAgICAgIHdoaWxlICgxKSB7CiAgICAgICAgICBzd2l0Y2ggKF9jb250ZXh0MTQucHJldiA9IF9jb250ZXh0MTQubmV4dCkgewogICAgICAgICAgICBjYXNlIDA6CiAgICAgICAgICAgICAgY29tbWl0ID0gX3JlZjE0LmNvbW1pdCwgZ2V0dGVycyA9IF9yZWYxNC5nZXR0ZXJzOwogICAgICAgICAgICAgIF9jb250ZXh0MTQucHJldiA9IDE7CiAgICAgICAgICAgICAgcGF5bG9hZC5pZCA9IGdldHRlcnMuYnVzaW5lc3NCYXNpY0luZm9ybWF0aW9uLmlkOwogICAgICAgICAgICAgIF9jb250ZXh0MTQubmV4dCA9IDU7CiAgICAgICAgICAgICAgcmV0dXJuIGF4aW9zLnB1dCgiIi5jb25jYXQoYmFzZVVybCwgIi9hcGkvYnVzaW5lc3MtYmFzaWMtaW5mb3JtYXRpb24vIiksIHBheWxvYWQsIHsKICAgICAgICAgICAgICAgIGhlYWRlcnM6IHsKICAgICAgICAgICAgICAgICAgQXV0aG9yaXphdGlvbjogImp3dCAiLmNvbmNhdChnZXR0ZXJzLmF1dGhUb2tlbikKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICB9KTsKCiAgICAgICAgICAgIGNhc2UgNToKICAgICAgICAgICAgICByZXNwb25zZSA9IF9jb250ZXh0MTQuc2VudDsKICAgICAgICAgICAgICBjb21taXQoInNldEJhc2ljSW5mb0hhc0Vycm9yIiwgZmFsc2UpOwogICAgICAgICAgICAgIGNvbW1pdCgic2V0QnVzaW5lc3NCYXNpY0luZm9ybWF0aW9uIiwgcmVzcG9uc2UuZGF0YSk7CiAgICAgICAgICAgICAgZXJyb3JzID0gewogICAgICAgICAgICAgICAga2V5OiAiYmFzaWNfaW5mb3JtYXRpb24iLAogICAgICAgICAgICAgICAgdmFsdWU6IHt9CiAgICAgICAgICAgICAgfTsKICAgICAgICAgICAgICBjb21taXQoInNldFN0ZXBPbmVFcnJvcnMiLCBlcnJvcnMpOwogICAgICAgICAgICAgIF9jb250ZXh0MTQubmV4dCA9IDE5OwogICAgICAgICAgICAgIGJyZWFrOwoKICAgICAgICAgICAgY2FzZSAxMjoKICAgICAgICAgICAgICBfY29udGV4dDE0LnByZXYgPSAxMjsKICAgICAgICAgICAgICBfY29udGV4dDE0LnQwID0gX2NvbnRleHQxNFsiY2F0Y2giXSgxKTsKICAgICAgICAgICAgICBfZXJyb3JzNiA9IHsKICAgICAgICAgICAgICAgIGtleTogImJhc2ljX2luZm9ybWF0aW9uIiwKICAgICAgICAgICAgICAgIHZhbHVlOiBfY29udGV4dDE0LnQwLnJlc3BvbnNlLmRhdGEKICAgICAgICAgICAgICB9OwogICAgICAgICAgICAgIGNvbW1pdCgic2V0U3RlcE9uZUVycm9ycyIsIF9lcnJvcnM2KTsKICAgICAgICAgICAgICBfY29udGV4dDE0LnQwLnJlc3BvbnNlID8gY29uc29sZS5sb2coX2NvbnRleHQxNC50MC5yZXNwb25zZS5kYXRhKSA6IGNvbnNvbGUubG9nKF9jb250ZXh0MTQudDApOwogICAgICAgICAgICAgIGNvbW1pdCgic2V0QmFzaWNJbmZvSGFzRXJyb3IiLCB0cnVlKTsKICAgICAgICAgICAgICBjb21taXQoInNldExvYWRpbmciLCBmYWxzZSk7CgogICAgICAgICAgICBjYXNlIDE5OgogICAgICAgICAgICBjYXNlICJlbmQiOgogICAgICAgICAgICAgIHJldHVybiBfY29udGV4dDE0LnN0b3AoKTsKICAgICAgICAgIH0KICAgICAgICB9CiAgICAgIH0sIF9jYWxsZWUxNCwgbnVsbCwgW1sxLCAxMl1dKTsKICAgIH0pKSgpOwogIH0sCiAgdXBkYXRlQnVzaW5lc3NEZXRhaWxzOiBmdW5jdGlvbiB1cGRhdGVCdXNpbmVzc0RldGFpbHMoX3JlZjE1LCBwYXlsb2FkKSB7CiAgICByZXR1cm4gX2FzeW5jVG9HZW5lcmF0b3IoIC8qI19fUFVSRV9fKi9yZWdlbmVyYXRvclJ1bnRpbWUubWFyayhmdW5jdGlvbiBfY2FsbGVlMTUoKSB7CiAgICAgIHZhciBjb21taXQsIGdldHRlcnMsIHJlc3BvbnNlLCBlcnJvcnMsIF9lcnJvcnM3OwoKICAgICAgcmV0dXJuIHJlZ2VuZXJhdG9yUnVudGltZS53cmFwKGZ1bmN0aW9uIF9jYWxsZWUxNSQoX2NvbnRleHQxNSkgewogICAgICAgIHdoaWxlICgxKSB7CiAgICAgICAgICBzd2l0Y2ggKF9jb250ZXh0MTUucHJldiA9IF9jb250ZXh0MTUubmV4dCkgewogICAgICAgICAgICBjYXNlIDA6CiAgICAgICAgICAgICAgY29tbWl0ID0gX3JlZjE1LmNvbW1pdCwgZ2V0dGVycyA9IF9yZWYxNS5nZXR0ZXJzOwogICAgICAgICAgICAgIF9jb250ZXh0MTUucHJldiA9IDE7CiAgICAgICAgICAgICAgcGF5bG9hZC5pZCA9IGdldHRlcnMuYnVzaW5lc3NEZXRhaWxzLmlkOwogICAgICAgICAgICAgIF9jb250ZXh0MTUubmV4dCA9IDU7CiAgICAgICAgICAgICAgcmV0dXJuIGF4aW9zLnB1dCgiIi5jb25jYXQoYmFzZVVybCwgIi9hcGkvYnVzaW5lc3MtZGV0YWlscy8iKSwgcGF5bG9hZCwgewogICAgICAgICAgICAgICAgaGVhZGVyczogewogICAgICAgICAgICAgICAgICBBdXRob3JpemF0aW9uOiAiand0ICIuY29uY2F0KGdldHRlcnMuYXV0aFRva2VuKQogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgIH0pOwoKICAgICAgICAgICAgY2FzZSA1OgogICAgICAgICAgICAgIHJlc3BvbnNlID0gX2NvbnRleHQxNS5zZW50OwogICAgICAgICAgICAgIGNvbW1pdCgic2V0QnVzaW5lc3NEZXRhaWxzIiwgcmVzcG9uc2UuZGF0YSk7CiAgICAgICAgICAgICAgY29tbWl0KCJzZXREZXRhaWxzSGFzRXJyb3IiLCBmYWxzZSk7CiAgICAgICAgICAgICAgZXJyb3JzID0gewogICAgICAgICAgICAgICAga2V5OiAiYnVzaW5lc3NfZGV0YWlscyIsCiAgICAgICAgICAgICAgICB2YWx1ZToge30KICAgICAgICAgICAgICB9OwogICAgICAgICAgICAgIGNvbW1pdCgic2V0U3RlcFR3b0Vycm9ycyIsIGVycm9ycyk7CiAgICAgICAgICAgICAgX2NvbnRleHQxNS5uZXh0ID0gMTk7CiAgICAgICAgICAgICAgYnJlYWs7CgogICAgICAgICAgICBjYXNlIDEyOgogICAgICAgICAgICAgIF9jb250ZXh0MTUucHJldiA9IDEyOwogICAgICAgICAgICAgIF9jb250ZXh0MTUudDAgPSBfY29udGV4dDE1WyJjYXRjaCJdKDEpOwogICAgICAgICAgICAgIF9lcnJvcnM3ID0gewogICAgICAgICAgICAgICAga2V5OiAiYnVzaW5lc3NfZGV0YWlscyIsCiAgICAgICAgICAgICAgICB2YWx1ZTogX2NvbnRleHQxNS50MC5yZXNwb25zZS5kYXRhCiAgICAgICAgICAgICAgfTsKICAgICAgICAgICAgICBjb21taXQoInNldFN0ZXBUd29FcnJvcnMiLCBfZXJyb3JzNyk7CiAgICAgICAgICAgICAgY29tbWl0KCJzZXREZXRhaWxzSGFzRXJyb3IiLCB0cnVlKTsKICAgICAgICAgICAgICBjb25zb2xlLmxvZyhfY29udGV4dDE1LnQwLnJlc3BvbnNlKTsKICAgICAgICAgICAgICBjb21taXQoInNldExvYWRpbmciLCBmYWxzZSk7CgogICAgICAgICAgICBjYXNlIDE5OgogICAgICAgICAgICBjYXNlICJlbmQiOgogICAgICAgICAgICAgIHJldHVybiBfY29udGV4dDE1LnN0b3AoKTsKICAgICAgICAgIH0KICAgICAgICB9CiAgICAgIH0sIF9jYWxsZWUxNSwgbnVsbCwgW1sxLCAxMl1dKTsKICAgIH0pKSgpOwogIH0sCiAgdXBkYXRlTGVzc29yRGV0YWlsczogZnVuY3Rpb24gdXBkYXRlTGVzc29yRGV0YWlscyhfcmVmMTYsIHBheWxvYWQpIHsKICAgIHJldHVybiBfYXN5bmNUb0dlbmVyYXRvciggLyojX19QVVJFX18qL3JlZ2VuZXJhdG9yUnVudGltZS5tYXJrKGZ1bmN0aW9uIF9jYWxsZWUxNigpIHsKICAgICAgdmFyIGNvbW1pdCwgZ2V0dGVycywgcmVzcG9uc2UsIGVycm9ycywgX2Vycm9yczg7CgogICAgICByZXR1cm4gcmVnZW5lcmF0b3JSdW50aW1lLndyYXAoZnVuY3Rpb24gX2NhbGxlZTE2JChfY29udGV4dDE2KSB7CiAgICAgICAgd2hpbGUgKDEpIHsKICAgICAgICAgIHN3aXRjaCAoX2NvbnRleHQxNi5wcmV2ID0gX2NvbnRleHQxNi5uZXh0KSB7CiAgICAgICAgICAgIGNhc2UgMDoKICAgICAgICAgICAgICBjb21taXQgPSBfcmVmMTYuY29tbWl0LCBnZXR0ZXJzID0gX3JlZjE2LmdldHRlcnM7CiAgICAgICAgICAgICAgX2NvbnRleHQxNi5wcmV2ID0gMTsKICAgICAgICAgICAgICBwYXlsb2FkLmlkID0gZ2V0dGVycy5sZXNzb3JEZXRhaWxzLmlkOwogICAgICAgICAgICAgIF9jb250ZXh0MTYubmV4dCA9IDU7CiAgICAgICAgICAgICAgcmV0dXJuIGF4aW9zLnB1dCgiIi5jb25jYXQoYmFzZVVybCwgIi9hcGkvYnVzaW5lc3MtbGVzc29yLWRldGFpbHMvIiksIHBheWxvYWQsIHsKICAgICAgICAgICAgICAgIGhlYWRlcnM6IHsKICAgICAgICAgICAgICAgICAgQXV0aG9yaXphdGlvbjogImp3dCAiLmNvbmNhdChnZXR0ZXJzLmF1dGhUb2tlbikKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICB9KTsKCiAgICAgICAgICAgIGNhc2UgNToKICAgICAgICAgICAgICByZXNwb25zZSA9IF9jb250ZXh0MTYuc2VudDsKICAgICAgICAgICAgICBjb21taXQoInNldExlc3NvckRldGFpbHNIYXNFcnJvciIsIGZhbHNlKTsKICAgICAgICAgICAgICBjb21taXQoInNldExlc3NvckRldGFpbHMiLCByZXNwb25zZS5kYXRhKTsKICAgICAgICAgICAgICBlcnJvcnMgPSB7CiAgICAgICAgICAgICAgICBrZXk6ICJsZXNzb3JfZGV0YWlscyIsCiAgICAgICAgICAgICAgICB2YWx1ZToge30KICAgICAgICAgICAgICB9OwogICAgICAgICAgICAgIGNvbW1pdCgic2V0U3RlcFR3b0Vycm9ycyIsIGVycm9ycyk7CiAgICAgICAgICAgICAgX2NvbnRleHQxNi5uZXh0ID0gMTk7CiAgICAgICAgICAgICAgYnJlYWs7CgogICAgICAgICAgICBjYXNlIDEyOgogICAgICAgICAgICAgIF9jb250ZXh0MTYucHJldiA9IDEyOwogICAgICAgICAgICAgIF9jb250ZXh0MTYudDAgPSBfY29udGV4dDE2WyJjYXRjaCJdKDEpOwogICAgICAgICAgICAgIF9lcnJvcnM4ID0gewogICAgICAgICAgICAgICAga2V5OiAibGVzc29yX2RldGFpbHMiLAogICAgICAgICAgICAgICAgdmFsdWU6IF9jb250ZXh0MTYudDAucmVzcG9uc2UuZGF0YQogICAgICAgICAgICAgIH07CiAgICAgICAgICAgICAgY29tbWl0KCJzZXRTdGVwVHdvRXJyb3JzIiwgX2Vycm9yczgpOwogICAgICAgICAgICAgIGNvbW1pdCgic2V0TGVzc29yRGV0YWlsc0hhc0Vycm9yIiwgdHJ1ZSk7CiAgICAgICAgICAgICAgY29uc29sZS5sb2coX2NvbnRleHQxNi50MC5yZXNwb25zZSk7CiAgICAgICAgICAgICAgY29tbWl0KCJzZXRMb2FkaW5nIiwgZmFsc2UpOwoKICAgICAgICAgICAgY2FzZSAxOToKICAgICAgICAgICAgY2FzZSAiZW5kIjoKICAgICAgICAgICAgICByZXR1cm4gX2NvbnRleHQxNi5zdG9wKCk7CiAgICAgICAgICB9CiAgICAgICAgfQogICAgICB9LCBfY2FsbGVlMTYsIG51bGwsIFtbMSwgMTJdXSk7CiAgICB9KSkoKTsKICB9LAogIHVwZGF0ZUJ1c2luZXNzQWN0aXZpdHk6IGZ1bmN0aW9uIHVwZGF0ZUJ1c2luZXNzQWN0aXZpdHkoX3JlZjE3LCBwYXlsb2FkKSB7CiAgICByZXR1cm4gX2FzeW5jVG9HZW5lcmF0b3IoIC8qI19fUFVSRV9fKi9yZWdlbmVyYXRvclJ1bnRpbWUubWFyayhmdW5jdGlvbiBfY2FsbGVlMTcoKSB7CiAgICAgIHZhciBjb21taXQsIGdldHRlcnMsIHgsIHJlc3BvbnNlOwogICAgICByZXR1cm4gcmVnZW5lcmF0b3JSdW50aW1lLndyYXAoZnVuY3Rpb24gX2NhbGxlZTE3JChfY29udGV4dDE3KSB7CiAgICAgICAgd2hpbGUgKDEpIHsKICAgICAgICAgIHN3aXRjaCAoX2NvbnRleHQxNy5wcmV2ID0gX2NvbnRleHQxNy5uZXh0KSB7CiAgICAgICAgICAgIGNhc2UgMDoKICAgICAgICAgICAgICBjb21taXQgPSBfcmVmMTcuY29tbWl0LCBnZXR0ZXJzID0gX3JlZjE3LmdldHRlcnM7CiAgICAgICAgICAgICAgX2NvbnRleHQxNy5wcmV2ID0gMTsKCiAgICAgICAgICAgICAgaWYgKHBheWxvYWQubGVuZ3RoID4gMCkgewogICAgICAgICAgICAgICAgeCA9IDA7CiAgICAgICAgICAgICAgICBwYXlsb2FkLmZvckVhY2goZnVuY3Rpb24gKGVsZW1lbnQpIHsKICAgICAgICAgICAgICAgICAgZWxlbWVudC5jYXBpdGFsaXphdGlvbiA9IGVsZW1lbnQuY2FwaXRhbGl6YXRpb24udG9TdHJpbmcoKS5yZXBsYWNlKC8sL2csICIiKTsKICAgICAgICAgICAgICAgICAgZWxlbWVudC5jYXBpdGFsaXphdGlvbiA9IGVsZW1lbnQuY2FwaXRhbGl6YXRpb24uc3BsaXQoIi4iKVswXTsKICAgICAgICAgICAgICAgICAgZWxlbWVudC5pZCA9IGdldHRlcnMuYnVzaW5lc3NBY3Rpdml0aWVzW3hdLmlkOwogICAgICAgICAgICAgICAgICB4Kys7CiAgICAgICAgICAgICAgICB9KTsKICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgIF9jb250ZXh0MTcubmV4dCA9IDU7CiAgICAgICAgICAgICAgcmV0dXJuIGF4aW9zLnB1dCgiIi5jb25jYXQoYmFzZVVybCwgIi9hcGkvYnVzaW5lc3MtYWN0aXZpdHkvIiksIHBheWxvYWQsIHsKICAgICAgICAgICAgICAgIGhlYWRlcnM6IHsKICAgICAgICAgICAgICAgICAgQXV0aG9yaXphdGlvbjogImp3dCAiLmNvbmNhdChnZXR0ZXJzLmF1dGhUb2tlbikKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICB9KTsKCiAgICAgICAgICAgIGNhc2UgNToKICAgICAgICAgICAgICByZXNwb25zZSA9IF9jb250ZXh0MTcuc2VudDsKICAgICAgICAgICAgICBfY29udGV4dDE3Lm5leHQgPSAxMjsKICAgICAgICAgICAgICBicmVhazsKCiAgICAgICAgICAgIGNhc2UgODoKICAgICAgICAgICAgICBfY29udGV4dDE3LnByZXYgPSA4OwogICAgICAgICAgICAgIF9jb250ZXh0MTcudDAgPSBfY29udGV4dDE3WyJjYXRjaCJdKDEpOwogICAgICAgICAgICAgIGNvbnNvbGUubG9nKF9jb250ZXh0MTcudDAucmVzcG9uc2UpOwogICAgICAgICAgICAgIGNvbW1pdCgic2V0TG9hZGluZyIsIGZhbHNlKTsKCiAgICAgICAgICAgIGNhc2UgMTI6CiAgICAgICAgICAgIGNhc2UgImVuZCI6CiAgICAgICAgICAgICAgcmV0dXJuIF9jb250ZXh0MTcuc3RvcCgpOwogICAgICAgICAgfQogICAgICAgIH0KICAgICAgfSwgX2NhbGxlZTE3LCBudWxsLCBbWzEsIDhdXSk7CiAgICB9KSkoKTsKICB9LAogIGdldEJ1c2luZXNzQWN0aXZpdHk6IGZ1bmN0aW9uIGdldEJ1c2luZXNzQWN0aXZpdHkoX3JlZjE4KSB7CiAgICByZXR1cm4gX2FzeW5jVG9HZW5lcmF0b3IoIC8qI19fUFVSRV9fKi9yZWdlbmVyYXRvclJ1bnRpbWUubWFyayhmdW5jdGlvbiBfY2FsbGVlMTgoKSB7CiAgICAgIHZhciBjb21taXQsIGdldHRlcnMsIHBheWxvYWQsIHJlc3BvbnNlLCBhY3RpdmVCdXNpbmVzc0FjdGl2aXRpZXM7CiAgICAgIHJldHVybiByZWdlbmVyYXRvclJ1bnRpbWUud3JhcChmdW5jdGlvbiBfY2FsbGVlMTgkKF9jb250ZXh0MTgpIHsKICAgICAgICB3aGlsZSAoMSkgewogICAgICAgICAgc3dpdGNoIChfY29udGV4dDE4LnByZXYgPSBfY29udGV4dDE4Lm5leHQpIHsKICAgICAgICAgICAgY2FzZSAwOgogICAgICAgICAgICAgIGNvbW1pdCA9IF9yZWYxOC5jb21taXQsIGdldHRlcnMgPSBfcmVmMTguZ2V0dGVyczsKICAgICAgICAgICAgICBfY29udGV4dDE4LnByZXYgPSAxOwogICAgICAgICAgICAgIHBheWxvYWQgPSB7CiAgICAgICAgICAgICAgICBhcHBsaWNhdGlvbl9udW1iZXI6IGdldHRlcnMuYnVzaW5lc3NBcHBsaWNhdGlvbi5pZAogICAgICAgICAgICAgIH07CiAgICAgICAgICAgICAgX2NvbnRleHQxOC5uZXh0ID0gNTsKICAgICAgICAgICAgICByZXR1cm4gYXhpb3MuZ2V0KCIiLmNvbmNhdChiYXNlVXJsLCAiL2FwaS9idXNpbmVzcy1hY3Rpdml0eS8iKSwgewogICAgICAgICAgICAgICAgaGVhZGVyczogewogICAgICAgICAgICAgICAgICBBdXRob3JpemF0aW9uOiAiand0ICIuY29uY2F0KGdldHRlcnMuYXV0aFRva2VuKQogICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgIHBhcmFtczogcGF5bG9hZAogICAgICAgICAgICAgIH0pOwoKICAgICAgICAgICAgY2FzZSA1OgogICAgICAgICAgICAgIHJlc3BvbnNlID0gX2NvbnRleHQxOC5zZW50OwogICAgICAgICAgICAgIGFjdGl2ZUJ1c2luZXNzQWN0aXZpdGllcyA9IFtdOwogICAgICAgICAgICAgIGNvbnNvbGUubG9nKHJlc3BvbnNlLmRhdGEpOwogICAgICAgICAgICAgIHJlc3BvbnNlLmRhdGEuZm9yRWFjaChmdW5jdGlvbiAoaXRlbSkgewogICAgICAgICAgICAgICAgaWYgKGl0ZW0uaXNfYWN0aXZlIHx8IGl0ZW0ucmVtYXJrc19kcmFmdCkgewogICAgICAgICAgICAgICAgICBhY3RpdmVCdXNpbmVzc0FjdGl2aXRpZXMucHVzaChpdGVtKTsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICB9KTsKICAgICAgICAgICAgICBjb21taXQoInNldEJ1c2luZXNzQWN0aXZpdGllcyIsIGFjdGl2ZUJ1c2luZXNzQWN0aXZpdGllcyk7CiAgICAgICAgICAgICAgX2NvbnRleHQxOC5uZXh0ID0gMTY7CiAgICAgICAgICAgICAgYnJlYWs7CgogICAgICAgICAgICBjYXNlIDEyOgogICAgICAgICAgICAgIF9jb250ZXh0MTgucHJldiA9IDEyOwogICAgICAgICAgICAgIF9jb250ZXh0MTgudDAgPSBfY29udGV4dDE4WyJjYXRjaCJdKDEpOwogICAgICAgICAgICAgIGNvbnNvbGUubG9nKF9jb250ZXh0MTgudDApOwogICAgICAgICAgICAgIGNvbW1pdCgic2V0TG9hZGluZyIsIGZhbHNlKTsKCiAgICAgICAgICAgIGNhc2UgMTY6CiAgICAgICAgICAgIGNhc2UgImVuZCI6CiAgICAgICAgICAgICAgcmV0dXJuIF9jb250ZXh0MTguc3RvcCgpOwogICAgICAgICAgfQogICAgICAgIH0KICAgICAgfSwgX2NhbGxlZTE4LCBudWxsLCBbWzEsIDEyXV0pOwogICAgfSkpKCk7CiAgfSwKICBhZGRBcHBsaWNhdGlvblJlcXVpcmVtZW50czogZnVuY3Rpb24gYWRkQXBwbGljYXRpb25SZXF1aXJlbWVudHMoX3JlZjE5LCBwYXlsb2FkKSB7CiAgICByZXR1cm4gX2FzeW5jVG9HZW5lcmF0b3IoIC8qI19fUFVSRV9fKi9yZWdlbmVyYXRvclJ1bnRpbWUubWFyayhmdW5jdGlvbiBfY2FsbGVlMTkoKSB7CiAgICAgIHZhciBjb21taXQsIGdldHRlcnMsIHJlc3BvbnNlOwogICAgICByZXR1cm4gcmVnZW5lcmF0b3JSdW50aW1lLndyYXAoZnVuY3Rpb24gX2NhbGxlZTE5JChfY29udGV4dDE5KSB7CiAgICAgICAgd2hpbGUgKDEpIHsKICAgICAgICAgIHN3aXRjaCAoX2NvbnRleHQxOS5wcmV2ID0gX2NvbnRleHQxOS5uZXh0KSB7CiAgICAgICAgICAgIGNhc2UgMDoKICAgICAgICAgICAgICBjb21taXQgPSBfcmVmMTkuY29tbWl0LCBnZXR0ZXJzID0gX3JlZjE5LmdldHRlcnM7CiAgICAgICAgICAgICAgX2NvbnRleHQxOS5wcmV2ID0gMTsKICAgICAgICAgICAgICBfY29udGV4dDE5Lm5leHQgPSA0OwogICAgICAgICAgICAgIHJldHVybiBheGlvcy5wb3N0KCIiLmNvbmNhdChiYXNlVXJsLCAiL2FwaS9hcHBsaWNhdGlvbi1yZXF1aXJlbWVudHMvIiksIHBheWxvYWQsIHsKICAgICAgICAgICAgICAgIGhlYWRlcnM6IHsKICAgICAgICAgICAgICAgICAgQXV0aG9yaXphdGlvbjogImp3dCAiLmNvbmNhdChnZXR0ZXJzLmF1dGhUb2tlbikKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICB9KTsKCiAgICAgICAgICAgIGNhc2UgNDoKICAgICAgICAgICAgICByZXNwb25zZSA9IF9jb250ZXh0MTkuc2VudDsKICAgICAgICAgICAgICBjb21taXQoInNldEFwcGxpY2F0aW9uUmVxdWlyZW1lbnRzIiwgcmVzcG9uc2UuZGF0YSk7CiAgICAgICAgICAgICAgX2NvbnRleHQxOS5uZXh0ID0gMTE7CiAgICAgICAgICAgICAgYnJlYWs7CgogICAgICAgICAgICBjYXNlIDg6CiAgICAgICAgICAgICAgX2NvbnRleHQxOS5wcmV2ID0gODsKICAgICAgICAgICAgICBfY29udGV4dDE5LnQwID0gX2NvbnRleHQxOVsiY2F0Y2giXSgxKTsKICAgICAgICAgICAgICBjb25zb2xlLmxvZyhfY29udGV4dDE5LnQwLnJlc3BvbnNlKTsKCiAgICAgICAgICAgIGNhc2UgMTE6CiAgICAgICAgICAgIGNhc2UgImVuZCI6CiAgICAgICAgICAgICAgcmV0dXJuIF9jb250ZXh0MTkuc3RvcCgpOwogICAgICAgICAgfQogICAgICAgIH0KICAgICAgfSwgX2NhbGxlZTE5LCBudWxsLCBbWzEsIDhdXSk7CiAgICB9KSkoKTsKICB9LAogIHVwbG9hZFJlcXVpcmVtZW50czogZnVuY3Rpb24gdXBsb2FkUmVxdWlyZW1lbnRzKF9yZWYyMCwgcGF5bG9hZCkgewogICAgcmV0dXJuIF9hc3luY1RvR2VuZXJhdG9yKCAvKiNfX1BVUkVfXyovcmVnZW5lcmF0b3JSdW50aW1lLm1hcmsoZnVuY3Rpb24gX2NhbGxlZTIwKCkgewogICAgICB2YXIgY29tbWl0LCBnZXR0ZXJzLCBkaXNwYXRjaCwgcmVzcG9uc2U7CiAgICAgIHJldHVybiByZWdlbmVyYXRvclJ1bnRpbWUud3JhcChmdW5jdGlvbiBfY2FsbGVlMjAkKF9jb250ZXh0MjApIHsKICAgICAgICB3aGlsZSAoMSkgewogICAgICAgICAgc3dpdGNoIChfY29udGV4dDIwLnByZXYgPSBfY29udGV4dDIwLm5leHQpIHsKICAgICAgICAgICAgY2FzZSAwOgogICAgICAgICAgICAgIGNvbW1pdCA9IF9yZWYyMC5jb21taXQsIGdldHRlcnMgPSBfcmVmMjAuZ2V0dGVycywgZGlzcGF0Y2ggPSBfcmVmMjAuZGlzcGF0Y2g7CiAgICAgICAgICAgICAgX2NvbnRleHQyMC5wcmV2ID0gMTsKICAgICAgICAgICAgICBjb21taXQoInNldExvYWRpbmciLCB0cnVlKTsKICAgICAgICAgICAgICBfY29udGV4dDIwLm5leHQgPSA1OwogICAgICAgICAgICAgIHJldHVybiBheGlvcy5wb3N0KCIiLmNvbmNhdChiYXNlVXJsLCAiL2FwaS9maWxlLXVwbG9hZC8iKSwgcGF5bG9hZCwgewogICAgICAgICAgICAgICAgaGVhZGVyczogewogICAgICAgICAgICAgICAgICBBdXRob3JpemF0aW9uOiAiand0ICIuY29uY2F0KGdldHRlcnMuYXV0aFRva2VuKQogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgIH0pOwoKICAgICAgICAgICAgY2FzZSA1OgogICAgICAgICAgICAgIHJlc3BvbnNlID0gX2NvbnRleHQyMC5zZW50OwogICAgICAgICAgICAgIGNvbW1pdCgic2V0TG9hZGluZyIsIGZhbHNlKTsKICAgICAgICAgICAgICBfY29udGV4dDIwLm5leHQgPSA5OwogICAgICAgICAgICAgIHJldHVybiBkaXNwYXRjaCgiZ2V0QXBwbGljYXRpb25SZXF1aXJlbWVudHMiKTsKCiAgICAgICAgICAgIGNhc2UgOToKICAgICAgICAgICAgICBfY29udGV4dDIwLm5leHQgPSAxNzsKICAgICAgICAgICAgICBicmVhazsKCiAgICAgICAgICAgIGNhc2UgMTE6CiAgICAgICAgICAgICAgX2NvbnRleHQyMC5wcmV2ID0gMTE7CiAgICAgICAgICAgICAgX2NvbnRleHQyMC50MCA9IF9jb250ZXh0MjBbImNhdGNoIl0oMSk7CiAgICAgICAgICAgICAgY29tbWl0KCJzZXRMb2FkaW5nIiwgZmFsc2UpOwogICAgICAgICAgICAgIGNvbW1pdCgic2V0SXNGaWxlVXBsb2FkRmFpbGVkIiwgdHJ1ZSk7CiAgICAgICAgICAgICAgY29uc29sZS5sb2coX2NvbnRleHQyMC50MC5yZXNwb25zZSk7CiAgICAgICAgICAgICAgZGlzcGF0Y2goImNyZWF0ZVByb21wdCIsIHsKICAgICAgICAgICAgICAgIHR5cGU6ICJlcnJvciIsCiAgICAgICAgICAgICAgICB0aXRsZTogIkZhaWxlZCEiLAogICAgICAgICAgICAgICAgbWVzc2FnZTogIlNvbWV0aGluZyB3ZW50IHdyb25nISBQbGVhc2UgdHJ5IGFnYWluIGxhdGVyLiIKICAgICAgICAgICAgICB9KTsKCiAgICAgICAgICAgIGNhc2UgMTc6CiAgICAgICAgICAgIGNhc2UgImVuZCI6CiAgICAgICAgICAgICAgcmV0dXJuIF9jb250ZXh0MjAuc3RvcCgpOwogICAgICAgICAgfQogICAgICAgIH0KICAgICAgfSwgX2NhbGxlZTIwLCBudWxsLCBbWzEsIDExXV0pOwogICAgfSkpKCk7CiAgfSwKICBnZXRBcHBsaWNhdGlvblJlcXVpcmVtZW50czogZnVuY3Rpb24gZ2V0QXBwbGljYXRpb25SZXF1aXJlbWVudHMoX3JlZjIxKSB7CiAgICByZXR1cm4gX2FzeW5jVG9HZW5lcmF0b3IoIC8qI19fUFVSRV9fKi9yZWdlbmVyYXRvclJ1bnRpbWUubWFyayhmdW5jdGlvbiBfY2FsbGVlMjEoKSB7CiAgICAgIHZhciBjb21taXQsIGdldHRlcnMsIHBheWxvYWQsIHJlc3BvbnNlOwogICAgICByZXR1cm4gcmVnZW5lcmF0b3JSdW50aW1lLndyYXAoZnVuY3Rpb24gX2NhbGxlZTIxJChfY29udGV4dDIxKSB7CiAgICAgICAgd2hpbGUgKDEpIHsKICAgICAgICAgIHN3aXRjaCAoX2NvbnRleHQyMS5wcmV2ID0gX2NvbnRleHQyMS5uZXh0KSB7CiAgICAgICAgICAgIGNhc2UgMDoKICAgICAgICAgICAgICBjb21taXQgPSBfcmVmMjEuY29tbWl0LCBnZXR0ZXJzID0gX3JlZjIxLmdldHRlcnM7CiAgICAgICAgICAgICAgX2NvbnRleHQyMS5wcmV2ID0gMTsKICAgICAgICAgICAgICBwYXlsb2FkID0gewogICAgICAgICAgICAgICAgaWQ6IGdldHRlcnMuYXBwbGljYXRpb25SZXF1aXJlbWVudHMuaWQKICAgICAgICAgICAgICB9OwogICAgICAgICAgICAgIF9jb250ZXh0MjEubmV4dCA9IDU7CiAgICAgICAgICAgICAgcmV0dXJuIGF4aW9zLmdldCgiIi5jb25jYXQoYmFzZVVybCwgIi9hcGkvYXBwbGljYXRpb24tcmVxdWlyZW1lbnRzLyIpLCB7CiAgICAgICAgICAgICAgICBoZWFkZXJzOiB7CiAgICAgICAgICAgICAgICAgIEF1dGhvcml6YXRpb246ICJqd3QgIi5jb25jYXQoZ2V0dGVycy5hdXRoVG9rZW4pCiAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgcGFyYW1zOiBwYXlsb2FkCiAgICAgICAgICAgICAgfSk7CgogICAgICAgICAgICBjYXNlIDU6CiAgICAgICAgICAgICAgcmVzcG9uc2UgPSBfY29udGV4dDIxLnNlbnQ7CiAgICAgICAgICAgICAgcmVzcG9uc2UuZGF0YS5yZXF1aXJlbWVudHMgPSByZXNwb25zZS5kYXRhLnJlcXVpcmVtZW50cy5maWx0ZXIoZnVuY3Rpb24gKGl0ZW0pIHsKICAgICAgICAgICAgICAgIHJldHVybiBpdGVtLmlzX2FjdGl2ZSA9PSB0cnVlOwogICAgICAgICAgICAgIH0pOwogICAgICAgICAgICAgIGNvbW1pdCgic2V0UmVxdWlyZW1lbnRzIiwgcmVzcG9uc2UuZGF0YSk7CiAgICAgICAgICAgICAgX2NvbnRleHQyMS5uZXh0ID0gMTQ7CiAgICAgICAgICAgICAgYnJlYWs7CgogICAgICAgICAgICBjYXNlIDEwOgogICAgICAgICAgICAgIF9jb250ZXh0MjEucHJldiA9IDEwOwogICAgICAgICAgICAgIF9jb250ZXh0MjEudDAgPSBfY29udGV4dDIxWyJjYXRjaCJdKDEpOwogICAgICAgICAgICAgIGNvbnNvbGUubG9nKF9jb250ZXh0MjEudDAucmVzcG9uc2UpOwogICAgICAgICAgICAgIGNvbW1pdCgic2V0TG9hZGluZyIsIGZhbHNlKTsKCiAgICAgICAgICAgIGNhc2UgMTQ6CiAgICAgICAgICAgIGNhc2UgImVuZCI6CiAgICAgICAgICAgICAgcmV0dXJuIF9jb250ZXh0MjEuc3RvcCgpOwogICAgICAgICAgfQogICAgICAgIH0KICAgICAgfSwgX2NhbGxlZTIxLCBudWxsLCBbWzEsIDEwXV0pOwogICAgfSkpKCk7CiAgfSwKICBhc3Nlc3NCdXNpbmVzc0FwcGxpY2F0aW9uOiBmdW5jdGlvbiBhc3Nlc3NCdXNpbmVzc0FwcGxpY2F0aW9uKF9yZWYyMiwgcGF5bG9hZCkgewogICAgcmV0dXJuIF9hc3luY1RvR2VuZXJhdG9yKCAvKiNfX1BVUkVfXyovcmVnZW5lcmF0b3JSdW50aW1lLm1hcmsoZnVuY3Rpb24gX2NhbGxlZTIyKCkgewogICAgICB2YXIgY29tbWl0LCBnZXR0ZXJzLCBkaXNwYXRjaCwgcmVzcG9uc2U7CiAgICAgIHJldHVybiByZWdlbmVyYXRvclJ1bnRpbWUud3JhcChmdW5jdGlvbiBfY2FsbGVlMjIkKF9jb250ZXh0MjIpIHsKICAgICAgICB3aGlsZSAoMSkgewogICAgICAgICAgc3dpdGNoIChfY29udGV4dDIyLnByZXYgPSBfY29udGV4dDIyLm5leHQpIHsKICAgICAgICAgICAgY2FzZSAwOgogICAgICAgICAgICAgIGNvbW1pdCA9IF9yZWYyMi5jb21taXQsIGdldHRlcnMgPSBfcmVmMjIuZ2V0dGVycywgZGlzcGF0Y2ggPSBfcmVmMjIuZGlzcGF0Y2g7CiAgICAgICAgICAgICAgX2NvbnRleHQyMi5wcmV2ID0gMTsKICAgICAgICAgICAgICBfY29udGV4dDIyLm5leHQgPSA0OwogICAgICAgICAgICAgIHJldHVybiBheGlvcy5wb3N0KCIiLmNvbmNhdChiYXNlVXJsLCAiL3N0YWZmL2J1c2luZXNzLWRlcHQtYXNzZXNzbWVudCIpLCBwYXlsb2FkLCB7CiAgICAgICAgICAgICAgICBoZWFkZXJzOiB7CiAgICAgICAgICAgICAgICAgIEF1dGhvcml6YXRpb246ICJqd3QgIi5jb25jYXQoZ2V0dGVycy5hdXRoVG9rZW4pCiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgfSk7CgogICAgICAgICAgICBjYXNlIDQ6CiAgICAgICAgICAgICAgcmVzcG9uc2UgPSBfY29udGV4dDIyLnNlbnQ7CiAgICAgICAgICAgICAgY29tbWl0KCJzZXRCdXNpbmVzc0Fzc2Vzc21lbnRNZXNzYWdlIiwgcmVzcG9uc2UuZGF0YS5tZXNzYWdlKTsKICAgICAgICAgICAgICBjb21taXQoInNldElzQXNzZXNzbWVudEhhc0Vycm9yIiwgZmFsc2UpOwogICAgICAgICAgICAgIGNvbW1pdCgic2V0QXNzZXNzbWVudFBheWxvYWQiLCB7fSk7CiAgICAgICAgICAgICAgX2NvbnRleHQyMi5uZXh0ID0gMTU7CiAgICAgICAgICAgICAgYnJlYWs7CgogICAgICAgICAgICBjYXNlIDEwOgogICAgICAgICAgICAgIF9jb250ZXh0MjIucHJldiA9IDEwOwogICAgICAgICAgICAgIF9jb250ZXh0MjIudDAgPSBfY29udGV4dDIyWyJjYXRjaCJdKDEpOwogICAgICAgICAgICAgIGNvbW1pdCgic2V0SXNBc3Nlc3NtZW50SGFzRXJyb3IiLCB0cnVlKTsKICAgICAgICAgICAgICBjb25zb2xlLmxvZyhfY29udGV4dDIyLnQwKTsKCiAgICAgICAgICAgICAgaWYgKF9jb250ZXh0MjIudDAucmVzcG9uc2UpIHsKICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKF9jb250ZXh0MjIudDAucmVzcG9uc2UpOwogICAgICAgICAgICAgICAgZGlzcGF0Y2goImNyZWF0ZVByb21wdCIsIHsKICAgICAgICAgICAgICAgICAgdHlwZTogImVycm9yIiwKICAgICAgICAgICAgICAgICAgdGl0bGU6ICJGYWlsZWQhIiwKICAgICAgICAgICAgICAgICAgbWVzc2FnZTogX2NvbnRleHQyMi50MC5yZXNwb25zZS5kYXRhLmRldGFpbAogICAgICAgICAgICAgICAgfSk7CiAgICAgICAgICAgICAgICByb3V0ZXIucHVzaCh7CiAgICAgICAgICAgICAgICAgIG5hbWU6ICJBc3Nlc3NtZW50cyIKICAgICAgICAgICAgICAgIH0pOwogICAgICAgICAgICAgIH0KCiAgICAgICAgICAgIGNhc2UgMTU6CiAgICAgICAgICAgIGNhc2UgImVuZCI6CiAgICAgICAgICAgICAgcmV0dXJuIF9jb250ZXh0MjIuc3RvcCgpOwogICAgICAgICAgfQogICAgICAgIH0KICAgICAgfSwgX2NhbGxlZTIyLCBudWxsLCBbWzEsIDEwXV0pOwogICAgfSkpKCk7CiAgfSwKICBnZXRCdXNpbmVzc0Fzc2Vzc21lbnRSZXN1bHQ6IGZ1bmN0aW9uIGdldEJ1c2luZXNzQXNzZXNzbWVudFJlc3VsdChfcmVmMjMsIHBheWxvYWQpIHsKICAgIHJldHVybiBfYXN5bmNUb0dlbmVyYXRvciggLyojX19QVVJFX18qL3JlZ2VuZXJhdG9yUnVudGltZS5tYXJrKGZ1bmN0aW9uIF9jYWxsZWUyMygpIHsKICAgICAgdmFyIGNvbW1pdCwgZ2V0dGVycywgcmVzcG9uc2U7CiAgICAgIHJldHVybiByZWdlbmVyYXRvclJ1bnRpbWUud3JhcChmdW5jdGlvbiBfY2FsbGVlMjMkKF9jb250ZXh0MjMpIHsKICAgICAgICB3aGlsZSAoMSkgewogICAgICAgICAgc3dpdGNoIChfY29udGV4dDIzLnByZXYgPSBfY29udGV4dDIzLm5leHQpIHsKICAgICAgICAgICAgY2FzZSAwOgogICAgICAgICAgICAgIGNvbW1pdCA9IF9yZWYyMy5jb21taXQsIGdldHRlcnMgPSBfcmVmMjMuZ2V0dGVyczsKICAgICAgICAgICAgICBfY29udGV4dDIzLnByZXYgPSAxOwogICAgICAgICAgICAgIF9jb250ZXh0MjMubmV4dCA9IDQ7CiAgICAgICAgICAgICAgcmV0dXJuIGF4aW9zLmdldCgiIi5jb25jYXQoYmFzZVVybCwgIi9zdGFmZi9idXNpbmVzcy1kZXB0LWFzc2Vzc21lbnQiKSwgewogICAgICAgICAgICAgICAgaGVhZGVyczogewogICAgICAgICAgICAgICAgICBBdXRob3JpemF0aW9uOiAiand0ICIuY29uY2F0KGdldHRlcnMuYXV0aFRva2VuKQogICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgIHBhcmFtczogcGF5bG9hZAogICAgICAgICAgICAgIH0pOwoKICAgICAgICAgICAgY2FzZSA0OgogICAgICAgICAgICAgIHJlc3BvbnNlID0gX2NvbnRleHQyMy5zZW50OwogICAgICAgICAgICAgIGNvbW1pdCgic2V0QnVzaW5lc3NBc3Nlc3NtZW50UmVzdWx0IiwgcmVzcG9uc2UuZGF0YSk7CiAgICAgICAgICAgICAgX2NvbnRleHQyMy5uZXh0ID0gMTI7CiAgICAgICAgICAgICAgYnJlYWs7CgogICAgICAgICAgICBjYXNlIDg6CiAgICAgICAgICAgICAgX2NvbnRleHQyMy5wcmV2ID0gODsKICAgICAgICAgICAgICBfY29udGV4dDIzLnQwID0gX2NvbnRleHQyM1siY2F0Y2giXSgxKTsKICAgICAgICAgICAgICBjb25zb2xlLmxvZyhfY29udGV4dDIzLnQwKTsKCiAgICAgICAgICAgICAgaWYgKF9jb250ZXh0MjMudDAucmVzcG9uc2UpIHsKICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKF9jb250ZXh0MjMudDAucmVzcG9uc2UpOwogICAgICAgICAgICAgIH0KCiAgICAgICAgICAgIGNhc2UgMTI6CiAgICAgICAgICAgIGNhc2UgImVuZCI6CiAgICAgICAgICAgICAgcmV0dXJuIF9jb250ZXh0MjMuc3RvcCgpOwogICAgICAgICAgfQogICAgICAgIH0KICAgICAgfSwgX2NhbGxlZTIzLCBudWxsLCBbWzEsIDhdXSk7CiAgICB9KSkoKTsKICB9LAogIGNoZWNrQnVzaW5lc3NEZXB0Q2FuQXNzZXNzOiBmdW5jdGlvbiBjaGVja0J1c2luZXNzRGVwdENhbkFzc2VzcyhfcmVmMjQsIHBheWxvYWQpIHsKICAgIHJldHVybiBfYXN5bmNUb0dlbmVyYXRvciggLyojX19QVVJFX18qL3JlZ2VuZXJhdG9yUnVudGltZS5tYXJrKGZ1bmN0aW9uIF9jYWxsZWUyNCgpIHsKICAgICAgdmFyIGNvbW1pdCwgZ2V0dGVycywgcmVzcG9uc2U7CiAgICAgIHJldHVybiByZWdlbmVyYXRvclJ1bnRpbWUud3JhcChmdW5jdGlvbiBfY2FsbGVlMjQkKF9jb250ZXh0MjQpIHsKICAgICAgICB3aGlsZSAoMSkgewogICAgICAgICAgc3dpdGNoIChfY29udGV4dDI0LnByZXYgPSBfY29udGV4dDI0Lm5leHQpIHsKICAgICAgICAgICAgY2FzZSAwOgogICAgICAgICAgICAgIGNvbW1pdCA9IF9yZWYyNC5jb21taXQsIGdldHRlcnMgPSBfcmVmMjQuZ2V0dGVyczsKICAgICAgICAgICAgICBfY29udGV4dDI0LnByZXYgPSAxOwogICAgICAgICAgICAgIF9jb250ZXh0MjQubmV4dCA9IDQ7CiAgICAgICAgICAgICAgcmV0dXJuIGF4aW9zLmdldCgiIi5jb25jYXQoYmFzZVVybCwgIi9zdGFmZi9jaGVjay1idXNpbmVzcy1kZXB0LWlmLWNhbi1hc3Nlc3MiKSwgewogICAgICAgICAgICAgICAgaGVhZGVyczogewogICAgICAgICAgICAgICAgICBBdXRob3JpemF0aW9uOiAiand0ICIuY29uY2F0KGdldHRlcnMuYXV0aFRva2VuKQogICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgIHBhcmFtczogcGF5bG9hZAogICAgICAgICAgICAgIH0pOwoKICAgICAgICAgICAgY2FzZSA0OgogICAgICAgICAgICAgIHJlc3BvbnNlID0gX2NvbnRleHQyNC5zZW50OwogICAgICAgICAgICAgIGNvbW1pdCgic2V0QnVzaW5lc3NEZXB0Q2FuQXNzZXNzIiwgcmVzcG9uc2UuZGF0YS5jYW5fYXNzZXNzKTsKICAgICAgICAgICAgICBjb21taXQoInNldElzTGFzdEJ1c2luZXNzRGVwdCIsIHJlc3BvbnNlLmRhdGEubGFzdF9kZXBhcnRtZW50KTsKICAgICAgICAgICAgICBfY29udGV4dDI0Lm5leHQgPSAxMzsKICAgICAgICAgICAgICBicmVhazsKCiAgICAgICAgICAgIGNhc2UgOToKICAgICAgICAgICAgICBfY29udGV4dDI0LnByZXYgPSA5OwogICAgICAgICAgICAgIF9jb250ZXh0MjQudDAgPSBfY29udGV4dDI0WyJjYXRjaCJdKDEpOwogICAgICAgICAgICAgIGNvbnNvbGUubG9nKF9jb250ZXh0MjQudDApOwoKICAgICAgICAgICAgICBpZiAoX2NvbnRleHQyNC50MC5yZXNwb25zZSkgewogICAgICAgICAgICAgICAgY29uc29sZS5sb2coX2NvbnRleHQyNC50MC5yZXNwb25zZSk7CiAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgY2FzZSAxMzoKICAgICAgICAgICAgY2FzZSAiZW5kIjoKICAgICAgICAgICAgICByZXR1cm4gX2NvbnRleHQyNC5zdG9wKCk7CiAgICAgICAgICB9CiAgICAgICAgfQogICAgICB9LCBfY2FsbGVlMjQsIG51bGwsIFtbMSwgOV1dKTsKICAgIH0pKSgpOwogIH0sCiAgZ2V0Rm9yQnVzaW5lc3NBc3Nlc3NtZW50TGlzdDogZnVuY3Rpb24gZ2V0Rm9yQnVzaW5lc3NBc3Nlc3NtZW50TGlzdChfcmVmMjUpIHsKICAgIHZhciBfYXJndW1lbnRzMyA9IGFyZ3VtZW50czsKICAgIHJldHVybiBfYXN5bmNUb0dlbmVyYXRvciggLyojX19QVVJFX18qL3JlZ2VuZXJhdG9yUnVudGltZS5tYXJrKGZ1bmN0aW9uIF9jYWxsZWUyNSgpIHsKICAgICAgdmFyIGNvbW1pdCwgZ2V0dGVycywgcGFnZSwgcmVzcG9uc2U7CiAgICAgIHJldHVybiByZWdlbmVyYXRvclJ1bnRpbWUud3JhcChmdW5jdGlvbiBfY2FsbGVlMjUkKF9jb250ZXh0MjUpIHsKICAgICAgICB3aGlsZSAoMSkgewogICAgICAgICAgc3dpdGNoIChfY29udGV4dDI1LnByZXYgPSBfY29udGV4dDI1Lm5leHQpIHsKICAgICAgICAgICAgY2FzZSAwOgogICAgICAgICAgICAgIGNvbW1pdCA9IF9yZWYyNS5jb21taXQsIGdldHRlcnMgPSBfcmVmMjUuZ2V0dGVyczsKICAgICAgICAgICAgICBwYWdlID0gX2FyZ3VtZW50czMubGVuZ3RoID4gMSAmJiBfYXJndW1lbnRzM1sxXSAhPT0gdW5kZWZpbmVkID8gX2FyZ3VtZW50czNbMV0gOiAxOwogICAgICAgICAgICAgIF9jb250ZXh0MjUucHJldiA9IDI7CiAgICAgICAgICAgICAgX2NvbnRleHQyNS5uZXh0ID0gNTsKICAgICAgICAgICAgICByZXR1cm4gYXhpb3MuZ2V0KCIiLmNvbmNhdChiYXNlVXJsLCAiL3N0YWZmL2Zvci1idXNpbmVzcy1hc3Nlc3NtZW50LWxpc3Q/cGFnZT0iKS5jb25jYXQocGFnZSksIHsKICAgICAgICAgICAgICAgIGhlYWRlcnM6IHsKICAgICAgICAgICAgICAgICAgQXV0aG9yaXphdGlvbjogImp3dCAiLmNvbmNhdChnZXR0ZXJzLmF1dGhUb2tlbikKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICB9KTsKCiAgICAgICAgICAgIGNhc2UgNToKICAgICAgICAgICAgICByZXNwb25zZSA9IF9jb250ZXh0MjUuc2VudDsKICAgICAgICAgICAgICBfY29udGV4dDI1Lm5leHQgPSA4OwogICAgICAgICAgICAgIHJldHVybiBjb21taXQoInNldEZvckJ1c2luZXNzQXNzZXNzbWVudExpc3QiLCByZXNwb25zZS5kYXRhLnJlc3VsdHMpOwoKICAgICAgICAgICAgY2FzZSA4OgogICAgICAgICAgICAgIF9jb250ZXh0MjUubmV4dCA9IDEwOwogICAgICAgICAgICAgIHJldHVybiBjb21taXQoInNldFBhZ2VDb3VudCIsIHJlc3BvbnNlLmRhdGEudG90YWxfcGFnZXMpOwoKICAgICAgICAgICAgY2FzZSAxMDoKICAgICAgICAgICAgICBfY29udGV4dDI1Lm5leHQgPSAxNjsKICAgICAgICAgICAgICBicmVhazsKCiAgICAgICAgICAgIGNhc2UgMTI6CiAgICAgICAgICAgICAgX2NvbnRleHQyNS5wcmV2ID0gMTI7CiAgICAgICAgICAgICAgX2NvbnRleHQyNS50MCA9IF9jb250ZXh0MjVbImNhdGNoIl0oMik7CiAgICAgICAgICAgICAgY29uc29sZS5sb2coX2NvbnRleHQyNS50MCk7CgogICAgICAgICAgICAgIGlmIChfY29udGV4dDI1LnQwLnJlc3BvbnNlKSB7CiAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhfY29udGV4dDI1LnQwLnJlc3BvbnNlLmRhdGEpOwogICAgICAgICAgICAgIH0KCiAgICAgICAgICAgIGNhc2UgMTY6CiAgICAgICAgICAgIGNhc2UgImVuZCI6CiAgICAgICAgICAgICAgcmV0dXJuIF9jb250ZXh0MjUuc3RvcCgpOwogICAgICAgICAgfQogICAgICAgIH0KICAgICAgfSwgX2NhbGxlZTI1LCBudWxsLCBbWzIsIDEyXV0pOwogICAgfSkpKCk7CiAgfSwKICBnZXRBc3Nlc3NlZEJ1c2luZXNzTGlzdDogZnVuY3Rpb24gZ2V0QXNzZXNzZWRCdXNpbmVzc0xpc3QoX3JlZjI2KSB7CiAgICB2YXIgX2FyZ3VtZW50czQgPSBhcmd1bWVudHM7CiAgICByZXR1cm4gX2FzeW5jVG9HZW5lcmF0b3IoIC8qI19fUFVSRV9fKi9yZWdlbmVyYXRvclJ1bnRpbWUubWFyayhmdW5jdGlvbiBfY2FsbGVlMjYoKSB7CiAgICAgIHZhciBjb21taXQsIGdldHRlcnMsIHBhZ2UsIHJlc3BvbnNlOwogICAgICByZXR1cm4gcmVnZW5lcmF0b3JSdW50aW1lLndyYXAoZnVuY3Rpb24gX2NhbGxlZTI2JChfY29udGV4dDI2KSB7CiAgICAgICAgd2hpbGUgKDEpIHsKICAgICAgICAgIHN3aXRjaCAoX2NvbnRleHQyNi5wcmV2ID0gX2NvbnRleHQyNi5uZXh0KSB7CiAgICAgICAgICAgIGNhc2UgMDoKICAgICAgICAgICAgICBjb21taXQgPSBfcmVmMjYuY29tbWl0LCBnZXR0ZXJzID0gX3JlZjI2LmdldHRlcnM7CiAgICAgICAgICAgICAgcGFnZSA9IF9hcmd1bWVudHM0Lmxlbmd0aCA+IDEgJiYgX2FyZ3VtZW50czRbMV0gIT09IHVuZGVmaW5lZCA/IF9hcmd1bWVudHM0WzFdIDogMTsKICAgICAgICAgICAgICBfY29udGV4dDI2LnByZXYgPSAyOwogICAgICAgICAgICAgIF9jb250ZXh0MjYubmV4dCA9IDU7CiAgICAgICAgICAgICAgcmV0dXJuIGF4aW9zLmdldCgiIi5jb25jYXQoYmFzZVVybCwgIi9zdGFmZi9hc3Nlc3NlZC1idXNpbmVzcy1hcHBsaWNhdGlvbi1saXN0P3BhZ2U9IikuY29uY2F0KHBhZ2UpLCB7CiAgICAgICAgICAgICAgICBoZWFkZXJzOiB7CiAgICAgICAgICAgICAgICAgIEF1dGhvcml6YXRpb246ICJqd3QgIi5jb25jYXQoZ2V0dGVycy5hdXRoVG9rZW4pCiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgfSk7CgogICAgICAgICAgICBjYXNlIDU6CiAgICAgICAgICAgICAgcmVzcG9uc2UgPSBfY29udGV4dDI2LnNlbnQ7CiAgICAgICAgICAgICAgX2NvbnRleHQyNi5uZXh0ID0gODsKICAgICAgICAgICAgICByZXR1cm4gY29tbWl0KCJzZXRBc3Nlc3NlZEJ1c2luZXNzTGlzdCIsIHJlc3BvbnNlLmRhdGEucmVzdWx0cyk7CgogICAgICAgICAgICBjYXNlIDg6CiAgICAgICAgICAgICAgX2NvbnRleHQyNi5uZXh0ID0gMTA7CiAgICAgICAgICAgICAgcmV0dXJuIGNvbW1pdCgic2V0UGFnZUNvdW50IiwgcmVzcG9uc2UuZGF0YS50b3RhbF9wYWdlcyk7CgogICAgICAgICAgICBjYXNlIDEwOgogICAgICAgICAgICAgIF9jb250ZXh0MjYubmV4dCA9IDE2OwogICAgICAgICAgICAgIGJyZWFrOwoKICAgICAgICAgICAgY2FzZSAxMjoKICAgICAgICAgICAgICBfY29udGV4dDI2LnByZXYgPSAxMjsKICAgICAgICAgICAgICBfY29udGV4dDI2LnQwID0gX2NvbnRleHQyNlsiY2F0Y2giXSgyKTsKICAgICAgICAgICAgICBjb25zb2xlLmxvZyhfY29udGV4dDI2LnQwKTsKCiAgICAgICAgICAgICAgaWYgKF9jb250ZXh0MjYudDAucmVzcG9uc2UpIHsKICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKF9jb250ZXh0MjYudDAucmVzcG9uc2UuZGF0YSk7CiAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgY2FzZSAxNjoKICAgICAgICAgICAgY2FzZSAiZW5kIjoKICAgICAgICAgICAgICByZXR1cm4gX2NvbnRleHQyNi5zdG9wKCk7CiAgICAgICAgICB9CiAgICAgICAgfQogICAgICB9LCBfY2FsbGVlMjYsIG51bGwsIFtbMiwgMTJdXSk7CiAgICB9KSkoKTsKICB9LAogIHJlc2V0QnVzaW5lc3NBc3Nlc3NtZW50OiBmdW5jdGlvbiByZXNldEJ1c2luZXNzQXNzZXNzbWVudChfcmVmMjcsIHBheWxvYWQpIHsKICAgIHJldHVybiBfYXN5bmNUb0dlbmVyYXRvciggLyojX19QVVJFX18qL3JlZ2VuZXJhdG9yUnVudGltZS5tYXJrKGZ1bmN0aW9uIF9jYWxsZWUyNygpIHsKICAgICAgdmFyIGNvbW1pdCwgZ2V0dGVycywgcmVzcG9uc2U7CiAgICAgIHJldHVybiByZWdlbmVyYXRvclJ1bnRpbWUud3JhcChmdW5jdGlvbiBfY2FsbGVlMjckKF9jb250ZXh0MjcpIHsKICAgICAgICB3aGlsZSAoMSkgewogICAgICAgICAgc3dpdGNoIChfY29udGV4dDI3LnByZXYgPSBfY29udGV4dDI3Lm5leHQpIHsKICAgICAgICAgICAgY2FzZSAwOgogICAgICAgICAgICAgIGNvbW1pdCA9IF9yZWYyNy5jb21taXQsIGdldHRlcnMgPSBfcmVmMjcuZ2V0dGVyczsKICAgICAgICAgICAgICBfY29udGV4dDI3LnByZXYgPSAxOwogICAgICAgICAgICAgIF9jb250ZXh0MjcubmV4dCA9IDQ7CiAgICAgICAgICAgICAgcmV0dXJuIGF4aW9zLnB1dCgiIi5jb25jYXQoYmFzZVVybCwgIi9zdGFmZi9yZXNldC1idXNpbmVzcy1hc3Nlc3NtZW50IiksIHBheWxvYWQsIHsKICAgICAgICAgICAgICAgIGhlYWRlcnM6IHsKICAgICAgICAgICAgICAgICAgQXV0aG9yaXphdGlvbjogImp3dCAiLmNvbmNhdChnZXR0ZXJzLmF1dGhUb2tlbikKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICB9KTsKCiAgICAgICAgICAgIGNhc2UgNDoKICAgICAgICAgICAgICByZXNwb25zZSA9IF9jb250ZXh0Mjcuc2VudDsKICAgICAgICAgICAgICBfY29udGV4dDI3Lm5leHQgPSAxMTsKICAgICAgICAgICAgICBicmVhazsKCiAgICAgICAgICAgIGNhc2UgNzoKICAgICAgICAgICAgICBfY29udGV4dDI3LnByZXYgPSA3OwogICAgICAgICAgICAgIF9jb250ZXh0MjcudDAgPSBfY29udGV4dDI3WyJjYXRjaCJdKDEpOwogICAgICAgICAgICAgIGNvbnNvbGUubG9nKF9jb250ZXh0MjcudDApOwoKICAgICAgICAgICAgICBpZiAoX2NvbnRleHQyNy50MC5yZXNwb25zZSkgewogICAgICAgICAgICAgICAgY29uc29sZS5sb2coX2NvbnRleHQyNy50MC5yZXNwb25zZS5kYXRhKTsKICAgICAgICAgICAgICB9CgogICAgICAgICAgICBjYXNlIDExOgogICAgICAgICAgICBjYXNlICJlbmQiOgogICAgICAgICAgICAgIHJldHVybiBfY29udGV4dDI3LnN0b3AoKTsKICAgICAgICAgIH0KICAgICAgICB9CiAgICAgIH0sIF9jYWxsZWUyNywgbnVsbCwgW1sxLCA3XV0pOwogICAgfSkpKCk7CiAgfSwKICBnZXRVc2VyQnVzaW5lc3NBc3Nlc3NtZW50UmVzdWx0OiBmdW5jdGlvbiBnZXRVc2VyQnVzaW5lc3NBc3Nlc3NtZW50UmVzdWx0KF9yZWYyOCwgcGF5bG9hZCkgewogICAgcmV0dXJuIF9hc3luY1RvR2VuZXJhdG9yKCAvKiNfX1BVUkVfXyovcmVnZW5lcmF0b3JSdW50aW1lLm1hcmsoZnVuY3Rpb24gX2NhbGxlZTI4KCkgewogICAgICB2YXIgY29tbWl0LCBnZXR0ZXJzLCByZXNwb25zZTsKICAgICAgcmV0dXJuIHJlZ2VuZXJhdG9yUnVudGltZS53cmFwKGZ1bmN0aW9uIF9jYWxsZWUyOCQoX2NvbnRleHQyOCkgewogICAgICAgIHdoaWxlICgxKSB7CiAgICAgICAgICBzd2l0Y2ggKF9jb250ZXh0MjgucHJldiA9IF9jb250ZXh0MjgubmV4dCkgewogICAgICAgICAgICBjYXNlIDA6CiAgICAgICAgICAgICAgY29tbWl0ID0gX3JlZjI4LmNvbW1pdCwgZ2V0dGVycyA9IF9yZWYyOC5nZXR0ZXJzOwogICAgICAgICAgICAgIF9jb250ZXh0MjgucHJldiA9IDE7CiAgICAgICAgICAgICAgX2NvbnRleHQyOC5uZXh0ID0gNDsKICAgICAgICAgICAgICByZXR1cm4gYXhpb3MuZ2V0KCIiLmNvbmNhdChiYXNlVXJsLCAiL2FwaS9idXNpbmVzcy1hc3Nlc3NtZW50LXJlc3VsdC8iKSwgewogICAgICAgICAgICAgICAgaGVhZGVyczogewogICAgICAgICAgICAgICAgICBBdXRob3JpemF0aW9uOiAiand0ICIuY29uY2F0KGdldHRlcnMuYXV0aFRva2VuKQogICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgIHBhcmFtczogcGF5bG9hZAogICAgICAgICAgICAgIH0pOwoKICAgICAgICAgICAgY2FzZSA0OgogICAgICAgICAgICAgIHJlc3BvbnNlID0gX2NvbnRleHQyOC5zZW50OwogICAgICAgICAgICAgIGNvbW1pdCgic2V0QnVzaW5lc3NBc3Nlc3NtZW50UmVzdWx0IiwgcmVzcG9uc2UuZGF0YSk7CiAgICAgICAgICAgICAgX2NvbnRleHQyOC5uZXh0ID0gMTI7CiAgICAgICAgICAgICAgYnJlYWs7CgogICAgICAgICAgICBjYXNlIDg6CiAgICAgICAgICAgICAgX2NvbnRleHQyOC5wcmV2ID0gODsKICAgICAgICAgICAgICBfY29udGV4dDI4LnQwID0gX2NvbnRleHQyOFsiY2F0Y2giXSgxKTsKICAgICAgICAgICAgICBjb25zb2xlLmxvZyhfY29udGV4dDI4LnQwKTsKCiAgICAgICAgICAgICAgaWYgKF9jb250ZXh0MjgudDAucmVzcG9uc2UpIHsKICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKF9jb250ZXh0MjgudDAucmVzcG9uc2UpOwogICAgICAgICAgICAgIH0KCiAgICAgICAgICAgIGNhc2UgMTI6CiAgICAgICAgICAgIGNhc2UgImVuZCI6CiAgICAgICAgICAgICAgcmV0dXJuIF9jb250ZXh0Mjguc3RvcCgpOwogICAgICAgICAgfQogICAgICAgIH0KICAgICAgfSwgX2NhbGxlZTI4LCBudWxsLCBbWzEsIDhdXSk7CiAgICB9KSkoKTsKICB9LAogIGdldEJ1c2luZXNzQWN0aXZpdHlSZW5ld2FsOiBmdW5jdGlvbiBnZXRCdXNpbmVzc0FjdGl2aXR5UmVuZXdhbChfcmVmMjksIHBheWxvYWQpIHsKICAgIHJldHVybiBfYXN5bmNUb0dlbmVyYXRvciggLyojX19QVVJFX18qL3JlZ2VuZXJhdG9yUnVudGltZS5tYXJrKGZ1bmN0aW9uIF9jYWxsZWUyOSgpIHsKICAgICAgdmFyIGNvbW1pdCwgZ2V0dGVycywgcmVzcG9uc2U7CiAgICAgIHJldHVybiByZWdlbmVyYXRvclJ1bnRpbWUud3JhcChmdW5jdGlvbiBfY2FsbGVlMjkkKF9jb250ZXh0MjkpIHsKICAgICAgICB3aGlsZSAoMSkgewogICAgICAgICAgc3dpdGNoIChfY29udGV4dDI5LnByZXYgPSBfY29udGV4dDI5Lm5leHQpIHsKICAgICAgICAgICAgY2FzZSAwOgogICAgICAgICAgICAgIGNvbW1pdCA9IF9yZWYyOS5jb21taXQsIGdldHRlcnMgPSBfcmVmMjkuZ2V0dGVyczsKICAgICAgICAgICAgICBfY29udGV4dDI5LnByZXYgPSAxOwogICAgICAgICAgICAgIF9jb250ZXh0MjkubmV4dCA9IDQ7CiAgICAgICAgICAgICAgcmV0dXJuIGF4aW9zLmdldCgiIi5jb25jYXQoYmFzZVVybCwgIi9hcGkvYnVzaW5lc3MtYWN0aXZpdHktcmVuZXdhbD9hcHBsaWNhdGlvbl9udW1iZXI9IikuY29uY2F0KHBheWxvYWQpLCB7CiAgICAgICAgICAgICAgICBoZWFkZXJzOiB7CiAgICAgICAgICAgICAgICAgIEF1dGhvcml6YXRpb246ICJqd3QgIi5jb25jYXQoZ2V0dGVycy5hdXRoVG9rZW4pCiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgfSk7CgogICAgICAgICAgICBjYXNlIDQ6CiAgICAgICAgICAgICAgcmVzcG9uc2UgPSBfY29udGV4dDI5LnNlbnQ7CiAgICAgICAgICAgICAgX2NvbnRleHQyOS5uZXh0ID0gNzsKICAgICAgICAgICAgICByZXR1cm4gY29tbWl0KCJzZXRCdXNpbmVzc0FjdGl2aXRpZXMiLCByZXNwb25zZS5kYXRhKTsKCiAgICAgICAgICAgIGNhc2UgNzoKICAgICAgICAgICAgICBfY29udGV4dDI5Lm5leHQgPSAxMzsKICAgICAgICAgICAgICBicmVhazsKCiAgICAgICAgICAgIGNhc2UgOToKICAgICAgICAgICAgICBfY29udGV4dDI5LnByZXYgPSA5OwogICAgICAgICAgICAgIF9jb250ZXh0MjkudDAgPSBfY29udGV4dDI5WyJjYXRjaCJdKDEpOwogICAgICAgICAgICAgIGNvbnNvbGUubG9nKF9jb250ZXh0MjkudDApOwoKICAgICAgICAgICAgICBpZiAoX2NvbnRleHQyOS50MC5yZXNwb25zZSkgewogICAgICAgICAgICAgICAgY29uc29sZS5sb2coX2NvbnRleHQyOS50MC5yZXNwb25zZS5kYXRhKTsKICAgICAgICAgICAgICB9CgogICAgICAgICAgICBjYXNlIDEzOgogICAgICAgICAgICBjYXNlICJlbmQiOgogICAgICAgICAgICAgIHJldHVybiBfY29udGV4dDI5LnN0b3AoKTsKICAgICAgICAgIH0KICAgICAgICB9CiAgICAgIH0sIF9jYWxsZWUyOSwgbnVsbCwgW1sxLCA5XV0pOwogICAgfSkpKCk7CiAgfSwKICBnZXRCdXNpbmVzc1JlcXVpcmVtZW50UmVuZXdhbDogZnVuY3Rpb24gZ2V0QnVzaW5lc3NSZXF1aXJlbWVudFJlbmV3YWwoX3JlZjMwLCBwYXlsb2FkKSB7CiAgICByZXR1cm4gX2FzeW5jVG9HZW5lcmF0b3IoIC8qI19fUFVSRV9fKi9yZWdlbmVyYXRvclJ1bnRpbWUubWFyayhmdW5jdGlvbiBfY2FsbGVlMzAoKSB7CiAgICAgIHZhciBjb21taXQsIGdldHRlcnMsIGRpc3BhdGNoLCByZXNwb25zZSwgcmVxdWlyZW1lbnRzX3BheWxvYWQ7CiAgICAgIHJldHVybiByZWdlbmVyYXRvclJ1bnRpbWUud3JhcChmdW5jdGlvbiBfY2FsbGVlMzAkKF9jb250ZXh0MzApIHsKICAgICAgICB3aGlsZSAoMSkgewogICAgICAgICAgc3dpdGNoIChfY29udGV4dDMwLnByZXYgPSBfY29udGV4dDMwLm5leHQpIHsKICAgICAgICAgICAgY2FzZSAwOgogICAgICAgICAgICAgIGNvbW1pdCA9IF9yZWYzMC5jb21taXQsIGdldHRlcnMgPSBfcmVmMzAuZ2V0dGVycywgZGlzcGF0Y2ggPSBfcmVmMzAuZGlzcGF0Y2g7CiAgICAgICAgICAgICAgX2NvbnRleHQzMC5wcmV2ID0gMTsKICAgICAgICAgICAgICBfY29udGV4dDMwLm5leHQgPSA0OwogICAgICAgICAgICAgIHJldHVybiBheGlvcy5nZXQoIiIuY29uY2F0KGJhc2VVcmwsICIvYXBpL2J1c2luZXNzLXJlcXVpcmVtZW50LXJlbmV3YWw/YXBwbGljYXRpb25fbnVtYmVyPSIpLmNvbmNhdChwYXlsb2FkKSwgewogICAgICAgICAgICAgICAgaGVhZGVyczogewogICAgICAgICAgICAgICAgICBBdXRob3JpemF0aW9uOiAiand0ICIuY29uY2F0KGdldHRlcnMuYXV0aFRva2VuKQogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgIH0pOwoKICAgICAgICAgICAgY2FzZSA0OgogICAgICAgICAgICAgIHJlc3BvbnNlID0gX2NvbnRleHQzMC5zZW50OwoKICAgICAgICAgICAgICBpZiAoIShyZXNwb25zZS5kYXRhLmxlbmd0aCA8IDEpKSB7CiAgICAgICAgICAgICAgICBfY29udGV4dDMwLm5leHQgPSAxMTsKICAgICAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgcmVxdWlyZW1lbnRzX3BheWxvYWQgPSB7CiAgICAgICAgICAgICAgICBhcHBsaWNhdGlvbl9pZDogcGF5bG9hZCwKICAgICAgICAgICAgICAgIGlzX2FjdGl2ZTogZmFsc2UsCiAgICAgICAgICAgICAgICBpc19kcmFmdDogdHJ1ZQogICAgICAgICAgICAgIH07CiAgICAgICAgICAgICAgX2NvbnRleHQzMC5uZXh0ID0gOTsKICAgICAgICAgICAgICByZXR1cm4gZGlzcGF0Y2goImFkZEFwcGxpY2F0aW9uUmVxdWlyZW1lbnRzIiwgcmVxdWlyZW1lbnRzX3BheWxvYWQpOwoKICAgICAgICAgICAgY2FzZSA5OgogICAgICAgICAgICAgIF9jb250ZXh0MzAubmV4dCA9IDEzOwogICAgICAgICAgICAgIGJyZWFrOwoKICAgICAgICAgICAgY2FzZSAxMToKICAgICAgICAgICAgICBfY29udGV4dDMwLm5leHQgPSAxMzsKICAgICAgICAgICAgICByZXR1cm4gY29tbWl0KCJzZXRBcHBsaWNhdGlvblJlcXVpcmVtZW50cyIsIHJlc3BvbnNlLmRhdGFbMF0pOwoKICAgICAgICAgICAgY2FzZSAxMzoKICAgICAgICAgICAgICBfY29udGV4dDMwLm5leHQgPSAxOTsKICAgICAgICAgICAgICBicmVhazsKCiAgICAgICAgICAgIGNhc2UgMTU6CiAgICAgICAgICAgICAgX2NvbnRleHQzMC5wcmV2ID0gMTU7CiAgICAgICAgICAgICAgX2NvbnRleHQzMC50MCA9IF9jb250ZXh0MzBbImNhdGNoIl0oMSk7CiAgICAgICAgICAgICAgY29uc29sZS5sb2coX2NvbnRleHQzMC50MCk7CgogICAgICAgICAgICAgIGlmIChfY29udGV4dDMwLnQwLnJlc3BvbnNlKSB7CiAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhfY29udGV4dDMwLnQwLnJlc3BvbnNlLmRhdGEpOwogICAgICAgICAgICAgIH0KCiAgICAgICAgICAgIGNhc2UgMTk6CiAgICAgICAgICAgIGNhc2UgImVuZCI6CiAgICAgICAgICAgICAgcmV0dXJuIF9jb250ZXh0MzAuc3RvcCgpOwogICAgICAgICAgfQogICAgICAgIH0KICAgICAgfSwgX2NhbGxlZTMwLCBudWxsLCBbWzEsIDE1XV0pOwogICAgfSkpKCk7CiAgfSwKICBnZXRCdXNpbmVzc0FjdGl2ZVJlcXVpcmVtZW50OiBmdW5jdGlvbiBnZXRCdXNpbmVzc0FjdGl2ZVJlcXVpcmVtZW50KF9yZWYzMSkgewogICAgcmV0dXJuIF9hc3luY1RvR2VuZXJhdG9yKCAvKiNfX1BVUkVfXyovcmVnZW5lcmF0b3JSdW50aW1lLm1hcmsoZnVuY3Rpb24gX2NhbGxlZTMxKCkgewogICAgICB2YXIgY29tbWl0LCBnZXR0ZXJzLCByZXNwb25zZTsKICAgICAgcmV0dXJuIHJlZ2VuZXJhdG9yUnVudGltZS53cmFwKGZ1bmN0aW9uIF9jYWxsZWUzMSQoX2NvbnRleHQzMSkgewogICAgICAgIHdoaWxlICgxKSB7CiAgICAgICAgICBzd2l0Y2ggKF9jb250ZXh0MzEucHJldiA9IF9jb250ZXh0MzEubmV4dCkgewogICAgICAgICAgICBjYXNlIDA6CiAgICAgICAgICAgICAgY29tbWl0ID0gX3JlZjMxLmNvbW1pdCwgZ2V0dGVycyA9IF9yZWYzMS5nZXR0ZXJzOwogICAgICAgICAgICAgIF9jb250ZXh0MzEucHJldiA9IDE7CiAgICAgICAgICAgICAgX2NvbnRleHQzMS5uZXh0ID0gNDsKICAgICAgICAgICAgICByZXR1cm4gYXhpb3MuZ2V0KCIiLmNvbmNhdChiYXNlVXJsLCAiL2FwaS9idXNpbmVzcy1hY3RpdmUtcmVxdWlyZW1lbnRzP2FwcGxpY2F0aW9uX251bWJlcj0iKS5jb25jYXQoZ2V0dGVycy5idXNpbmVzc0FwcGxpY2F0aW9uLmlkKSwgewogICAgICAgICAgICAgICAgaGVhZGVyczogewogICAgICAgICAgICAgICAgICBBdXRob3JpemF0aW9uOiAiand0ICIuY29uY2F0KGdldHRlcnMuYXV0aFRva2VuKQogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgIH0pOwoKICAgICAgICAgICAgY2FzZSA0OgogICAgICAgICAgICAgIHJlc3BvbnNlID0gX2NvbnRleHQzMS5zZW50OwogICAgICAgICAgICAgIGNvbnNvbGUubG9nKHJlc3BvbnNlLmRhdGEpOwogICAgICAgICAgICAgIF9jb250ZXh0MzEubmV4dCA9IDg7CiAgICAgICAgICAgICAgcmV0dXJuIGNvbW1pdCgic2V0QXBwbGljYXRpb25SZXF1aXJlbWVudHMiLCByZXNwb25zZS5kYXRhWzBdKTsKCiAgICAgICAgICAgIGNhc2UgODoKICAgICAgICAgICAgICBfY29udGV4dDMxLm5leHQgPSAxNDsKICAgICAgICAgICAgICBicmVhazsKCiAgICAgICAgICAgIGNhc2UgMTA6CiAgICAgICAgICAgICAgX2NvbnRleHQzMS5wcmV2ID0gMTA7CiAgICAgICAgICAgICAgX2NvbnRleHQzMS50MCA9IF9jb250ZXh0MzFbImNhdGNoIl0oMSk7CiAgICAgICAgICAgICAgY29uc29sZS5sb2coX2NvbnRleHQzMS50MCk7CgogICAgICAgICAgICAgIGlmIChfY29udGV4dDMxLnQwLnJlc3BvbnNlKSB7CiAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhfY29udGV4dDMxLnQwLnJlc3BvbnNlLmRhdGEpOwogICAgICAgICAgICAgIH0KCiAgICAgICAgICAgIGNhc2UgMTQ6CiAgICAgICAgICAgIGNhc2UgImVuZCI6CiAgICAgICAgICAgICAgcmV0dXJuIF9jb250ZXh0MzEuc3RvcCgpOwogICAgICAgICAgfQogICAgICAgIH0KICAgICAgfSwgX2NhbGxlZTMxLCBudWxsLCBbWzEsIDEwXV0pOwogICAgfSkpKCk7CiAgfSwKICByZW5ld0J1c2luZXNzQXBwbGljYXRpb246IGZ1bmN0aW9uIHJlbmV3QnVzaW5lc3NBcHBsaWNhdGlvbihfcmVmMzIpIHsKICAgIHJldHVybiBfYXN5bmNUb0dlbmVyYXRvciggLyojX19QVVJFX18qL3JlZ2VuZXJhdG9yUnVudGltZS5tYXJrKGZ1bmN0aW9uIF9jYWxsZWUzMigpIHsKICAgICAgdmFyIGNvbW1pdCwgZ2V0dGVycywgcmVzcG9uc2U7CiAgICAgIHJldHVybiByZWdlbmVyYXRvclJ1bnRpbWUud3JhcChmdW5jdGlvbiBfY2FsbGVlMzIkKF9jb250ZXh0MzIpIHsKICAgICAgICB3aGlsZSAoMSkgewogICAgICAgICAgc3dpdGNoIChfY29udGV4dDMyLnByZXYgPSBfY29udGV4dDMyLm5leHQpIHsKICAgICAgICAgICAgY2FzZSAwOgogICAgICAgICAgICAgIGNvbW1pdCA9IF9yZWYzMi5jb21taXQsIGdldHRlcnMgPSBfcmVmMzIuZ2V0dGVyczsKICAgICAgICAgICAgICBfY29udGV4dDMyLnByZXYgPSAxOwogICAgICAgICAgICAgIF9jb250ZXh0MzIubmV4dCA9IDQ7CiAgICAgICAgICAgICAgcmV0dXJuIGF4aW9zLnBvc3QoIiIuY29uY2F0KGJhc2VVcmwsICIvYXBpL3JlbmV3LWJ1c2luZXNzLWFwcGxpY2F0aW9uLyIpLCB7CiAgICAgICAgICAgICAgICBhcHBsaWNhdGlvbl9udW1iZXI6IGdldHRlcnMuYnVzaW5lc3NBcHBsaWNhdGlvbi5pZAogICAgICAgICAgICAgIH0sIHsKICAgICAgICAgICAgICAgIGhlYWRlcnM6IHsKICAgICAgICAgICAgICAgICAgQXV0aG9yaXphdGlvbjogImp3dCAiLmNvbmNhdChnZXR0ZXJzLmF1dGhUb2tlbikKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICB9KTsKCiAgICAgICAgICAgIGNhc2UgNDoKICAgICAgICAgICAgICByZXNwb25zZSA9IF9jb250ZXh0MzIuc2VudDsKICAgICAgICAgICAgICBjb25zb2xlLmxvZyhyZXNwb25zZS5kYXRhKTsKICAgICAgICAgICAgICBfY29udGV4dDMyLm5leHQgPSAxMjsKICAgICAgICAgICAgICBicmVhazsKCiAgICAgICAgICAgIGNhc2UgODoKICAgICAgICAgICAgICBfY29udGV4dDMyLnByZXYgPSA4OwogICAgICAgICAgICAgIF9jb250ZXh0MzIudDAgPSBfY29udGV4dDMyWyJjYXRjaCJdKDEpOwogICAgICAgICAgICAgIGNvbnNvbGUubG9nKF9jb250ZXh0MzIudDApOwoKICAgICAgICAgICAgICBpZiAoX2NvbnRleHQzMi50MC5yZXNwb25zZSkgewogICAgICAgICAgICAgICAgY29uc29sZS5sb2coX2NvbnRleHQzMi50MC5yZXNwb25zZS5kYXRhKTsKICAgICAgICAgICAgICB9CgogICAgICAgICAgICBjYXNlIDEyOgogICAgICAgICAgICBjYXNlICJlbmQiOgogICAgICAgICAgICAgIHJldHVybiBfY29udGV4dDMyLnN0b3AoKTsKICAgICAgICAgIH0KICAgICAgICB9CiAgICAgIH0sIF9jYWxsZWUzMiwgbnVsbCwgW1sxLCA4XV0pOwogICAgfSkpKCk7CiAgfQp9OwpleHBvcnQgZGVmYXVsdCB7CiAgc3RhdGU6IHN0YXRlLAogIGdldHRlcnM6IGdldHRlcnMsCiAgYWN0aW9uczogYWN0aW9ucywKICBtdXRhdGlvbnM6IG11dGF0aW9ucwp9Ow=="},{"version":3,"sources":["/var/www/html/boss-web/src/store/modules/business.js"],"names":["axios","baseUrl","process","env","VUE_APP_API_URL","oneDocToken","VUE_APP_ONE_DOC_TOKEN","router","getDefaultBusinessState","currentBusinessStep","businessApplication","businessBasicInformation","businessDetails","lessorDetails","businessActivities","applicationHasError","basicInfoHasError","detailsHasError","lessorDetailsHasError","activitiesHasError","stepOneErrors","application","basic_information","stepTwoErrors","business_details","lessor_details","applications","businessProfiles","applicationRequirements","requirements","isUploading","draftBusiness","pageCount","filterBy","isBusinessEnrollmentSuccess","typeOfOrganization","currentBusinessId","businessSearch","businessAssessmentMessage","businessAssessmentResult","businessDeptCanAssess","isLastBusinessDept","forBusinessAssessmentList","assessedBusinessList","currentSelectedBusiness","isBusinessAssessment","assessmentPayload","activityErrors","showActionButtons","state","getters","mutations","setCurrentBusinessStep","resetBusinessState","Object","assign","setBusinessApplication","setBusinessBasicInformation","setBusinessDetails","setLessorDetails","setBusinessActivities","setApplicationHasError","setBasicInfoHasError","setDetailsHasError","setLessorDetailsHasError","setStepOneErrors","key","value","setStepTwoErrors","setApplications","setBusinessProfiles","setApplicationRequirements","setIsUploading","setRequirements","setDraftBusiness","setPageCount","setFilterBy","setIsBusinessEnrollmentSuccess","setTypeOfOrganization","setCurrentBusinessId","setBusinessSearch","setBusinessAssessmentMessage","setBusinessAssessmentResult","setBusinessDeptCanAssess","setIsLastBusinessDept","setForBusinessAssessmentList","setAssessedBusinessList","setCurrentSelectedBusiness","setIsBusinessAssessment","setAssessmentPayload","setActivityErrors","setShowActionButtons","actions","getBusinessApplication","payload","commit","dispatch","get","headers","Authorization","authToken","response","id","data","created_at","is_draft","is_approve","is_disapprove","account_number","application_status","business_application","businessbasicinformation","businessdetails","lessordetails","on_renewal","push","name","businessapplicationrequirements","console","log","businessEnrollment","config","post","Response","Result","businessid","$swal","title","text","icon","approveBusinessApplication","put","action","status","type","message","getAllBusinessApplications","page","total_pages","results","getBusinessApplications","getBusinessProfiles","addBusinessApplication","errors","addBusinessBasicInformation","application_number","addBusinessDetails","addLessorDetails","addBusinessActivity","item","capitalization","toString","replace","split","units","undefined","addRenewBusinessActivity","updateBusinessApplication","updateBusinessBasicInformation","updateBusinessDetails","updateLessorDetails","updateBusinessActivity","length","x","forEach","element","getBusinessActivity","params","activeBusinessActivities","is_active","remarks_draft","addApplicationRequirements","uploadRequirements","getApplicationRequirements","filter","assessBusinessApplication","detail","getBusinessAssessmentResult","checkBusinessDeptCanAssess","can_assess","last_department","getForBusinessAssessmentList","getAssessedBusinessList","resetBusinessAssessment","getUserBusinessAssessmentResult","getBusinessActivityRenewal","getBusinessRequirementRenewal","requirements_payload","application_id","getBusinessActiveRequirement","renewBusinessApplication"],"mappings":"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","sourcesContent":["import axios from \"axios\";\nconst baseUrl = process.env.VUE_APP_API_URL;\nconst oneDocToken = process.env.VUE_APP_ONE_DOC_TOKEN;\nimport router from \"../../router/index.js\";\nconst getDefaultBusinessState = () => {\n  return {\n    currentBusinessStep: \"1\",\n    businessApplication: {},\n    businessBasicInformation: {},\n    businessDetails: {},\n    lessorDetails: {},\n    businessActivities: [],\n    applicationHasError: false,\n    basicInfoHasError: false,\n    detailsHasError: false,\n    lessorDetailsHasError: false,\n    activitiesHasError: false,\n    stepOneErrors: {\n      application: [],\n      basic_information: [],\n    },\n    stepTwoErrors: {\n      business_details: [],\n      lessor_details: [],\n    },\n    applications: [],\n    businessProfiles: [],\n    applicationRequirements: {},\n    requirements: [],\n    isUploading: false,\n    draftBusiness: false,\n    pageCount: 0,\n    filterBy: \"all\",\n    isBusinessEnrollmentSuccess: false,\n    typeOfOrganization: \"\",\n    currentBusinessId: 0,\n    businessSearch: \"\",\n    businessAssessmentMessage: \"\",\n    businessAssessmentResult: [],\n    businessDeptCanAssess: false,\n    isLastBusinessDept: false,\n    forBusinessAssessmentList: [],\n    assessedBusinessList: [],\n    currentSelectedBusiness: {},\n    isBusinessAssessment: false,\n    assessmentPayload: {},\n    activityErrors: {},\n    showActionButtons: true,\n  };\n};\n\nconst state = getDefaultBusinessState();\n\nconst getters = {\n  currentBusinessStep: (state) => state.currentBusinessStep,\n  businessApplication: (state) => state.businessApplication,\n  businessBasicInformation: (state) => state.businessBasicInformation,\n  businessDetails: (state) => state.businessDetails,\n  lessorDetails: (state) => state.lessorDetails,\n  businessActivities: (state) => state.businessActivities,\n  applicationHasError: (state) => state.applicationHasError,\n  basicInfoHasError: (state) => state.basicInfoHasError,\n  detailsHasError: (state) => state.detailsHasError,\n  lessorDetailsHasError: (state) => state.lessorDetailsHasError,\n  activitiesHasError: (state) => state.activitiesHasError,\n  stepOneErrors: (state) => state.stepOneErrors,\n  stepTwoErrors: (state) => state.stepTwoErrors,\n  applications: (state) => state.applications,\n  businessProfiles: (state) => state.businessProfiles,\n  applicationRequirements: (state) => state.applicationRequirements,\n  isUploading: (state) => state.isUploading,\n  requirements: (state) => state.requirements,\n  draftBusiness: (state) => state.draftBusiness,\n  pageCount: (state) => state.pageCount,\n  filterBy: (state) => state.filterBy,\n  isBusinessEnrollmentSuccess: (state) => state.isBusinessEnrollmentSuccess,\n  typeOfOrganization: (state) => state.typeOfOrganization,\n  currentBusinessId: (state) => state.currentBusinessId,\n  businessSearch: (state) => state.businessSearch,\n  businessAssessmentMessage: (state) => state.businessAssessmentMessage,\n  businessAssessmentResult: (state) => state.businessAssessmentResult,\n  businessDeptCanAssess: (state) => state.businessDeptCanAssess,\n  isLastBusinessDept: (state) => state.isLastBusinessDept,\n  forBusinessAssessmentList: (state) => state.forBusinessAssessmentList,\n  assessedBusinessList: (state) => state.assessedBusinessList,\n  currentSelectedBusiness: (state) => state.currentSelectedBusiness,\n  isBusinessAssessment: (state) => state.isBusinessAssessment,\n  assessmentPayload: (state) => state.assessmentPayload,\n  activityErrors: (state) => state.activityErrors,\n  showActionButtons: (state) => state.showActionButtons,\n};\n\nconst mutations = {\n  setCurrentBusinessStep: (state, currentBusinessStep) =>\n    (state.currentBusinessStep = currentBusinessStep),\n  resetBusinessState: (state) =>\n    Object.assign(state, getDefaultBusinessState()),\n  setBusinessApplication: (state, businessApplication) =>\n    (state.businessApplication = businessApplication),\n  setBusinessBasicInformation: (state, businessBasicInformation) =>\n    (state.businessBasicInformation = businessBasicInformation),\n  setBusinessDetails: (state, businessDetails) =>\n    (state.businessDetails = businessDetails),\n  setLessorDetails: (state, lessorDetails) =>\n    (state.lessorDetails = lessorDetails),\n  setBusinessActivities: (state, businessActivities) =>\n    (state.businessActivities = businessActivities),\n  setApplicationHasError: (state, applicationHasError) =>\n    (state.applicationHasError = applicationHasError),\n  setBasicInfoHasError: (state, basicInfoHasError) =>\n    (state.basicInfoHasError = basicInfoHasError),\n  setDetailsHasError: (state, detailsHasError) =>\n    (state.detailsHasError = detailsHasError),\n  setLessorDetailsHasError: (state, lessorDetailsHasError) =>\n    (state.lessorDetailsHasError = lessorDetailsHasError),\n  setStepOneErrors: (state, stepOneErrors) => {\n    state.stepOneErrors[`${stepOneErrors.key}`] = stepOneErrors.value;\n  },\n  setStepTwoErrors: (state, stepTwoErrors) => {\n    state.stepTwoErrors[`${stepTwoErrors.key}`] = stepTwoErrors.value;\n  },\n  setApplications: (state, applications) => (state.applications = applications),\n  setBusinessProfiles: (state, businessProfiles) =>\n    (state.businessProfiles = businessProfiles),\n  setApplicationRequirements: (state, applicationRequirements) =>\n    (state.applicationRequirements = applicationRequirements),\n  setIsUploading: (state, isUploading) => (state.isUploading = isUploading),\n  setRequirements: (state, requirements) => (state.requirements = requirements),\n  setDraftBusiness: (state, draftBusiness) =>\n    (state.draftBusiness = draftBusiness),\n  setPageCount: (state, pageCount) => (state.pageCount = pageCount),\n  setFilterBy: (state, filterBy) => (state.filterBy = filterBy),\n  setIsBusinessEnrollmentSuccess: (state, isBusinessEnrollmentSuccess) =>\n    (state.isBusinessEnrollmentSuccess = isBusinessEnrollmentSuccess),\n  setTypeOfOrganization: (state, typeOfOrganization) =>\n    (state.typeOfOrganization = typeOfOrganization),\n  setCurrentBusinessId: (state, currentBusinessId) =>\n    (state.currentBusinessId = currentBusinessId),\n  setBusinessSearch: (state, businessSearch) =>\n    (state.businessSearch = businessSearch),\n  setBusinessAssessmentMessage: (state, businessAssessmentMessage) =>\n    (state.businessAssessmentMessage = businessAssessmentMessage),\n  setBusinessAssessmentResult: (state, businessAssessmentResult) =>\n    (state.businessAssessmentResult = businessAssessmentResult),\n  setBusinessDeptCanAssess: (state, businessDeptCanAssess) =>\n    (state.businessDeptCanAssess = businessDeptCanAssess),\n  setIsLastBusinessDept: (state, isLastBusinessDept) =>\n    (state.isLastBusinessDept = isLastBusinessDept),\n  setForBusinessAssessmentList: (state, forBusinessAssessmentList) =>\n    (state.forBusinessAssessmentList = forBusinessAssessmentList),\n  setAssessedBusinessList: (state, assessedBusinessList) =>\n    (state.assessedBusinessList = assessedBusinessList),\n  setCurrentSelectedBusiness: (state, currentSelectedBusiness) =>\n    (state.currentSelectedBusiness = currentSelectedBusiness),\n  setIsBusinessAssessment: (state, isBusinessAssessment) =>\n    (state.isBusinessAssessment = isBusinessAssessment),\n  setAssessmentPayload: (state, assessmentPayload) =>\n    (state.assessmentPayload = assessmentPayload),\n  setActivityErrors: (state, activityErrors) =>\n    (state.activityErrors = activityErrors),\n  setShowActionButtons: (state, showActionButtons) =>\n    (state.showActionButtons = showActionButtons),\n};\n\nconst actions = {\n  async getBusinessApplication({ commit, dispatch, getters }, payload) {\n    try {\n      const response = await axios.get(\n        `${baseUrl}/api/business-application?application_number=${payload}`,\n        { headers: { Authorization: `jwt ${getters.authToken}` } }\n      );\n\n      let application = {\n        id: response.data.id,\n        created_at: response.data.created_at,\n        is_draft: response.data.is_draft,\n        is_approve: response.data.is_approve,\n        is_disapprove: response.data.is_disapprove,\n        account_number: response.data.account_number,\n        application_status: response.data.business_application,\n      };\n      await commit(\"setBusinessApplication\", application);\n      await commit(\n        \"setBusinessBasicInformation\",\n        response.data.businessbasicinformation\n      );\n      await commit(\"setBusinessDetails\", response.data.businessdetails);\n      await commit(\"setLessorDetails\", response.data.lessordetails);\n      // let activeBusinessActivities = [];\n\n      // response.data.businessactivity.forEach((item) => {\n      //   if (item.is_active) {\n      //     activeBusinessActivities.push(item);\n      //   }\n      // });\n      await dispatch(\"getBusinessActivityRenewal\", response.data.id);\n      // await commit(\"setBusinessActivities\", activeBusinessActivities);\n      if (response.data.on_renewal) {\n        await dispatch(\"getBusinessRequirementRenewal\", response.data.id);\n        await router.push({ name: \"BusinessRenewal\" });\n      } else {\n        await commit(\n          \"setApplicationRequirements\",\n          response.data.businessapplicationrequirements[0]\n        );\n        await router.push({ name: \"BusinessPermitApplication\" });\n      }\n    } catch (err) {\n      console.log(err);\n      console.log(err.response);\n    }\n  },\n  async businessEnrollment({ commit, dispatch, getters }, payload) {\n    let config = {\n      headers: {\n        \"OneDoc-Token\": oneDocToken,\n        \"Content-Type\": \"application/json\",\n      },\n    };\n    const response = await axios.post(\n      `http://122.55.20.85:8012/lguapi/`,\n      payload,\n      config\n    );\n    if (response.data.Response.Result.businessid) {\n      commit(\"setIsBusinessEnrollmentSuccess\", true);\n    } else {\n      this.$swal({\n        title: \"Failed!\",\n        text: \"No record found.\",\n        icon: \"error\",\n      });\n    }\n  },\n  async approveBusinessApplication({ commit, dispatch, getters }, payload) {\n    try {\n      const response = await axios.put(\n        `${baseUrl}/staff/business-permit-application/`,\n        payload,\n        { headers: { Authorization: `jwt ${getters.authToken}` } }\n      );\n      let action =\n        payload.status == 1\n          ? \"incomplete\"\n          : payload.status == 2\n          ? \"for assessment\"\n          : payload.status == 3\n          ? \"for compliance\"\n          : payload.status == 4\n          ? \"for payment\"\n          : \"\";\n\n      dispatch(\"createPrompt\", {\n        type: \"success\",\n        title: \"Success!\",\n        message: `Application was successfully set to ${action}!`,\n      });\n      router.push({ name: \"Applications\" });\n    } catch (err) {\n      console.log(err);\n      commit(\"setLoading\", false);\n    }\n  },\n  async getAllBusinessApplications({ commit, dispatch, getters }, page = 1) {\n    try {\n      const response = await axios.get(\n        `${baseUrl}/staff/business-permit-application-list/?page=${page}&filter_by=${getters.filterBy}&id=${getters.businessSearch}`,\n        { headers: { Authorization: `jwt ${getters.authToken}` } }\n      );\n      await commit(\"setPageCount\", response.data.total_pages);\n      await commit(\"setApplications\", response.data.results);\n    } catch (err) {\n      console.log(err.response);\n      commit(\"setLoading\", false);\n    }\n  },\n  async getBusinessApplications({ commit, dispatch, getters }, page = 1) {\n    try {\n      const response = await axios.get(\n        `${baseUrl}/api/user-business-application-list/?page=${page}`,\n        { headers: { Authorization: `jwt ${getters.authToken}` } }\n      );\n      await commit(\"setApplications\", response.data.results);\n      await commit(\"setPageCount\", response.data.total_pages);\n    } catch (err) {\n      console.log(err.response);\n      await commit(\"setLoading\", false);\n    }\n  },\n  async getBusinessProfiles({ commit, dispatch, getters }) {\n    try {\n      const response = await axios.get(`${baseUrl}/api/business-profile/`, {\n        headers: { Authorization: `jwt ${getters.authToken}` },\n      });\n      commit(\"setBusinessProfiles\", response.data);\n    } catch (err) {\n      console.log(err.response);\n      commit(\"setLoading\", false);\n    }\n  },\n  async addBusinessApplication({ commit, dispatch, getters }, payload) {\n    try {\n      const response = await axios.post(\n        `${baseUrl}/api/business-permit-application/`,\n        payload,\n        { headers: { Authorization: `jwt ${getters.authToken}` } }\n      );\n      commit(\"setApplicationHasError\", false);\n      commit(\"setBusinessApplication\", response.data);\n      let errors = { key: \"application\", value: {} };\n      commit(\"setStepOneErrors\", errors);\n    } catch (err) {\n      commit(\"setApplicationHasError\", true);\n      let errors = { key: \"application\", value: err.response.data };\n      commit(\"setStepOneErrors\", errors);\n      console.log(err.response);\n      commit(\"setLoading\", false);\n    }\n  },\n  async addBusinessBasicInformation({ commit, getters }, payload) {\n    try {\n      payload.application_number = getters.businessApplication.id;\n      const response = await axios.post(\n        `${baseUrl}/api/business-basic-information/`,\n        payload,\n        { headers: { Authorization: `jwt ${getters.authToken}` } }\n      );\n      commit(\"setBasicInfoHasError\", false);\n      commit(\"setBusinessBasicInformation\", response.data);\n      let errors = { key: \"basic_information\", value: {} };\n      commit(\"setStepOneErrors\", errors);\n    } catch (err) {\n      console.log(err.response);\n      let errors = { key: \"basic_information\", value: err.response.data };\n      commit(\"setStepOneErrors\", errors);\n      commit(\"setBasicInfoHasError\", true);\n      commit(\"setLoading\", false);\n    }\n  },\n  async addBusinessDetails({ commit, getters }, payload) {\n    try {\n      payload.application_number = getters.businessApplication.id;\n      const response = await axios.post(\n        `${baseUrl}/api/business-details/`,\n        payload,\n        { headers: { Authorization: `jwt ${getters.authToken}` } }\n      );\n      commit(\"setDetailsHasError\", false);\n      commit(\"setBusinessDetails\", response.data);\n      let errors = { key: \"business_details\", value: {} };\n      commit(\"setStepTwoErrors\", errors);\n    } catch (err) {\n      let errors = { key: \"business_details\", value: err.response.data };\n      commit(\"setStepTwoErrors\", errors);\n      console.log(err.response);\n      commit(\"setDetailsHasError\", true);\n      commit(\"setLoading\", false);\n    }\n  },\n  async addLessorDetails({ commit, getters }, payload) {\n    try {\n      payload.application_number = getters.businessApplication.id;\n      const response = await axios.post(\n        `${baseUrl}/api/business-lessor-details/`,\n        payload,\n        { headers: { Authorization: `jwt ${getters.authToken}` } }\n      );\n      commit(\"setLessorDetailsHasError\", false);\n      commit(\"setLessorDetails\", response.data);\n      let errors = { key: \"lessor_details\", value: {} };\n      commit(\"setStepTwoErrors\", errors);\n    } catch (err) {\n      let errors = { key: \"lessor_details\", value: err.response.data };\n      commit(\"setStepTwoErrors\", errors);\n      commit(\"setLessorDetailsHasError\", true);\n      console.log(err.response);\n      commit(\"setLoading\", false);\n    }\n  },\n  async addBusinessActivity({ commit, getters, dispatch }, payload) {\n    try {\n      for (let item of payload) {\n        item.capitalization = item.capitalization.toString().replace(/,/g, \"\");\n        item.capitalization = item.capitalization.split(\".\")[0];\n        item.units === \"\" ? (item.units = 1) : (item.units = item.units);\n        if (\n          item.application_number == \"\" ||\n          item.application_number == null ||\n          item.application_number == undefined\n        ) {\n          item.application_number = getters.businessApplication.id;\n        }\n      }\n      const response = await axios.post(\n        `${baseUrl}/api/business-activity/`,\n        payload,\n        { headers: { Authorization: `jwt ${getters.authToken}` } }\n      );\n      await dispatch(\"getBusinessActivity\");\n    } catch (err) {\n      err.response ? console.log(err.response) : console.log(err);\n      commit(\"setLoading\", false);\n    }\n  },\n  async addRenewBusinessActivity({ commit, getters, dispatch }, payload) {\n    try {\n      const response = await axios.post(\n        `${baseUrl}/api/business-activity/`,\n        payload,\n        { headers: { Authorization: `jwt ${getters.authToken}` } }\n      );\n    } catch (err) {\n      err.response ? console.log(err.response) : console.log(err);\n    }\n  },\n  async updateBusinessApplication({ commit, getters }, payload) {\n    try {\n      payload.id = getters.businessApplication.id;\n      const response = await axios.put(\n        `${baseUrl}/api/business-permit-application/`,\n        payload,\n        { headers: { Authorization: `jwt ${getters.authToken}` } }\n      );\n      commit(\"setApplicationHasError\", false);\n      commit(\"setBusinessApplication\", response.data);\n      let errors = { key: \"application\", value: {} };\n      commit(\"setStepOneErrors\", errors);\n    } catch (err) {\n      console.log(err);\n      let errors = { key: \"application\", value: err.response.data };\n      commit(\"setStepOneErrors\", errors);\n      commit(\"setApplicationHasError\", true);\n      console.log(err.response);\n      commit(\"setLoading\", false);\n    }\n  },\n  async updateBusinessBasicInformation({ commit, getters }, payload) {\n    try {\n      payload.id = getters.businessBasicInformation.id;\n      const response = await axios.put(\n        `${baseUrl}/api/business-basic-information/`,\n        payload,\n        { headers: { Authorization: `jwt ${getters.authToken}` } }\n      );\n      commit(\"setBasicInfoHasError\", false);\n      commit(\"setBusinessBasicInformation\", response.data);\n      let errors = { key: \"basic_information\", value: {} };\n      commit(\"setStepOneErrors\", errors);\n    } catch (err) {\n      let errors = { key: \"basic_information\", value: err.response.data };\n      commit(\"setStepOneErrors\", errors);\n      err.response ? console.log(err.response.data) : console.log(err);\n      commit(\"setBasicInfoHasError\", true);\n      commit(\"setLoading\", false);\n    }\n  },\n  async updateBusinessDetails({ commit, getters }, payload) {\n    try {\n      payload.id = getters.businessDetails.id;\n      const response = await axios.put(\n        `${baseUrl}/api/business-details/`,\n        payload,\n        { headers: { Authorization: `jwt ${getters.authToken}` } }\n      );\n      commit(\"setBusinessDetails\", response.data);\n      commit(\"setDetailsHasError\", false);\n      let errors = { key: \"business_details\", value: {} };\n      commit(\"setStepTwoErrors\", errors);\n    } catch (err) {\n      let errors = { key: \"business_details\", value: err.response.data };\n      commit(\"setStepTwoErrors\", errors);\n      commit(\"setDetailsHasError\", true);\n      console.log(err.response);\n      commit(\"setLoading\", false);\n    }\n  },\n  async updateLessorDetails({ commit, getters }, payload) {\n    try {\n      payload.id = getters.lessorDetails.id;\n      const response = await axios.put(\n        `${baseUrl}/api/business-lessor-details/`,\n        payload,\n        { headers: { Authorization: `jwt ${getters.authToken}` } }\n      );\n      commit(\"setLessorDetailsHasError\", false);\n      commit(\"setLessorDetails\", response.data);\n      let errors = { key: \"lessor_details\", value: {} };\n      commit(\"setStepTwoErrors\", errors);\n    } catch (err) {\n      let errors = { key: \"lessor_details\", value: err.response.data };\n      commit(\"setStepTwoErrors\", errors);\n      commit(\"setLessorDetailsHasError\", true);\n      console.log(err.response);\n      commit(\"setLoading\", false);\n    }\n  },\n  async updateBusinessActivity({ commit, getters }, payload) {\n    try {\n      if (payload.length > 0) {\n        let x = 0;\n        payload.forEach((element) => {\n          element.capitalization = element.capitalization\n            .toString()\n            .replace(/,/g, \"\");\n          element.capitalization = element.capitalization.split(\".\")[0];\n          element.id = getters.businessActivities[x].id;\n          x++;\n        });\n      }\n      const response = await axios.put(\n        `${baseUrl}/api/business-activity/`,\n        payload,\n        { headers: { Authorization: `jwt ${getters.authToken}` } }\n      );\n    } catch (err) {\n      console.log(err.response);\n      commit(\"setLoading\", false);\n    }\n  },\n  async getBusinessActivity({ commit, getters }) {\n    try {\n      let payload = { application_number: getters.businessApplication.id };\n      const response = await axios.get(`${baseUrl}/api/business-activity/`, {\n        headers: { Authorization: `jwt ${getters.authToken}` },\n        params: payload,\n      });\n      let activeBusinessActivities = [];\n      console.log(response.data);\n      response.data.forEach((item) => {\n        if (item.is_active || item.remarks_draft) {\n          activeBusinessActivities.push(item);\n        }\n      });\n      commit(\"setBusinessActivities\", activeBusinessActivities);\n    } catch (err) {\n      console.log(err);\n      commit(\"setLoading\", false);\n    }\n  },\n  async addApplicationRequirements({ commit, getters }, payload) {\n    try {\n      const response = await axios.post(\n        `${baseUrl}/api/application-requirements/`,\n        payload,\n        { headers: { Authorization: `jwt ${getters.authToken}` } }\n      );\n      commit(\"setApplicationRequirements\", response.data);\n    } catch (err) {\n      console.log(err.response);\n    }\n  },\n  async uploadRequirements({ commit, getters, dispatch }, payload) {\n    try {\n      commit(\"setLoading\", true);\n      const response = await axios.post(\n        `${baseUrl}/api/file-upload/`,\n        payload,\n        { headers: { Authorization: `jwt ${getters.authToken}` } }\n      );\n      commit(\"setLoading\", false);\n      await dispatch(\"getApplicationRequirements\");\n    } catch (err) {\n      commit(\"setLoading\", false);\n      commit(\"setIsFileUploadFailed\", true);\n      console.log(err.response);\n      dispatch(\"createPrompt\", {\n        type: \"error\",\n        title: \"Failed!\",\n        message: \"Something went wrong! Please try again later.\",\n      });\n    }\n  },\n  async getApplicationRequirements({ commit, getters }) {\n    try {\n      let payload = { id: getters.applicationRequirements.id };\n      const response = await axios.get(\n        `${baseUrl}/api/application-requirements/`,\n        {\n          headers: { Authorization: `jwt ${getters.authToken}` },\n          params: payload,\n        }\n      );\n      response.data.requirements = response.data.requirements.filter(\n        (item) => item.is_active == true\n      );\n      commit(\"setRequirements\", response.data);\n    } catch (err) {\n      console.log(err.response);\n      commit(\"setLoading\", false);\n    }\n  },\n  async assessBusinessApplication({ commit, getters, dispatch }, payload) {\n    try {\n      const response = await axios.post(\n        `${baseUrl}/staff/business-dept-assessment`,\n        payload,\n        { headers: { Authorization: `jwt ${getters.authToken}` } }\n      );\n      commit(\"setBusinessAssessmentMessage\", response.data.message);\n      commit(\"setIsAssessmentHasError\", false);\n      commit(\"setAssessmentPayload\", {});\n    } catch (err) {\n      commit(\"setIsAssessmentHasError\", true);\n      console.log(err);\n      if (err.response) {\n        console.log(err.response);\n        dispatch(\"createPrompt\", {\n          type: \"error\",\n          title: \"Failed!\",\n          message: err.response.data.detail,\n        });\n        router.push({ name: \"Assessments\" });\n      }\n    }\n  },\n  async getBusinessAssessmentResult({ commit, getters }, payload) {\n    try {\n      const response = await axios.get(\n        `${baseUrl}/staff/business-dept-assessment`,\n        {\n          headers: { Authorization: `jwt ${getters.authToken}` },\n          params: payload,\n        }\n      );\n      commit(\"setBusinessAssessmentResult\", response.data);\n    } catch (err) {\n      console.log(err);\n      if (err.response) {\n        console.log(err.response);\n      }\n    }\n  },\n  async checkBusinessDeptCanAssess({ commit, getters }, payload) {\n    try {\n      const response = await axios.get(\n        `${baseUrl}/staff/check-business-dept-if-can-assess`,\n        {\n          headers: { Authorization: `jwt ${getters.authToken}` },\n          params: payload,\n        }\n      );\n      commit(\"setBusinessDeptCanAssess\", response.data.can_assess);\n      commit(\"setIsLastBusinessDept\", response.data.last_department);\n    } catch (err) {\n      console.log(err);\n      if (err.response) {\n        console.log(err.response);\n      }\n    }\n  },\n  async getForBusinessAssessmentList({ commit, getters }, page = 1) {\n    try {\n      const response = await axios.get(\n        `${baseUrl}/staff/for-business-assessment-list?page=${page}`,\n        {\n          headers: { Authorization: `jwt ${getters.authToken}` },\n        }\n      );\n      await commit(\"setForBusinessAssessmentList\", response.data.results);\n      await commit(\"setPageCount\", response.data.total_pages);\n    } catch (err) {\n      console.log(err);\n      if (err.response) {\n        console.log(err.response.data);\n      }\n    }\n  },\n  async getAssessedBusinessList({ commit, getters }, page = 1) {\n    try {\n      const response = await axios.get(\n        `${baseUrl}/staff/assessed-business-application-list?page=${page}`,\n        {\n          headers: { Authorization: `jwt ${getters.authToken}` },\n        }\n      );\n      await commit(\"setAssessedBusinessList\", response.data.results);\n      await commit(\"setPageCount\", response.data.total_pages);\n    } catch (err) {\n      console.log(err);\n      if (err.response) {\n        console.log(err.response.data);\n      }\n    }\n  },\n  async resetBusinessAssessment({ commit, getters }, payload) {\n    try {\n      const response = await axios.put(\n        `${baseUrl}/staff/reset-business-assessment`,\n        payload,\n        {\n          headers: { Authorization: `jwt ${getters.authToken}` },\n        }\n      );\n    } catch (err) {\n      console.log(err);\n      if (err.response) {\n        console.log(err.response.data);\n      }\n    }\n  },\n  async getUserBusinessAssessmentResult({ commit, getters }, payload) {\n    try {\n      const response = await axios.get(\n        `${baseUrl}/api/business-assessment-result/`,\n        {\n          headers: { Authorization: `jwt ${getters.authToken}` },\n          params: payload,\n        }\n      );\n      commit(\"setBusinessAssessmentResult\", response.data);\n    } catch (err) {\n      console.log(err);\n      if (err.response) {\n        console.log(err.response);\n      }\n    }\n  },\n  async getBusinessActivityRenewal({ commit, getters }, payload) {\n    try {\n      const response = await axios.get(\n        `${baseUrl}/api/business-activity-renewal?application_number=${payload}`,\n        {\n          headers: { Authorization: `jwt ${getters.authToken}` },\n        }\n      );\n      await commit(\"setBusinessActivities\", response.data);\n    } catch (err) {\n      console.log(err);\n      if (err.response) {\n        console.log(err.response.data);\n      }\n    }\n  },\n  async getBusinessRequirementRenewal({ commit, getters, dispatch }, payload) {\n    try {\n      const response = await axios.get(\n        `${baseUrl}/api/business-requirement-renewal?application_number=${payload}`,\n        {\n          headers: { Authorization: `jwt ${getters.authToken}` },\n        }\n      );\n      if (response.data.length < 1) {\n        let requirements_payload = {\n          application_id: payload,\n          is_active: false,\n          is_draft: true,\n        };\n        await dispatch(\"addApplicationRequirements\", requirements_payload);\n      } else {\n        await commit(\"setApplicationRequirements\", response.data[0]);\n      }\n    } catch (err) {\n      console.log(err);\n      if (err.response) {\n        console.log(err.response.data);\n      }\n    }\n  },\n  async getBusinessActiveRequirement({ commit, getters }) {\n    try {\n      const response = await axios.get(\n        `${baseUrl}/api/business-active-requirements?application_number=${getters.businessApplication.id}`,\n        {\n          headers: { Authorization: `jwt ${getters.authToken}` },\n        }\n      );\n      console.log(response.data);\n      await commit(\"setApplicationRequirements\", response.data[0]);\n    } catch (err) {\n      console.log(err);\n      if (err.response) {\n        console.log(err.response.data);\n      }\n    }\n  },\n  async renewBusinessApplication({ commit, getters }) {\n    try {\n      const response = await axios.post(\n        `${baseUrl}/api/renew-business-application/`,\n        { application_number: getters.businessApplication.id },\n        {\n          headers: { Authorization: `jwt ${getters.authToken}` },\n        }\n      );\n      console.log(response.data);\n    } catch (err) {\n      console.log(err);\n      if (err.response) {\n        console.log(err.response.data);\n      }\n    }\n  },\n};\n\nexport default {\n  state,\n  getters,\n  actions,\n  mutations,\n};\n"]}]}