{"remainingRequest":"/var/www/html/boss-web/node_modules/babel-loader/lib/index.js!/var/www/html/boss-web/src/store/modules/property.js","dependencies":[{"path":"/var/www/html/boss-web/src/store/modules/property.js","mtime":1651664677521},{"path":"/var/www/html/boss-web/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/var/www/html/boss-web/node_modules/babel-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"sources":["/var/www/html/boss-web/src/store/modules/property.js"],"names":["axios","baseUrl","process","env","VUE_APP_API_URL","oneDocToken","VUE_APP_ONE_DOC_TOKEN","lguLocalEndpoint","VUE_APP_LGU_LOCAL_ENDPOINT","CancelToken","source","router","getDefaultPropertyState","currentPropertyStep","buildingApplication","buildingBasicInformation","buildingDetails","buildingOtherDetails","buildingBasicInfoHasError","buildingDetailsHasError","buildingOtherDetailsHasError","buildingStepOneErrors","basic_information","buildingStepTwoErrors","building_details","building_other_details","buildingApplications","buildingProfiles","buildingApplicationRequirements","buildingRequirements","draftProperty","realPropertyProfiles","applicationRemarks","legalDocuments","technicalDocuments","supplementaryDocuments","designPlans","designSpecs","currentBuildingId","buildingSearch","propertyFilterBy","buildingAssessmentMessage","buildingAssessmentResult","buildingDeptCanAssess","isLastBuildingDept","forBuildingAssessmentList","assessedBuildingList","isBuildingAssessment","isAssessmentHasError","isEvaluation","isFileUploadFailed","currentSelectedProperty","buildingAssessmentPayload","propertyPageCount","propertyPageNum","buildingAssessmentSearch","state","getters","mutations","setCurrentPropertyStep","resetPropertyState","Object","assign","setBuildingApplication","setBuildingBasicInformation","setBuildingDetails","setBuildingOtherDetails","setBuildingBasicInfoHasError","setBuildingDetailsHasError","setBuildingOtherDetailsHasError","buildingSetStepOneErrors","key","value","buildingSetStepTwoErrors","setBuildingApplications","setBuildingProfiles","setDraftProperty","setBuildingApplicationRequirements","setBuildingRequirements","setRealPropertyProfiles","setApplicationRemarks","setLegalDocuments","setTechnicalDocuments","setSupplementaryDocuments","setCurrentBuildingId","setBuildingSearch","setDesignPlans","setDesignSpecs","setPropertyFilterBy","setBuildingAssessmentMessage","setBuildingAssessmentResult","setBuildingDeptCanAssess","setIsLastBuildingDept","setForBuildingAssessmentList","setAssessedBuildingList","setIsBuildingAssessment","setIsAssessmentHasError","setIsEvaluation","setIsFileUploadFailed","setCurrentSelectedProperty","setBuildingAssessmentPayload","setPropertyPageCount","setPropertyPageNum","setBuildingAssessmentSearch","actions","getBuildingApplication","payload","commit","get","headers","Authorization","authToken","response","application","id","data","is_draft","is_approve","is_disapprove","created_at","application_status","series_number","buildingbasicinformation","buildingdetails","buildingotherdetails","buildingapplicationrequirements","push","name","console","log","setBuildingCheckList","post","JSON","parse","updateBuildingCheckList","put","setApplicationStateRemarks","propertyEnrollment","dispatch","config","approveBuildingApplication","action","status","type","title","message","getAllBuildingApplications","page","total_pages","results","getBuildingApplications","getBuildingProfiles","getRealPropertyProfiles","addBuildingApplication","updateBuildingApplication","addBuildingBasicInformation","application_number","errors","updateBuildingBasicInformation","addBuildingDetails","addBuildingOtherDetails","updateBuildingDetails","updateBuildingOtherDetails","addBuildingApplicationRequirements","uploadBuildingRequirements","getBuildingApplicationRequirements","params","buildingrequirements","filter","item","is_active","buildingchecklist","length","map","category","assessBuildingApplication","detail","getBuildingAssessmentResult","checkBuildingDeptCanAssess","can_assess","last_department","getForBuildingAssessmentList","cancel","cancelToken","token","getAssessedBuildingList","resetBuildingAssessment","getUserBuildingAssessmentResult"],"mappings":"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","sourcesContent":["import axios from \"axios\";\nconst baseUrl = process.env.VUE_APP_API_URL;\nconst oneDocToken = process.env.VUE_APP_ONE_DOC_TOKEN;\nconst lguLocalEndpoint = process.env.VUE_APP_LGU_LOCAL_ENDPOINT;\nconst CancelToken = axios.CancelToken;\nlet source = CancelToken.source();\nimport router from \"../../router/index.js\";\nconst getDefaultPropertyState = () => {\n  return {\n    currentPropertyStep: \"1\",\n    buildingApplication: {},\n    buildingBasicInformation: {},\n    buildingDetails: {},\n    buildingOtherDetails: {},\n    buildingBasicInfoHasError: false,\n    buildingDetailsHasError: false,\n    buildingOtherDetailsHasError: false,\n    buildingStepOneErrors: {\n      basic_information: [],\n    },\n    buildingStepTwoErrors: {\n      building_details: [],\n      building_other_details: [],\n    },\n    buildingApplications: [],\n    buildingProfiles: [],\n    buildingApplicationRequirements: {},\n    buildingRequirements: [],\n    draftProperty: false,\n    realPropertyProfiles: [],\n    applicationRemarks: {},\n    legalDocuments: {},\n    technicalDocuments: {},\n    supplementaryDocuments: {},\n    designPlans: {},\n    designSpecs: {},\n    currentBuildingId: 0,\n    buildingSearch: \"\",\n    propertyFilterBy: \"all\",\n    buildingAssessmentMessage: \"\",\n    buildingAssessmentResult: [],\n    buildingDeptCanAssess: false,\n    isLastBuildingDept: false,\n    forBuildingAssessmentList: [],\n    assessedBuildingList: [],\n    isBuildingAssessment: false,\n    isAssessmentHasError: false,\n    isEvaluation: false,\n    isFileUploadFailed: false,\n    currentSelectedProperty: {},\n    buildingAssessmentPayload: {},\n    propertyPageCount: 0,\n    propertyPageNum: 1,\n    buildingAssessmentSearch: \"\",\n  };\n};\n\nconst state = getDefaultPropertyState();\n\nconst getters = {\n  currentPropertyStep: (state) => state.currentPropertyStep,\n  buildingApplication: (state) => state.buildingApplication,\n  buildingBasicInformation: (state) => state.buildingBasicInformation,\n  buildingDetails: (state) => state.buildingDetails,\n  buildingOtherDetails: (state) => state.buildingOtherDetails,\n  buildingBasicInfoHasError: (state) => state.buildingBasicInfoHasError,\n  buildingDetailsHasError: (state) => state.buildingDetailsHasError,\n  buildingOtherDetailsHasError: (state) => state.buildingOtherDetailsHasError,\n  buildingStepOneErrors: (state) => state.buildingStepOneErrors,\n  buildingStepTwoErrors: (state) => state.buildingStepTwoErrors,\n  buildingApplications: (state) => state.buildingApplications,\n  buildingProfiles: (state) => state.buildingProfiles,\n  draftProperty: (state) => state.draftProperty,\n  buildingApplicationRequirements: (state) =>\n    state.buildingApplicationRequirements,\n  buildingRequirements: (state) => state.buildingRequirements,\n  realPropertyProfiles: (state) => state.realPropertyProfiles,\n  applicationRemarks: (state) => state.applicationRemarks,\n  legalDocuments: (state) => state.legalDocuments,\n  technicalDocuments: (state) => state.technicalDocuments,\n  supplementaryDocuments: (state) => state.supplementaryDocuments,\n  designPlans: (state) => state.designPlans,\n  designSpecs: (state) => state.designSpecs,\n  currentBuildingId: (state) => state.currentBuildingId,\n  buildingSearch: (state) => state.buildingSearch,\n  propertyFilterBy: (state) => state.propertyFilterBy,\n  buildingAssessmentMessage: (state) => state.buildingAssessmentMessage,\n  buildingAssessmentResult: (state) => state.buildingAssessmentResult,\n  buildingDeptCanAssess: (state) => state.buildingDeptCanAssess,\n  isLastBuildingDept: (state) => state.isLastBuildingDept,\n  forBuildingAssessmentList: (state) => state.forBuildingAssessmentList,\n  assessedBuildingList: (state) => state.assessedBuildingList,\n  isBuildingAssessment: (state) => state.isBuildingAssessment,\n  isAssessmentHasError: (state) => state.isAssessmentHasError,\n  isEvaluation: (state) => state.isEvaluation,\n  isFileUploadFailed: (state) => state.isFileUploadFailed,\n  currentSelectedProperty: (state) => state.currentSelectedProperty,\n  buildingAssessmentPayload: (state) => state.buildingAssessmentPayload,\n  propertyPageCount: (state) => state.propertyPageCount,\n  propertyPageNum: (state) => state.propertyPageNum,\n  buildingAssessmentSearch: (state) => state.buildingAssessmentSearch,\n};\n\nconst mutations = {\n  setCurrentPropertyStep: (state, currentPropertyStep) =>\n    (state.currentPropertyStep = currentPropertyStep),\n  resetPropertyState: (state) =>\n    Object.assign(state, getDefaultPropertyState()),\n  setBuildingApplication: (state, buildingApplication) =>\n    (state.buildingApplication = buildingApplication),\n  setBuildingBasicInformation: (state, buildingBasicInformation) =>\n    (state.buildingBasicInformation = buildingBasicInformation),\n  setBuildingDetails: (state, buildingDetails) =>\n    (state.buildingDetails = buildingDetails),\n  setBuildingOtherDetails: (state, buildingOtherDetails) =>\n    (state.buildingOtherDetails = buildingOtherDetails),\n  setBuildingBasicInfoHasError: (state, buildingBasicInfoHasError) =>\n    (state.buildingBasicInfoHasError = buildingBasicInfoHasError),\n  setBuildingDetailsHasError: (state, buildingDetailsHasError) =>\n    (state.buildingDetailsHasError = buildingDetailsHasError),\n  setBuildingOtherDetailsHasError: (state, buildingOtherDetailsHasError) =>\n    (state.buildingOtherDetailsHasError = buildingOtherDetailsHasError),\n  buildingSetStepOneErrors: (state, buildingStepOneErrors) => {\n    state.buildingStepOneErrors[`${buildingStepOneErrors.key}`] =\n      buildingStepOneErrors.value;\n  },\n  buildingSetStepTwoErrors: (state, buildingStepTwoErrors) => {\n    state.buildingStepTwoErrors[`${buildingStepTwoErrors.key}`] =\n      buildingStepTwoErrors.value;\n  },\n  setBuildingApplications: (state, buildingApplications) =>\n    (state.buildingApplications = buildingApplications),\n  setBuildingProfiles: (state, buildingProfiles) =>\n    (state.buildingProfiles = buildingProfiles),\n  setDraftProperty: (state, draftProperty) =>\n    (state.draftProperty = draftProperty),\n  setBuildingApplicationRequirements: (\n    state,\n    buildingApplicationRequirements\n  ) =>\n    (state.buildingApplicationRequirements = buildingApplicationRequirements),\n  setBuildingRequirements: (state, buildingRequirements) =>\n    (state.buildingRequirements = buildingRequirements),\n  setRealPropertyProfiles: (state, realPropertyProfiles) =>\n    (state.realPropertyProfiles = realPropertyProfiles),\n  setApplicationRemarks: (state, applicationRemarks) =>\n    (state.applicationRemarks = applicationRemarks),\n  setLegalDocuments: (state, legalDocuments) =>\n    (state.legalDocuments = legalDocuments),\n  setTechnicalDocuments: (state, technicalDocuments) =>\n    (state.technicalDocuments = technicalDocuments),\n  setSupplementaryDocuments: (state, supplementaryDocuments) =>\n    (state.supplementaryDocuments = supplementaryDocuments),\n  setCurrentBuildingId: (state, currentBuildingId) =>\n    (state.currentBuildingId = currentBuildingId),\n  setBuildingSearch: (state, buildingSearch) =>\n    (state.buildingSearch = buildingSearch),\n  setDesignPlans: (state, designPlans) => (state.designPlans = designPlans),\n  setDesignSpecs: (state, designSpecs) => (state.designSpecs = designSpecs),\n  setPropertyFilterBy: (state, propertyFilterBy) =>\n    (state.propertyFilterBy = propertyFilterBy),\n  setBuildingAssessmentMessage: (state, buildingAssessmentMessage) =>\n    (state.buildingAssessmentMessage = buildingAssessmentMessage),\n  setBuildingAssessmentResult: (state, buildingAssessmentResult) =>\n    (state.buildingAssessmentResult = buildingAssessmentResult),\n  setBuildingDeptCanAssess: (state, buildingDeptCanAssess) =>\n    (state.buildingDeptCanAssess = buildingDeptCanAssess),\n  setIsLastBuildingDept: (state, isLastBuildingDept) =>\n    (state.isLastBuildingDept = isLastBuildingDept),\n  setForBuildingAssessmentList: (state, forBuildingAssessmentList) =>\n    (state.forBuildingAssessmentList = forBuildingAssessmentList),\n  setAssessedBuildingList: (state, assessedBuildingList) =>\n    (state.assessedBuildingList = assessedBuildingList),\n  setIsBuildingAssessment: (state, isBuildingAssessment) =>\n    (state.isBuildingAssessment = isBuildingAssessment),\n  setIsAssessmentHasError: (state, isAssessmentHasError) =>\n    (state.isAssessmentHasError = isAssessmentHasError),\n  setIsEvaluation: (state, isEvaluation) => (state.isEvaluation = isEvaluation),\n  setIsFileUploadFailed: (state, isFileUploadFailed) =>\n    (state.isFileUploadFailed = isFileUploadFailed),\n  setCurrentSelectedProperty: (state, currentSelectedProperty) =>\n    (state.currentSelectedProperty = currentSelectedProperty),\n  setBuildingAssessmentPayload: (state, buildingAssessmentPayload) =>\n    (state.buildingAssessmentPayload = buildingAssessmentPayload),\n  setPropertyPageCount: (state, propertyPageCount) =>\n    (state.propertyPageCount = propertyPageCount),\n  setPropertyPageNum: (state, propertyPageNum) =>\n    (state.propertyPageNum = propertyPageNum),\n  setBuildingAssessmentSearch: (state, buildingAssessmentSearch) =>\n    (state.buildingAssessmentSearch = buildingAssessmentSearch),\n};\n\nconst actions = {\n  async getBuildingApplication({ commit, getters }, payload) {\n    try {\n      const response = await axios.get(\n        `${baseUrl}/api/building-application?application_number=${payload}`,\n        { headers: { Authorization: `jwt ${getters.authToken}` } }\n      );\n      let application = {\n        id: response.data.id,\n        is_draft: response.data.is_draft,\n        is_approve: response.data.is_approve,\n        is_disapprove: response.data.is_disapprove,\n        created_at: response.data.created_at,\n        application_status: response.data.application_status,\n        series_number: response.data.series_number,\n      };\n      await commit(\"setBuildingApplication\", application);\n      await commit(\n        \"setBuildingBasicInformation\",\n        response.data.buildingbasicinformation\n      );\n      await commit(\"setBuildingDetails\", response.data.buildingdetails);\n      await commit(\n        \"setBuildingOtherDetails\",\n        response.data.buildingotherdetails\n      );\n      await commit(\n        \"setBuildingApplicationRequirements\",\n        response.data.buildingapplicationrequirements[0]\n      );\n      await router.push({ name: \"BuildingPermitApplication\" });\n    } catch (err) {\n      commit(\"setLoading\", false);\n      console.log(err);\n    }\n  },\n  async setBuildingCheckList({ commit, getters }, payload) {\n    try {\n      const response = await axios.post(\n        `${baseUrl}/api/building-checklist/`,\n        payload,\n        { headers: { Authorization: `jwt ${getters.authToken}` } }\n      );\n      let value = JSON.parse(payload.value);\n    } catch (err) {\n      commit(\"setLoading\", false);\n      console.log(err.response);\n    }\n  },\n  async updateBuildingCheckList({ commit, getters }, payload) {\n    try {\n      const response = await axios.put(\n        `${baseUrl}/api/building-checklist/`,\n        payload,\n        { headers: { Authorization: `jwt ${getters.authToken}` } }\n      );\n    } catch (err) {\n      commit(\"setLoading\", false);\n      console.log(err.response);\n    }\n  },\n  async setApplicationStateRemarks({ commit, getters }, payload) {\n    await commit(\"setApplicationRemarks\", payload);\n  },\n  async propertyEnrollment({ commit, dispatch, getters }, payload) {\n    let config = {\n      headers: {\n        \"OneDoc-Token\": oneDocToken,\n      },\n    };\n    const response = await axios.post(`${lguLocalEndpoint}`, payload, config);\n  },\n  async approveBuildingApplication({ commit, dispatch, getters }, payload) {\n    try {\n      await commit(\"setLoading\", true);\n      const response = await axios.put(\n        `${baseUrl}/staff/building-permit-application/`,\n        payload,\n        { headers: { Authorization: `jwt ${getters.authToken}` } }\n      );\n      // # 0 = For approval, 1 = disapprove / incomplete, 2 = complete, 3 = for inspection, 4 = for compliance, 5 = for payment / approve\n\n      let action =\n        payload.status == 1\n          ? \"incomplete\"\n          : payload.status == 2\n          ? \"for inspection\"\n          : payload.status == 3\n          ? \"for assessment\"\n          : payload.status == 4\n          ? \"for compliance\"\n          : payload.status == 5\n          ? \"for compliance\"\n          : \"for payment\";\n\n      dispatch(\"createPrompt\", {\n        type: \"success\",\n        title: \"Success!\",\n        message: `Application was successfully set to ${action}!`,\n      });\n      await commit(\"setLoading\", false);\n      router.push({ name: \"Applications\" });\n    } catch (err) {\n      console.log(err);\n      commit(\"setLoading\", false);\n    }\n  },\n  async getAllBuildingApplications({ commit, getters, dispatch }, page = 1) {\n    try {\n      const response = await axios.get(\n        `${baseUrl}/staff/building-permit-application-list/?page=${page}&filter_by=${getters.propertyFilterBy}&id=${getters.buildingSearch}`,\n        { headers: { Authorization: `jwt ${getters.authToken}` } }\n      );\n      commit(\"setPropertyPageCount\", response.data.total_pages);\n      commit(\"setBuildingApplications\", response.data.results);\n    } catch (err) {\n      console.log(err.response);\n    }\n  },\n  async getBuildingApplications({ commit, getters, dispatch }, page = 1) {\n    try {\n      const response = await axios.get(\n        `${baseUrl}/api/user-building-application-list/?page=${page}`,\n        { headers: { Authorization: `jwt ${getters.authToken}` } }\n      );\n      commit(\"setBuildingApplications\", response.data.results);\n      commit(\"setPropertyPageCount\", response.data.total_pages);\n    } catch (err) {\n      console.log(err.response);\n    }\n  },\n  async getBuildingProfiles({ commit, getters, dispatch }, payload) {\n    try {\n      const response = await axios.get(`${baseUrl}/api/building-profile/`, {\n        headers: { Authorization: `jwt ${getters.authToken}` },\n      });\n      commit(\"setBuildingProfiles\", response.data);\n    } catch (err) {\n      console.log(err.response);\n    }\n  },\n  async getRealPropertyProfiles({ commit, getters, dispatch }, payload) {\n    try {\n      const response = await axios.get(\n        `${baseUrl}/api/real-property-profile/`,\n        { headers: { Authorization: `jwt ${getters.authToken}` } }\n      );\n      commit(\"setRealPropertyProfiles\", response.data);\n    } catch (err) {\n      console.log(err.response);\n    }\n  },\n  async addBuildingApplication({ commit, getters, dispatch }, payload) {\n    try {\n      const response = await axios.post(\n        `${baseUrl}/api/building-permit-application/`,\n        payload,\n        { headers: { Authorization: `jwt ${getters.authToken}` } }\n      );\n      commit(\"setBuildingApplication\", response.data);\n    } catch (err) {\n      console.log(err.response);\n    }\n  },\n  async updateBuildingApplication({ commit, getters, dispatch }, payload) {\n    try {\n      payload.id = getters.buildingApplication.id;\n      const response = await axios.put(\n        `${baseUrl}/api/building-permit-application/`,\n        payload,\n        { headers: { Authorization: `jwt ${getters.authToken}` } }\n      );\n    } catch (err) {\n      console.log(err.response);\n    }\n  },\n  async addBuildingBasicInformation({ commit, getters }, payload) {\n    try {\n      payload.application_number = getters.buildingApplication.id;\n      const response = await axios.post(\n        `${baseUrl}/api/building-basic-information/`,\n        payload,\n        { headers: { Authorization: `jwt ${getters.authToken}` } }\n      );\n      await commit(\"setBuildingBasicInformation\", response.data);\n      commit(\"setBuildingBasicInfoHasError\", false);\n    } catch (err) {\n      commit(\"setBuildingBasicInfoHasError\", true);\n      let errors = { key: \"basic_information\", value: err.response.data };\n      commit(\"buildingSetStepOneErrors\", errors);\n      console.log(err);\n    }\n  },\n  async updateBuildingBasicInformation({ commit, getters }, payload) {\n    try {\n      payload.id = getters.buildingBasicInformation.id;\n      const response = await axios.put(\n        `${baseUrl}/api/building-basic-information/`,\n        payload,\n        { headers: { Authorization: `jwt ${getters.authToken}` } }\n      );\n      commit(\"setBuildingBasicInformation\", response.data);\n      commit(\"setBuildingBasicInfoHasError\", false);\n    } catch (err) {\n      let errors = { key: \"basic_information\", value: err.response.data };\n      commit(\"buildingSetStepOneErrors\", errors);\n      commit(\"setBuildingBasicInfoHasError\", true);\n      console.log(err.response);\n    }\n  },\n  async addBuildingDetails({ commit, getters }, payload) {\n    try {\n      payload.application_number = getters.buildingApplication.id;\n      const response = await axios.post(\n        `${baseUrl}/api/building-details/`,\n        payload,\n        { headers: { Authorization: `jwt ${getters.authToken}` } }\n      );\n      await commit(\"setBuildingDetailsHasError\", false);\n      await commit(\"setBuildingDetails\", response.data);\n    } catch (err) {\n      let errors = { key: \"building_details\", value: err.response.data };\n      console.log(\"errors\", errors);\n      await commit(\"buildingSetStepTwoErrors\", errors);\n      await commit(\"setBuildingDetailsHasError\", true);\n      console.log(err.response);\n    }\n  },\n  async addBuildingOtherDetails({ commit, getters }, payload) {\n    try {\n      payload.application_number = getters.buildingApplication.id;\n      const response = await axios.post(\n        `${baseUrl}/api/building-other-details/`,\n        payload,\n        { headers: { Authorization: `jwt ${getters.authToken}` } }\n      );\n      await commit(\"setBuildingOtherDetailsHasError\", false);\n      await commit(\"setBuildingOtherDetails\", response.data);\n    } catch (err) {\n      let errors = { key: \"building_other_details\", value: err.response.data };\n      await commit(\"buildingSetStepTwoErrors\", errors);\n      await commit(\"setBuildingOtherDetailsHasError\", true);\n    }\n  },\n  async updateBuildingDetails({ commit, getters }, payload) {\n    try {\n      payload.id = getters.buildingDetails.id;\n      const response = await axios.put(\n        `${baseUrl}/api/building-details/`,\n        payload,\n        { headers: { Authorization: `jwt ${getters.authToken}` } }\n      );\n      commit(\"setBuildingDetails\", response.data);\n      commit(\"setBuildingDetailsHasError\", false);\n    } catch (err) {\n      let errors = { key: \"building_details\", value: err.response.data };\n      commit(\"buildingSetStepTwoErrors\", errors);\n      commit(\"setBuildingDetailsHasError\", true);\n      console.log(err.response);\n    }\n  },\n  async updateBuildingOtherDetails({ commit, getters }, payload) {\n    try {\n      payload.id = getters.buildingOtherDetails.id;\n      const response = await axios.put(\n        `${baseUrl}/api/building-other-details/`,\n        payload,\n        { headers: { Authorization: `jwt ${getters.authToken}` } }\n      );\n      commit(\"setBuildingOtherDetails\", response.data);\n      commit(\"setBuildingOtherDetailsHasError\", false);\n    } catch (err) {\n      let errors = { key: \"building_other_details\", value: err.response.data };\n      commit(\"buildingSetStepTwoErrors\", errors);\n      console.log(err.response);\n      commit(\"setBuildingOtherDetailsHasError\", true);\n    }\n  },\n  async addBuildingApplicationRequirements({ commit, getters }, payload) {\n    try {\n      const response = await axios.post(\n        `${baseUrl}/api/building-application-requirements/`,\n        payload,\n        { headers: { Authorization: `jwt ${getters.authToken}` } }\n      );\n      commit(\"setBuildingApplicationRequirements\", response.data);\n    } catch (err) {\n      console.log(err.response);\n    }\n  },\n  async uploadBuildingRequirements({ commit, getters, dispatch }, payload) {\n    try {\n      commit(\"setLoading\", true);\n      const response = await axios.post(\n        `${baseUrl}/api/building-file-upload/`,\n        payload,\n        { headers: { Authorization: `jwt ${getters.authToken}` } }\n      );\n      await dispatch(\"getBuildingApplicationRequirements\");\n      commit(\"setIsFileUploadFailed\", false);\n      commit(\"setLoading\", false);\n    } catch (err) {\n      err.response ? console.log(err.response) : console.log(err);\n      commit(\"setLoading\", false);\n      commit(\"setIsFileUploadFailed\", true);\n      dispatch(\"createPrompt\", {\n        type: \"error\",\n        title: \"Failed!\",\n        message: \"Something went wrong! Please try again later.\",\n      });\n    }\n  },\n  async getBuildingApplicationRequirements({ commit, getters }) {\n    try {\n      let payload = { id: getters.buildingApplicationRequirements.id };\n      const response = await axios.get(\n        `${baseUrl}/api/building-application-requirements/`,\n        {\n          headers: { Authorization: `jwt ${getters.authToken}` },\n          params: payload,\n        }\n      );\n      response.data.buildingrequirements = response.data.buildingrequirements.filter(\n        (item) => item.is_active == true\n      );\n      commit(\"setBuildingRequirements\", response.data);\n      if (response.data.buildingchecklist.length > 0) {\n        response.data.buildingchecklist.map((item) => {\n          if (item.category === \"legal\") {\n            commit(\"setLegalDocuments\", item);\n          } else if (item.category === \"technical\") {\n            commit(\"setTechnicalDocuments\", item);\n          } else if (item.category === \"supplementary\") {\n            commit(\"setSupplementaryDocuments\", item);\n          } else if (item.category === \"design_plans\") {\n            commit(\"setDesignPlans\", item);\n          } else if (item.category === \"design_specs\") {\n            commit(\"setDesignSpecs\", item);\n          }\n        });\n      }\n    } catch (err) {\n      console.log(err);\n    }\n  },\n  async assessBuildingApplication({ commit, getters, dispatch }, payload) {\n    try {\n      await commit(\"setLoading\", true);\n      const response = await axios.post(\n        `${baseUrl}/staff/building-dept-assessment`,\n        payload,\n        { headers: { Authorization: `jwt ${getters.authToken}` } }\n      );\n      await commit(\"setBuildingAssessmentMessage\", response.data.message);\n      await commit(\"setIsAssessmentHasError\", false);\n      await commit(\"setLoading\", false);\n    } catch (err) {\n      console.log(err);\n      await commit(\"setLoading\", false);\n      if (err.response) {\n        console.log(err.response);\n        await commit(\"setIsAssessmentHasError\", true);\n        dispatch(\"createPrompt\", {\n          type: \"error\",\n          title: \"Failed!\",\n          message: err.response.data.detail,\n        });\n      }\n    }\n  },\n  async getBuildingAssessmentResult({ commit, getters }, payload) {\n    try {\n      const response = await axios.get(\n        `${baseUrl}/staff/building-dept-assessment`,\n        {\n          headers: { Authorization: `jwt ${getters.authToken}` },\n          params: payload,\n        }\n      );\n      commit(\"setBuildingAssessmentResult\", response.data);\n    } catch (err) {\n      console.log(err);\n      if (err.response) {\n        console.log(err.response);\n      }\n    }\n  },\n  async checkBuildingDeptCanAssess({ commit, getters }, payload) {\n    try {\n      const response = await axios.get(\n        `${baseUrl}/staff/check-building-dept-if-can-assess`,\n        {\n          headers: { Authorization: `jwt ${getters.authToken}` },\n          params: payload,\n        }\n      );\n      commit(\"setBuildingDeptCanAssess\", response.data.can_assess);\n      commit(\"setIsLastBuildingDept\", response.data.last_department);\n    } catch (err) {\n      console.log(err);\n      if (err.response) {\n        console.log(err.response);\n      }\n    }\n  },\n  async getForBuildingAssessmentList({ commit, getters }, page = 1) {\n    try {\n      source && source.cancel(\"Operation canceled due to new request.\");\n      source = axios.CancelToken.source();\n      const response = await axios.get(\n        `${baseUrl}/staff/for-building-assessment-list?page=${page}&search=${getters.buildingAssessmentSearch}`,\n        {\n          headers: { Authorization: `jwt ${getters.authToken}` },\n          cancelToken: source.token,\n        }\n      );\n      commit(\"setForBuildingAssessmentList\", response.data.results);\n      commit(\"setPropertyPageCount\", response.data.total_pages);\n    } catch (err) {\n      console.log(err);\n      if (err.response) {\n        console.log(err.response.data);\n      }\n    }\n  },\n  async getAssessedBuildingList({ commit, getters }, page = 1) {\n    try {\n      source && source.cancel(\"Operation canceled due to new request.\");\n      source = axios.CancelToken.source();\n      const response = await axios.get(\n        `${baseUrl}/staff/assessed-building-application-list?page=${page}&search=${getters.buildingAssessmentSearch}`,\n        {\n          headers: { Authorization: `jwt ${getters.authToken}` },\n          cancelToken: source.token,\n        }\n      );\n      commit(\"setAssessedBuildingList\", response.data.results);\n      commit(\"setPropertyPageCount\", response.data.total_pages);\n    } catch (err) {\n      console.log(err);\n      if (err.response) {\n        console.log(err.response.data);\n      }\n    }\n  },\n  async resetBuildingAssessment({ commit, getters }, payload) {\n    try {\n      const response = await axios.put(\n        `${baseUrl}/staff/reset-building-assessment`,\n        payload,\n        {\n          headers: { Authorization: `jwt ${getters.authToken}` },\n        }\n      );\n    } catch (err) {\n      console.log(err);\n      if (err.response) {\n        console.log(err.response.data);\n      }\n    }\n  },\n  async getUserBuildingAssessmentResult({ commit, getters }, payload) {\n    try {\n      const response = await axios.get(\n        `${baseUrl}/api/building-assessment-result/`,\n        {\n          headers: { Authorization: `jwt ${getters.authToken}` },\n          params: payload,\n        }\n      );\n      commit(\"setBuildingAssessmentResult\", response.data);\n    } catch (err) {\n      console.log(err);\n      if (err.response) {\n        console.log(err.response);\n      }\n    }\n  },\n};\n\nexport default {\n  state,\n  getters,\n  actions,\n  mutations,\n};\n"]}]}