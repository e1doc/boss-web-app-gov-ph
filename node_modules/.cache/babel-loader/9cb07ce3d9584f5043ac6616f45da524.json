{"remainingRequest":"/var/www/html/boss-web/node_modules/babel-loader/lib/index.js!/var/www/html/boss-web/src/store/modules/soa.js","dependencies":[{"path":"/var/www/html/boss-web/src/store/modules/soa.js","mtime":1642603359155},{"path":"/var/www/html/boss-web/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/var/www/html/boss-web/node_modules/babel-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"sources":["/var/www/html/boss-web/src/store/modules/soa.js"],"names":["axios","baseUrl","process","env","VUE_APP_API_URL","router","getDefaultSoaState","soaList","soaFilter","currentSoa","currentSoaObj","generatedBill","currentSelectedBill","soaSearch","currentSoaType","paymentDetails","FormData","isFileUploaded","bankTransactions","currentBankTransaction","transactionSearch","transactionPageCount","isDelinquentPayment","state","getters","landBankTransactions","currentLandBankTransaction","mutations","setSoaList","setSoaFilter","setCurrentSoa","setCurrentSoaObj","resetSoaState","Object","assign","setGeneratedBill","setCurrentSelectedBill","setSoaSearch","setCurrentSoaType","setPaymentDetails","setIsFileUploaded","setBankTransactions","setCurrentBankTransaction","setTransactionSearch","setTransactionPageCount","setIsDelinquentPayment","actions","storeGeneratedBill","payload","commit","getSoaList","page","get","headers","Authorization","authToken","response","data","total_pages","results","console","log","createSoa","dispatch","post","id","type","application_type","push","path","title","message","getAdminSoa","addPaymentDetails","html","name","getAllUserBankTransactions","currentType","getAllBankTransactions","filter","verifyBankTransaction","put","getAdminSoaList","getAllUserLandBankTransactions","getAllLandBankTransactions","verifySoa","map","item","is_verified","getSoaDetails","token","soa","business_application","building_application","err"],"mappings":"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","sourcesContent":["import axios from \"axios\";\nconst baseUrl = process.env.VUE_APP_API_URL;\nimport router from \"../../router/index.js\";\nconst getDefaultSoaState = () => {\n  return {\n    soaList: [],\n    soaFilter: \"business\",\n    currentSoa: {},\n    currentSoaObj: {},\n    generatedBill: {},\n    currentSelectedBill: {},\n    soaSearch: \"\",\n    currentSoaType: \"\",\n    paymentDetails: new FormData(),\n    isFileUploaded: false,\n    bankTransactions: [],\n    currentBankTransaction: {},\n    transactionSearch: \"\",\n    transactionPageCount: 0,\n    isDelinquentPayment: false,\n    soaSearch: \"\",\n    landBankTransactions: [],\n    currentLandBankTransaction: {},\n  };\n};\n\nconst state = getDefaultSoaState();\n\nconst getters = {\n  soaList: (state) => state.soaList,\n  soaFilter: (state) => state.soaFilter,\n  currentSoa: (state) => state.currentSoa,\n  currentSoaObj: (state) => state.currentSoaObj,\n  generatedBill: (state) => state.generatedBill,\n  currentSelectedBill: (state) => state.currentSelectedBill,\n  soaSearch: (state) => state.soaSearch,\n  currentSoaType: (state) => state.currentSoaType,\n  paymentDetails: (state) => state.paymentDetails,\n  isFileUploaded: (state) => state.isFileUploaded,\n  bankTransactions: (state) => state.bankTransactions,\n  currentBankTransaction: (state) => state.currentBankTransaction,\n  transactionSearch: (state) => state.transactionSearch,\n  transactionPageCount: (state) => state.transactionPageCount,\n  isDelinquentPayment: (state) => state.isDelinquentPayment,\n  soaSearch: (state) => state.soaSearch,\n  landBankTransactions: (state) => state.landBankTransactions,\n  currentLandBankTransaction: (state) => state.currentLandBankTransaction,\n};\n\nconst mutations = {\n  setSoaList: (state, soaList) => (state.soaList = soaList),\n  setSoaFilter: (state, soaFilter) => (state.soaFilter = soaFilter),\n  setCurrentSoa: (state, currentSoa) => (state.currentSoa = currentSoa),\n  setCurrentSoaObj: (state, currentSoaObj) =>\n    (state.currentSoaObj = currentSoaObj),\n  resetSoaState: (state) => Object.assign(state, getDefaultSoaState()),\n  setGeneratedBill: (state, generatedBill) =>\n    (state.generatedBill = generatedBill),\n  setCurrentSelectedBill: (state, currentSelectedBill) =>\n    (state.currentSelectedBill = currentSelectedBill),\n  setSoaSearch: (state, soaSearch) => (state.soaSearch = soaSearch),\n  setCurrentSoaType: (state, currentSoaType) =>\n    (state.currentSoaType = currentSoaType),\n  setPaymentDetails: (state, paymentDetails) =>\n    (state.paymentDetails = paymentDetails),\n  setIsFileUploaded: (state, isFileUploaded) =>\n    (state.isFileUploaded = isFileUploaded),\n  setBankTransactions: (state, bankTransactions) =>\n    (state.bankTransactions = bankTransactions),\n  setCurrentBankTransaction: (state, currentBankTransaction) =>\n    (state.currentBankTransaction = currentBankTransaction),\n  setTransactionSearch: (state, transactionSearch) =>\n    (state.transactionSearch = transactionSearch),\n  setTransactionPageCount: (state, transactionPageCount) =>\n    (state.transactionPageCount = transactionPageCount),\n  setIsDelinquentPayment: (state, isDelinquentPayment) =>\n    (state.isDelinquentPayment = isDelinquentPayment),\n  setSoaSearch: (state, soaSearch) => (state.soaSearch = soaSearch),\n  setLandBankTransactions: (state, landBankTransactions) =>\n    (state.landBankTransactions = landBankTransactions),\n  setCurrentLandBankTransaction: (state, currentLandBankTransaction) =>\n    (state.currentLandBankTransaction = currentLandBankTransaction),\n};\n\nconst actions = {\n  async storeGeneratedBill({ commit }, payload) {\n    commit(\"setGeneratedBill\", payload);\n  },\n  async getSoaList({ commit, getters }, page = 1) {\n    try {\n      const response = await axios.get(\n        `${baseUrl}/api/soa-list/?filter=${getters.soaFilter}&page=${page}`,\n        {\n          headers: { Authorization: `jwt ${getters.authToken}` },\n        }\n      );\n      commit(\"setPageCount\", response.data.total_pages);\n      commit(\"setSoaList\", response.data.results);\n    } catch (error) {\n      console.log(error);\n    }\n  },\n  async createSoa({ commit, getters, dispatch }, payload) {\n    try {\n      commit(\"setLoading\", true);\n      const response = await axios.post(`${baseUrl}/api/user-soa/`, payload, {\n        headers: { Authorization: `jwt ${getters.authToken}` },\n      });\n      await commit(\"setCurrentSoa\", {\n        id: response.data.data.id,\n        type: response.data.data.application_type,\n      });\n      await commit(\"setCurrentSoaObj\", response.data.data);\n      await commit(\"setAppointmentAction\", \"add\");\n      await commit(\"setLoading\", false);\n      await router.push({ path: \"payment\" });\n    } catch (err) {\n      commit(\"setLoading\", false);\n      dispatch(\"createPrompt\", {\n        type: \"error\",\n        title: \"Failed\",\n        message: \"Something went wrong!\",\n      });\n      err.response ? console.log(err.response) : console.log(err);\n    }\n  },\n  async getAdminSoa({ commit, getters }, page = 1) {\n    try {\n      const response = await axios.get(\n        `${baseUrl}/staff/soa-list?page=${page}&search=${getters.soaSearch}`\n      );\n    } catch (err) {\n      err.response ? console.log(err.response) : console.log(err);\n    }\n  },\n  async addPaymentDetails({ commit, getters, dispatch }) {\n    try {\n      const response = await axios.post(\n        `${baseUrl}/api/bank-transaction/`,\n        getters.paymentDetails,\n        {\n          headers: { Authorization: `jwt ${getters.authToken}` },\n        }\n      );\n      dispatch(\"createPrompt\", {\n        type: \"success\",\n        title: \"Success!\",\n        html:\n          'Thank you for providing us your information. Your Payment via other Banks is now submitted and is subjected for verification. You can check the status of your submitted payment at \"Payment Transaction\" screen. Once validated we will send a soft copy of official receipt to your account.  <br> <br> You can contact the Treasury Department if payment has not been reflected after Five (5) working days.',\n      });\n      await commit(\"setPaymentDetails\", new FormData());\n      await router.push({ name: \"Profile\" });\n    } catch (err) {\n      err.response ? console.log(err.response) : console.log(err);\n      dispatch(\"createPrompt\", {\n        type: \"error\",\n        title: \"Failed\",\n        message: \"Something went wrong. Please try again later.\",\n      });\n    }\n  },\n  async getAllUserBankTransactions({ commit, getters }, { page = 1 }) {\n    try {\n      await commit(\"setLoading\", true);\n      const response = await axios.get(\n        `${baseUrl}/api/bank-transaction-list?page=${page}&type=${getters.currentType}`,\n        { headers: { Authorization: `jwt ${getters.authToken}` } }\n      );\n      await commit(\"setBankTransactions\", response.data.results);\n      await commit(\"setTransactionPageCount\", response.data.total_pages);\n      await commit(\"setLoading\", false);\n    } catch (err) {\n      await commit(\"setLoading\", false);\n      err.response ? console.log(err.response) : console.log(err);\n    }\n  },\n  async getAllBankTransactions(\n    { commit, getters },\n    { page = 1, filter = \"all\" }\n  ) {\n    try {\n      await commit(\"setLoading\", true);\n      const response = await axios.get(\n        `${baseUrl}/staff/bank-transaction-list?page=${page}&type=${getters.currentType}&filter=${filter}&search=${getters.transactionSearch}`,\n        { headers: { Authorization: `jwt ${getters.authToken}` } }\n      );\n      await commit(\"setBankTransactions\", response.data.results);\n      await commit(\"setTransactionPageCount\", response.data.total_pages);\n      await commit(\"setLoading\", false);\n    } catch (err) {\n      await commit(\"setLoading\", false);\n      err.response ? console.log(err.response) : console.log(err);\n    }\n  },\n  async verifyBankTransaction({ commit, getters, dispatch }, payload) {\n    try {\n      await commit(\"setLoading\", true);\n      const response = await axios.put(\n        `${baseUrl}/staff/bank-transaction/`,\n        payload,\n        { headers: { Authorization: `jwt ${getters.authToken}` } }\n      );\n      await commit(\"setCurrentBankTransaction\", {});\n      await dispatch(\"getAllBankTransactions\", { page: 1 });\n      await commit(\"setLoading\", false);\n      dispatch(\"createPrompt\", {\n        type: \"success\",\n        title: \"Success!\",\n        message: \"Transaction was verified successfully.\",\n      });\n    } catch (err) {\n      await commit(\"setLoading\", false);\n      dispatch(\"createPrompt\", {\n        type: \"error\",\n        title: \"Failed\",\n        message: \"Something went wrong. Please try again later.\",\n      });\n      err.response ? console.log(err.response) : console.log(err);\n    }\n  },\n  async getAdminSoaList({ commit, getters }, page = 1) {\n    try {\n      const response = await axios.get(\n        `${baseUrl}/staff/soa-list/?filter=${getters.soaFilter}&page=${page}&search=${getters.soaSearch}`,\n        {\n          headers: { Authorization: `jwt ${getters.authToken}` },\n        }\n      );\n      commit(\"setPageCount\", response.data.total_pages);\n      commit(\"setSoaList\", response.data.results);\n    } catch (error) {\n      console.log(error);\n    }\n  },\n  async getAllUserLandBankTransactions({ commit, getters }, { page = 1 }) {\n    try {\n      const response = await axios.get(\n        `${baseUrl}/api/landbank-transaction-list/?page=${page}&filter=${getters.currentType}`,\n        {\n          headers: { Authorization: `jwt ${getters.authToken}` },\n        }\n      );\n      await commit(\"setPageCount\", response.data.total_pages);\n      await commit(\"setLandBankTransactions\", response.data.results);\n    } catch (err) {\n      err.response ? console.log(err.response) : console.log(err);\n    }\n  },\n  async getAllLandBankTransactions({ commit, getters }, { page = 1 }) {\n    try {\n      const response = await axios.get(\n        `${baseUrl}/staff/landbank-transaction-list/?page=${page}&filter=${getters.currentType}&search=${getters.transactionSearch}`,\n        {\n          headers: { Authorization: `jwt ${getters.authToken}` },\n        }\n      );\n      await commit(\"setPageCount\", response.data.total_pages);\n      await commit(\"setLandBankTransactions\", response.data.results);\n    } catch (err) {\n      err.response ? console.log(err.response) : console.log(err);\n    }\n  },\n  async verifySoa({ commit, getters, dispatch }, payload) {\n    try {\n      await commit(\"setLoading\", true);\n      const response = await axios.put(\n        `${baseUrl}/staff/verify-soa-payment/`,\n        payload,\n        { headers: { Authorization: `jwt ${getters.authToken}` } }\n      );\n      let soaList = getters.soaList;\n      soaList = soaList.map((item) => {\n        if (item.id === payload.id) {\n          item.is_verified = true;\n        }\n        return item;\n      });\n      await commit(\"setSoaList\", soaList);\n      dispatch(\"createPrompt\", {\n        type: \"success\",\n        title: \"Success!\",\n        message: response.data.message,\n      });\n      await commit(\"setLoading\", false);\n    } catch (err) {\n      await commit(\"setLoading\", false);\n      dispatch(\"createPrompt\", {\n        type: \"error\",\n        title: \"Failed!\",\n        message: \"Something went wrong. Please try again later.\",\n      });\n      err.response ? console.log(err.response) : console.log(err);\n    }\n  },\n\n  async getSoaDetails({ commit, dispatch }, payload) {\n    try {\n      await commit(\"setLoading\", true);\n      const response = await axios.get(\n        `${baseUrl}/api/download-invoice/?id=${payload.id}`,\n        {\n          headers: { Authorization: `jwt ${payload.token}` },\n        }\n      );\n\n      const soa = response.data;\n\n      await commit(\"setCurrentSoaType\", payload.type);\n      await commit(\"setCurrentSoa\", payload);\n      await commit(\"setCurrentSoaObj\", soa);\n      await commit(\"setAppointmentAction\", \"add\");\n      if (payload.type === \"business\") {\n        await commit(\"setCurrentSelectedBusiness\", soa.business_application);\n      } else {\n        await commit(\"setCurrentSelectedProperty\", soa.building_application);\n      }\n      await commit(\"setLoading\", false);\n    } catch (error) {\n      await commit(\"setLoading\", false);\n      dispatch(\"createPrompt\", {\n        type: \"error\",\n        title: \"Failed!\",\n        message: \"Something went wrong. Please try again later.\",\n      });\n      err.response ? console.log(err.response) : console.log(err);\n    }\n  },\n};\n\nexport default {\n  state,\n  getters,\n  actions,\n  mutations,\n};\n"]}]}