{"remainingRequest":"/var/www/html/boss-web/node_modules/babel-loader/lib/index.js!/var/www/html/boss-web/src/store/modules/business.js","dependencies":[{"path":"/var/www/html/boss-web/src/store/modules/business.js","mtime":1651664677521},{"path":"/var/www/html/boss-web/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/var/www/html/boss-web/node_modules/babel-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"sources":["/var/www/html/boss-web/src/store/modules/business.js"],"names":["axios","baseUrl","process","env","VUE_APP_API_URL","oneDocToken","VUE_APP_ONE_DOC_TOKEN","lguLocalEndpoint","VUE_APP_LGU_LOCAL_ENDPOINT","CancelToken","source","router","getDefaultBusinessState","currentBusinessStep","businessApplication","businessBasicInformation","businessDetails","lessorDetails","businessActivities","applicationHasError","basicInfoHasError","detailsHasError","lessorDetailsHasError","activitiesHasError","stepOneErrors","payment_details","application","basic_information","stepTwoErrors","business_details","lessor_details","applications","businessProfiles","applicationRequirements","requirements","isUploading","draftBusiness","pageCount","filterBy","isBusinessEnrollmentSuccess","typeOfOrganization","currentBusinessId","businessSearch","businessAssessmentMessage","businessAssessmentResult","businessDeptCanAssess","isLastBusinessDept","forBusinessAssessmentList","assessedBusinessList","currentSelectedBusiness","isBusinessAssessment","assessmentPayload","activityErrors","showActionButtons","businessPageNum","businessPermits","businessAssessmentSearch","state","getters","mutations","setCurrentBusinessStep","resetBusinessState","Object","assign","setBusinessApplication","setBusinessBasicInformation","setBusinessDetails","setLessorDetails","setBusinessActivities","setApplicationHasError","setBasicInfoHasError","setDetailsHasError","setLessorDetailsHasError","setStepOneErrors","key","value","setStepTwoErrors","setApplications","setBusinessProfiles","setApplicationRequirements","setIsUploading","setRequirements","setDraftBusiness","setPageCount","setFilterBy","setIsBusinessEnrollmentSuccess","setTypeOfOrganization","setCurrentBusinessId","setBusinessSearch","setBusinessAssessmentMessage","setBusinessAssessmentResult","setBusinessDeptCanAssess","setIsLastBusinessDept","setForBusinessAssessmentList","setAssessedBusinessList","setCurrentSelectedBusiness","setIsBusinessAssessment","setAssessmentPayload","setActivityErrors","setShowActionButtons","setBusinessPageNum","setBusinessPermits","setBusinessAssessmentSearch","actions","getBusinessApplication","payload","commit","dispatch","get","headers","Authorization","authToken","response","id","data","created_at","is_draft","is_approve","is_disapprove","account_number","application_status","business_application","businessbasicinformation","businessdetails","lessordetails","on_renewal","push","name","businessapplicationrequirements","console","log","businessEnrollment","config","post","Status","$swal","title","text","Message","icon","approveBusinessApplication","put","action","status","type","message","getAllBusinessApplications","page","total_pages","results","getBusinessApplications","getBusinessProfiles","addBusinessApplication","errors","addBusinessBasicInformation","application_number","addBusinessDetails","addLessorDetails","addBusinessActivity","item","capitalization","toString","replace","split","units","undefined","addRenewBusinessActivity","updateBusinessApplication","updateBusinessBasicInformation","updateBusinessDetails","updateLessorDetails","updateBusinessActivity","length","x","forEach","element","getBusinessActivity","params","activeBusinessActivities","is_active","remarks_draft","addApplicationRequirements","uploadRequirements","getApplicationRequirements","filter","assessBusinessApplication","detail","getBusinessAssessmentResult","checkBusinessDeptCanAssess","can_assess","last_department","getForBusinessAssessmentList","cancel","cancelToken","token","getAssessedBusinessList","resetBusinessAssessment","getUserBusinessAssessmentResult","getBusinessActivityRenewal","getBusinessRequirementRenewal","requirements_payload","application_id","getBusinessActiveRequirement","renewBusinessApplication","uploadBusinessPermit","getBusinessPermit"],"mappings":"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","sourcesContent":["import axios from \"axios\";\nconst baseUrl = process.env.VUE_APP_API_URL;\nconst oneDocToken = process.env.VUE_APP_ONE_DOC_TOKEN;\nconst lguLocalEndpoint = process.env.VUE_APP_LGU_LOCAL_ENDPOINT;\nconst CancelToken = axios.CancelToken;\nlet source = CancelToken.source();\nimport router from \"../../router/index.js\";\nconst getDefaultBusinessState = () => {\n  return {\n    currentBusinessStep: \"1\",\n    businessApplication: {},\n    businessBasicInformation: {},\n    businessDetails: {},\n    lessorDetails: {},\n    businessActivities: [],\n    applicationHasError: false,\n    basicInfoHasError: false,\n    detailsHasError: false,\n    lessorDetailsHasError: false,\n    activitiesHasError: false,\n    stepOneErrors: {\n      payment_details: [],\n      application: [],\n      basic_information: [],\n    },\n    stepTwoErrors: {\n      business_details: [],\n      lessor_details: [],\n    },\n    applications: [],\n    businessProfiles: [],\n    applicationRequirements: {},\n    requirements: [],\n    isUploading: false,\n    draftBusiness: false,\n    pageCount: 0,\n    filterBy: \"all\",\n    isBusinessEnrollmentSuccess: false,\n    typeOfOrganization: \"\",\n    currentBusinessId: 0,\n    businessSearch: \"\",\n    businessAssessmentMessage: \"\",\n    businessAssessmentResult: [],\n    businessDeptCanAssess: false,\n    isLastBusinessDept: false,\n    forBusinessAssessmentList: [],\n    assessedBusinessList: [],\n    currentSelectedBusiness: {},\n    isBusinessAssessment: false,\n    assessmentPayload: {},\n    activityErrors: {},\n    showActionButtons: true,\n    businessPageNum: 1,\n    businessPermits: [],\n    businessAssessmentSearch: \"\",\n  };\n};\n\nconst state = getDefaultBusinessState();\n\nconst getters = {\n  currentBusinessStep: (state) => state.currentBusinessStep,\n  businessApplication: (state) => state.businessApplication,\n  businessBasicInformation: (state) => state.businessBasicInformation,\n  businessDetails: (state) => state.businessDetails,\n  lessorDetails: (state) => state.lessorDetails,\n  businessActivities: (state) => state.businessActivities,\n  applicationHasError: (state) => state.applicationHasError,\n  basicInfoHasError: (state) => state.basicInfoHasError,\n  detailsHasError: (state) => state.detailsHasError,\n  lessorDetailsHasError: (state) => state.lessorDetailsHasError,\n  activitiesHasError: (state) => state.activitiesHasError,\n  stepOneErrors: (state) => state.stepOneErrors,\n  stepTwoErrors: (state) => state.stepTwoErrors,\n  applications: (state) => state.applications,\n  businessProfiles: (state) => state.businessProfiles,\n  applicationRequirements: (state) => state.applicationRequirements,\n  isUploading: (state) => state.isUploading,\n  requirements: (state) => state.requirements,\n  draftBusiness: (state) => state.draftBusiness,\n  pageCount: (state) => state.pageCount,\n  filterBy: (state) => state.filterBy,\n  isBusinessEnrollmentSuccess: (state) => state.isBusinessEnrollmentSuccess,\n  typeOfOrganization: (state) => state.typeOfOrganization,\n  currentBusinessId: (state) => state.currentBusinessId,\n  businessSearch: (state) => state.businessSearch,\n  businessAssessmentMessage: (state) => state.businessAssessmentMessage,\n  businessAssessmentResult: (state) => state.businessAssessmentResult,\n  businessDeptCanAssess: (state) => state.businessDeptCanAssess,\n  isLastBusinessDept: (state) => state.isLastBusinessDept,\n  forBusinessAssessmentList: (state) => state.forBusinessAssessmentList,\n  assessedBusinessList: (state) => state.assessedBusinessList,\n  currentSelectedBusiness: (state) => state.currentSelectedBusiness,\n  isBusinessAssessment: (state) => state.isBusinessAssessment,\n  assessmentPayload: (state) => state.assessmentPayload,\n  activityErrors: (state) => state.activityErrors,\n  showActionButtons: (state) => state.showActionButtons,\n  businessPageNum: (state) => state.businessPageNum,\n  businessPermits: (state) => state.businessPermits,\n  businessAssessmentSearch: (state) => state.businessAssessmentSearch,\n};\n\nconst mutations = {\n  setCurrentBusinessStep: (state, currentBusinessStep) =>\n    (state.currentBusinessStep = currentBusinessStep),\n  resetBusinessState: (state) =>\n    Object.assign(state, getDefaultBusinessState()),\n  setBusinessApplication: (state, businessApplication) =>\n    (state.businessApplication = businessApplication),\n  setBusinessBasicInformation: (state, businessBasicInformation) =>\n    (state.businessBasicInformation = businessBasicInformation),\n  setBusinessDetails: (state, businessDetails) =>\n    (state.businessDetails = businessDetails),\n  setLessorDetails: (state, lessorDetails) =>\n    (state.lessorDetails = lessorDetails),\n  setBusinessActivities: (state, businessActivities) =>\n    (state.businessActivities = businessActivities),\n  setApplicationHasError: (state, applicationHasError) =>\n    (state.applicationHasError = applicationHasError),\n  setBasicInfoHasError: (state, basicInfoHasError) =>\n    (state.basicInfoHasError = basicInfoHasError),\n  setDetailsHasError: (state, detailsHasError) =>\n    (state.detailsHasError = detailsHasError),\n  setLessorDetailsHasError: (state, lessorDetailsHasError) =>\n    (state.lessorDetailsHasError = lessorDetailsHasError),\n  setStepOneErrors: (state, stepOneErrors) => {\n    state.stepOneErrors[`${stepOneErrors.key}`] = stepOneErrors.value;\n  },\n  setStepTwoErrors: (state, stepTwoErrors) => {\n    state.stepTwoErrors[`${stepTwoErrors.key}`] = stepTwoErrors.value;\n  },\n  setApplications: (state, applications) => (state.applications = applications),\n  setBusinessProfiles: (state, businessProfiles) =>\n    (state.businessProfiles = businessProfiles),\n  setApplicationRequirements: (state, applicationRequirements) =>\n    (state.applicationRequirements = applicationRequirements),\n  setIsUploading: (state, isUploading) => (state.isUploading = isUploading),\n  setRequirements: (state, requirements) => (state.requirements = requirements),\n  setDraftBusiness: (state, draftBusiness) =>\n    (state.draftBusiness = draftBusiness),\n  setPageCount: (state, pageCount) => (state.pageCount = pageCount),\n  setFilterBy: (state, filterBy) => (state.filterBy = filterBy),\n  setIsBusinessEnrollmentSuccess: (state, isBusinessEnrollmentSuccess) =>\n    (state.isBusinessEnrollmentSuccess = isBusinessEnrollmentSuccess),\n  setTypeOfOrganization: (state, typeOfOrganization) =>\n    (state.typeOfOrganization = typeOfOrganization),\n  setCurrentBusinessId: (state, currentBusinessId) =>\n    (state.currentBusinessId = currentBusinessId),\n  setBusinessSearch: (state, businessSearch) =>\n    (state.businessSearch = businessSearch),\n  setBusinessAssessmentMessage: (state, businessAssessmentMessage) =>\n    (state.businessAssessmentMessage = businessAssessmentMessage),\n  setBusinessAssessmentResult: (state, businessAssessmentResult) =>\n    (state.businessAssessmentResult = businessAssessmentResult),\n  setBusinessDeptCanAssess: (state, businessDeptCanAssess) =>\n    (state.businessDeptCanAssess = businessDeptCanAssess),\n  setIsLastBusinessDept: (state, isLastBusinessDept) =>\n    (state.isLastBusinessDept = isLastBusinessDept),\n  setForBusinessAssessmentList: (state, forBusinessAssessmentList) =>\n    (state.forBusinessAssessmentList = forBusinessAssessmentList),\n  setAssessedBusinessList: (state, assessedBusinessList) =>\n    (state.assessedBusinessList = assessedBusinessList),\n  setCurrentSelectedBusiness: (state, currentSelectedBusiness) =>\n    (state.currentSelectedBusiness = currentSelectedBusiness),\n  setIsBusinessAssessment: (state, isBusinessAssessment) =>\n    (state.isBusinessAssessment = isBusinessAssessment),\n  setAssessmentPayload: (state, assessmentPayload) =>\n    (state.assessmentPayload = assessmentPayload),\n  setActivityErrors: (state, activityErrors) =>\n    (state.activityErrors = activityErrors),\n  setShowActionButtons: (state, showActionButtons) =>\n    (state.showActionButtons = showActionButtons),\n  setBusinessPageNum: (state, businessPageNum) =>\n    (state.businessPageNum = businessPageNum),\n  setBusinessPermits: (state, businessPermits) =>\n    (state.businessPermits = businessPermits),\n  setBusinessAssessmentSearch: (state, businessAssessmentSearch) =>\n    (state.businessAssessmentSearch = businessAssessmentSearch),\n};\n\nconst actions = {\n  async getBusinessApplication({ commit, dispatch, getters }, payload) {\n    try {\n      const response = await axios.get(\n        `${baseUrl}/api/business-application?application_number=${payload}`,\n        { headers: { Authorization: `jwt ${getters.authToken}` } }\n      );\n\n      let application = {\n        id: response.data.id,\n        created_at: response.data.created_at,\n        is_draft: response.data.is_draft,\n        is_approve: response.data.is_approve,\n        is_disapprove: response.data.is_disapprove,\n        account_number: response.data.account_number,\n        application_status: response.data.business_application,\n      };\n      await commit(\"setBusinessApplication\", application);\n      await commit(\n        \"setBusinessBasicInformation\",\n        response.data.businessbasicinformation\n      );\n      await commit(\"setBusinessDetails\", response.data.businessdetails);\n      await commit(\"setLessorDetails\", response.data.lessordetails);\n      // let activeBusinessActivities = [];\n\n      // response.data.businessactivity.forEach((item) => {\n      //   if (item.is_active) {\n      //     activeBusinessActivities.push(item);\n      //   }\n      // });\n      await dispatch(\"getBusinessActivityRenewal\", response.data.id);\n      // await commit(\"setBusinessActivities\", activeBusinessActivities);\n      if (response.data.on_renewal) {\n        await dispatch(\"getBusinessRequirementRenewal\", response.data.id);\n        await router.push({ name: \"BusinessRenewal\" });\n      } else {\n        await commit(\n          \"setApplicationRequirements\",\n          response.data.businessapplicationrequirements[0]\n        );\n        await router.push({ name: \"BusinessPermitApplication\" });\n      }\n    } catch (err) {\n      console.log(err);\n      console.log(err.response);\n    }\n  },\n  async businessEnrollment({ commit, dispatch, getters }, payload) {\n    let config = {\n      headers: {\n        \"OneDoc-Token\": oneDocToken,\n        \"Content-Type\": \"application/json\",\n      },\n    };\n    const response = await axios.post(`${lguLocalEndpoint}`, payload, config);\n    if (response.data.Status === \"Success\") {\n      commit(\"setIsBusinessEnrollmentSuccess\", true);\n    } else {\n      this.$swal({\n        title: \"Failed!\",\n        text: response.data.Message,\n        icon: \"error\",\n      });\n    }\n  },\n  async approveBusinessApplication({ commit, dispatch, getters }, payload) {\n    try {\n      await commit(\"setLoading\", true);\n      const response = await axios.put(\n        `${baseUrl}/staff/business-permit-application/`,\n        payload,\n        { headers: { Authorization: `jwt ${getters.authToken}` } }\n      );\n      let action =\n        payload.status == 1\n          ? \"incomplete\"\n          : payload.status == 2\n          ? \"for assessment\"\n          : payload.status == 3\n          ? \"for compliance\"\n          : payload.status == 4\n          ? \"for payment\"\n          : \"\";\n\n      await dispatch(\"createPrompt\", {\n        type: \"success\",\n        title: \"Success!\",\n        message: `Application was successfully set to ${action}!`,\n      });\n      await commit(\"setLoading\", false);\n      router.push({ name: \"Applications\" });\n    } catch (err) {\n      console.log(err);\n      commit(\"setLoading\", false);\n    }\n  },\n  async getAllBusinessApplications({ commit, dispatch, getters }, page = 1) {\n    try {\n      const response = await axios.get(\n        `${baseUrl}/staff/business-permit-application-list/?page=${page}&filter_by=${getters.filterBy}&id=${getters.businessSearch}`,\n        { headers: { Authorization: `jwt ${getters.authToken}` } }\n      );\n      await commit(\"setPageCount\", response.data.total_pages);\n      await commit(\"setApplications\", response.data.results);\n    } catch (err) {\n      console.log(err.response);\n      commit(\"setLoading\", false);\n    }\n  },\n  async getBusinessApplications({ commit, dispatch, getters }, page = 1) {\n    try {\n      const response = await axios.get(\n        `${baseUrl}/api/user-business-application-list/?page=${page}`,\n        { headers: { Authorization: `jwt ${getters.authToken}` } }\n      );\n      await commit(\"setApplications\", response.data.results);\n      await commit(\"setPageCount\", response.data.total_pages);\n    } catch (err) {\n      console.log(err.response);\n      await commit(\"setLoading\", false);\n    }\n  },\n  async getBusinessProfiles({ commit, dispatch, getters }) {\n    try {\n      const response = await axios.get(`${baseUrl}/api/business-profile/`, {\n        headers: { Authorization: `jwt ${getters.authToken}` },\n      });\n      commit(\"setBusinessProfiles\", response.data);\n    } catch (err) {\n      console.log(err.response);\n      commit(\"setLoading\", false);\n    }\n  },\n  async addBusinessApplication({ commit, dispatch, getters }, payload) {\n    try {\n      const response = await axios.post(\n        `${baseUrl}/api/business-permit-application/`,\n        payload,\n        { headers: { Authorization: `jwt ${getters.authToken}` } }\n      );\n      await commit(\"setApplicationHasError\", false);\n      await commit(\"setBusinessApplication\", response.data);\n      let errors = { key: \"application\", value: {} };\n      await commit(\"setStepOneErrors\", errors);\n    } catch (err) {\n      await commit(\"setApplicationHasError\", true);\n      let errors = { key: \"application\", value: err.response.data };\n      await commit(\"setStepOneErrors\", errors);\n      console.log(err.response);\n      await commit(\"setLoading\", false);\n    }\n  },\n  async addBusinessBasicInformation({ commit, getters }, payload) {\n    try {\n      payload.application_number = getters.businessApplication.id;\n      const response = await axios.post(\n        `${baseUrl}/api/business-basic-information/`,\n        payload,\n        { headers: { Authorization: `jwt ${getters.authToken}` } }\n      );\n      await commit(\"setBasicInfoHasError\", false);\n      await commit(\"setBusinessBasicInformation\", response.data);\n      let errors = { key: \"basic_information\", value: {} };\n      await commit(\"setStepOneErrors\", errors);\n    } catch (err) {\n      console.log(err.response);\n      let errors = { key: \"basic_information\", value: err.response.data };\n      await commit(\"setStepOneErrors\", errors);\n      console.log(errors);\n      await commit(\"setBasicInfoHasError\", true);\n      await commit(\"setLoading\", false);\n    }\n  },\n  async addBusinessDetails({ commit, getters }, payload) {\n    try {\n      payload.application_number = getters.businessApplication.id;\n      const response = await axios.post(\n        `${baseUrl}/api/business-details/`,\n        payload,\n        { headers: { Authorization: `jwt ${getters.authToken}` } }\n      );\n      commit(\"setDetailsHasError\", false);\n      commit(\"setBusinessDetails\", response.data);\n      let errors = { key: \"business_details\", value: {} };\n      commit(\"setStepTwoErrors\", errors);\n    } catch (err) {\n      let errors = { key: \"business_details\", value: err.response.data };\n      commit(\"setStepTwoErrors\", errors);\n      console.log(err.response);\n      commit(\"setDetailsHasError\", true);\n      commit(\"setLoading\", false);\n    }\n  },\n  async addLessorDetails({ commit, getters }, payload) {\n    try {\n      payload.application_number = getters.businessApplication.id;\n      const response = await axios.post(\n        `${baseUrl}/api/business-lessor-details/`,\n        payload,\n        { headers: { Authorization: `jwt ${getters.authToken}` } }\n      );\n      commit(\"setLessorDetailsHasError\", false);\n      commit(\"setLessorDetails\", response.data);\n      let errors = { key: \"lessor_details\", value: {} };\n      commit(\"setStepTwoErrors\", errors);\n    } catch (err) {\n      let errors = { key: \"lessor_details\", value: err.response.data };\n      commit(\"setStepTwoErrors\", errors);\n      commit(\"setLessorDetailsHasError\", true);\n      console.log(err.response);\n      commit(\"setLoading\", false);\n    }\n  },\n  async addBusinessActivity({ commit, getters, dispatch }, payload) {\n    try {\n      for (let item of payload) {\n        item.capitalization = item.capitalization.toString().replace(/,/g, \"\");\n        item.capitalization = item.capitalization.split(\".\")[0];\n        item.units === \"\" ? (item.units = 1) : (item.units = item.units);\n        if (\n          item.application_number == \"\" ||\n          item.application_number == null ||\n          item.application_number == undefined\n        ) {\n          item.application_number = getters.businessApplication.id;\n        }\n      }\n      const response = await axios.post(\n        `${baseUrl}/api/business-activity/`,\n        payload,\n        { headers: { Authorization: `jwt ${getters.authToken}` } }\n      );\n      await dispatch(\"getBusinessActivity\");\n    } catch (err) {\n      err.response ? console.log(err.response) : console.log(err);\n      commit(\"setLoading\", false);\n    }\n  },\n  async addRenewBusinessActivity({ commit, getters, dispatch }, payload) {\n    try {\n      const response = await axios.post(\n        `${baseUrl}/api/business-activity/`,\n        payload,\n        { headers: { Authorization: `jwt ${getters.authToken}` } }\n      );\n    } catch (err) {\n      err.response ? console.log(err.response) : console.log(err);\n    }\n  },\n  async updateBusinessApplication({ commit, getters }, payload) {\n    try {\n      payload.id = getters.businessApplication.id;\n      const response = await axios.put(\n        `${baseUrl}/api/business-permit-application/`,\n        payload,\n        { headers: { Authorization: `jwt ${getters.authToken}` } }\n      );\n      await commit(\"setApplicationHasError\", false);\n      await commit(\"setBusinessApplication\", response.data);\n      let errors = { key: \"application\", value: {} };\n      await commit(\"setStepOneErrors\", errors);\n    } catch (err) {\n      console.log(err);\n      let errors = { key: \"application\", value: err.response.data };\n      await commit(\"setStepOneErrors\", errors);\n      await commit(\"setApplicationHasError\", true);\n      console.log(err.response);\n      await commit(\"setLoading\", false);\n    }\n  },\n  async updateBusinessBasicInformation({ commit, getters }, payload) {\n    try {\n      payload.id = getters.businessBasicInformation.id;\n      const response = await axios.put(\n        `${baseUrl}/api/business-basic-information/`,\n        payload,\n        { headers: { Authorization: `jwt ${getters.authToken}` } }\n      );\n      await commit(\"setBasicInfoHasError\", false);\n      await commit(\"setBusinessBasicInformation\", response.data);\n      let errors = { key: \"basic_information\", value: {} };\n      await commit(\"setStepOneErrors\", errors);\n    } catch (err) {\n      let errors = { key: \"basic_information\", value: err.response.data };\n      await commit(\"setStepOneErrors\", errors);\n      err.response ? console.log(err.response.data) : console.log(err);\n      await commit(\"setBasicInfoHasError\", true);\n      await commit(\"setLoading\", false);\n    }\n  },\n  async updateBusinessDetails({ commit, getters }, payload) {\n    try {\n      payload.id = getters.businessDetails.id;\n      const response = await axios.put(\n        `${baseUrl}/api/business-details/`,\n        payload,\n        { headers: { Authorization: `jwt ${getters.authToken}` } }\n      );\n      commit(\"setBusinessDetails\", response.data);\n      commit(\"setDetailsHasError\", false);\n      let errors = { key: \"business_details\", value: {} };\n      commit(\"setStepTwoErrors\", errors);\n    } catch (err) {\n      let errors = { key: \"business_details\", value: err.response.data };\n      commit(\"setStepTwoErrors\", errors);\n      commit(\"setDetailsHasError\", true);\n      console.log(err.response);\n      commit(\"setLoading\", false);\n    }\n  },\n  async updateLessorDetails({ commit, getters }, payload) {\n    try {\n      payload.id = getters.lessorDetails.id;\n      const response = await axios.put(\n        `${baseUrl}/api/business-lessor-details/`,\n        payload,\n        { headers: { Authorization: `jwt ${getters.authToken}` } }\n      );\n      commit(\"setLessorDetailsHasError\", false);\n      commit(\"setLessorDetails\", response.data);\n      let errors = { key: \"lessor_details\", value: {} };\n      commit(\"setStepTwoErrors\", errors);\n    } catch (err) {\n      let errors = { key: \"lessor_details\", value: err.response.data };\n      commit(\"setStepTwoErrors\", errors);\n      commit(\"setLessorDetailsHasError\", true);\n      console.log(err.response);\n      commit(\"setLoading\", false);\n    }\n  },\n  async updateBusinessActivity({ commit, getters }, payload) {\n    try {\n      if (payload.length > 0) {\n        let x = 0;\n        payload.forEach((element) => {\n          element.capitalization = element.capitalization\n            .toString()\n            .replace(/,/g, \"\");\n          element.capitalization = element.capitalization.split(\".\")[0];\n          element.id = getters.businessActivities[x].id;\n          x++;\n        });\n      }\n      const response = await axios.put(\n        `${baseUrl}/api/business-activity/`,\n        payload,\n        { headers: { Authorization: `jwt ${getters.authToken}` } }\n      );\n    } catch (err) {\n      console.log(err.response);\n      commit(\"setLoading\", false);\n    }\n  },\n  async getBusinessActivity({ commit, getters }) {\n    try {\n      let payload = { application_number: getters.businessApplication.id };\n      const response = await axios.get(`${baseUrl}/api/business-activity/`, {\n        headers: { Authorization: `jwt ${getters.authToken}` },\n        params: payload,\n      });\n      let activeBusinessActivities = [];\n      console.log(response.data);\n      response.data.forEach((item) => {\n        if (item.is_active || item.remarks_draft) {\n          activeBusinessActivities.push(item);\n        }\n      });\n      commit(\"setBusinessActivities\", activeBusinessActivities);\n    } catch (err) {\n      console.log(err);\n      commit(\"setLoading\", false);\n    }\n  },\n  async addApplicationRequirements({ commit, getters }, payload) {\n    try {\n      const response = await axios.post(\n        `${baseUrl}/api/application-requirements/`,\n        payload,\n        { headers: { Authorization: `jwt ${getters.authToken}` } }\n      );\n      commit(\"setApplicationRequirements\", response.data);\n    } catch (err) {\n      console.log(err.response);\n    }\n  },\n  async uploadRequirements({ commit, getters, dispatch }, payload) {\n    try {\n      commit(\"setLoading\", true);\n      const response = await axios.post(\n        `${baseUrl}/api/file-upload/`,\n        payload,\n        { headers: { Authorization: `jwt ${getters.authToken}` } }\n      );\n      commit(\"setLoading\", false);\n      await dispatch(\"getApplicationRequirements\");\n    } catch (err) {\n      commit(\"setLoading\", false);\n      commit(\"setIsFileUploadFailed\", true);\n      console.log(err.response);\n      dispatch(\"createPrompt\", {\n        type: \"error\",\n        title: \"Failed!\",\n        message: \"Something went wrong! Please try again later.\",\n      });\n    }\n  },\n  async getApplicationRequirements({ commit, getters }) {\n    try {\n      let payload = { id: getters.applicationRequirements.id };\n      const response = await axios.get(\n        `${baseUrl}/api/application-requirements/`,\n        {\n          headers: { Authorization: `jwt ${getters.authToken}` },\n          params: payload,\n        }\n      );\n      response.data.requirements = response.data.requirements.filter(\n        (item) => item.is_active == true\n      );\n      commit(\"setRequirements\", response.data);\n    } catch (err) {\n      console.log(err.response);\n      commit(\"setLoading\", false);\n    }\n  },\n  async assessBusinessApplication({ commit, getters, dispatch }, payload) {\n    try {\n      await commit(\"setLoading\", true);\n      const response = await axios.post(\n        `${baseUrl}/staff/business-dept-assessment`,\n        payload,\n        { headers: { Authorization: `jwt ${getters.authToken}` } }\n      );\n\n      if (!getters.isLastBusinessDept) {\n        await commit(\"setBusinessAssessmentMessage\", response.data.message);\n      }\n\n      await commit(\"setIsAssessmentHasError\", false);\n      await commit(\"setAssessmentPayload\", {});\n      await commit(\"setLoading\", false);\n    } catch (err) {\n      await commit(\"setLoading\", false);\n      await commit(\"setIsAssessmentHasError\", true);\n      console.log(err);\n      if (err.response) {\n        console.log(err.response);\n        dispatch(\"createPrompt\", {\n          type: \"error\",\n          title: \"Failed!\",\n          message: err.response.data.detail,\n        });\n        router.push({ name: \"Assessments\" });\n      }\n    }\n  },\n  async getBusinessAssessmentResult({ commit, getters }, payload) {\n    try {\n      const response = await axios.get(\n        `${baseUrl}/staff/business-dept-assessment`,\n        {\n          headers: { Authorization: `jwt ${getters.authToken}` },\n          params: payload,\n        }\n      );\n      commit(\"setBusinessAssessmentResult\", response.data);\n    } catch (err) {\n      console.log(err);\n      if (err.response) {\n        console.log(err.response);\n      }\n    }\n  },\n  async checkBusinessDeptCanAssess({ commit, getters }, payload) {\n    try {\n      const response = await axios.get(\n        `${baseUrl}/staff/check-business-dept-if-can-assess`,\n        {\n          headers: { Authorization: `jwt ${getters.authToken}` },\n          params: payload,\n        }\n      );\n      commit(\"setBusinessDeptCanAssess\", response.data.can_assess);\n      commit(\"setIsLastBusinessDept\", response.data.last_department);\n    } catch (err) {\n      console.log(err);\n      if (err.response) {\n        console.log(err.response);\n      }\n    }\n  },\n  async getForBusinessAssessmentList({ commit, getters }, page = 1) {\n    try {\n      source && source.cancel(\"Operation canceled due to new request.\");\n      source = axios.CancelToken.source();\n      const response = await axios.get(\n        `${baseUrl}/staff/for-business-assessment-list?page=${page}&search=${getters.businessAssessmentSearch}`,\n        {\n          headers: { Authorization: `jwt ${getters.authToken}` },\n          cancelToken: source.token,\n        }\n      );\n      await commit(\"setPageCount\", response.data.total_pages);\n      await commit(\"setForBusinessAssessmentList\", response.data.results);\n    } catch (err) {\n      console.log(err);\n      if (err.response) {\n        console.log(err.response.data);\n      }\n    }\n  },\n  async getAssessedBusinessList({ commit, getters }, page = 1) {\n    try {\n      source && source.cancel(\"Operation canceled due to new request.\");\n      source = axios.CancelToken.source();\n      const response = await axios.get(\n        `${baseUrl}/staff/assessed-business-application-list?page=${page}&search=${getters.businessAssessmentSearch}`,\n        {\n          headers: { Authorization: `jwt ${getters.authToken}` },\n          cancelToken: source.token,\n        }\n      );\n      await commit(\"setAssessedBusinessList\", response.data.results);\n      await commit(\"setPageCount\", response.data.total_pages);\n    } catch (err) {\n      console.log(err);\n      if (err.response) {\n        console.log(err.response.data);\n      }\n    }\n  },\n  async resetBusinessAssessment({ commit, getters }, payload) {\n    try {\n      const response = await axios.put(\n        `${baseUrl}/staff/reset-business-assessment`,\n        payload,\n        {\n          headers: { Authorization: `jwt ${getters.authToken}` },\n        }\n      );\n    } catch (err) {\n      console.log(err);\n      if (err.response) {\n        console.log(err.response.data);\n      }\n    }\n  },\n  async getUserBusinessAssessmentResult({ commit, getters }, payload) {\n    try {\n      const response = await axios.get(\n        `${baseUrl}/api/business-assessment-result/`,\n        {\n          headers: { Authorization: `jwt ${getters.authToken}` },\n          params: payload,\n        }\n      );\n      commit(\"setBusinessAssessmentResult\", response.data);\n    } catch (err) {\n      console.log(err);\n      if (err.response) {\n        console.log(err.response);\n      }\n    }\n  },\n  async getBusinessActivityRenewal({ commit, getters }, payload) {\n    try {\n      const response = await axios.get(\n        `${baseUrl}/api/business-activity-renewal?application_number=${payload}`,\n        {\n          headers: { Authorization: `jwt ${getters.authToken}` },\n        }\n      );\n      await commit(\"setBusinessActivities\", response.data);\n    } catch (err) {\n      console.log(err);\n      if (err.response) {\n        console.log(err.response.data);\n      }\n    }\n  },\n  async getBusinessRequirementRenewal({ commit, getters, dispatch }, payload) {\n    try {\n      const response = await axios.get(\n        `${baseUrl}/api/business-requirement-renewal?application_number=${payload}`,\n        {\n          headers: { Authorization: `jwt ${getters.authToken}` },\n        }\n      );\n      if (response.data.length < 1) {\n        let requirements_payload = {\n          application_id: payload,\n          is_active: false,\n          is_draft: true,\n        };\n        await dispatch(\"addApplicationRequirements\", requirements_payload);\n      } else {\n        await commit(\"setApplicationRequirements\", response.data[0]);\n      }\n    } catch (err) {\n      console.log(err);\n      if (err.response) {\n        console.log(err.response.data);\n      }\n    }\n  },\n  async getBusinessActiveRequirement({ commit, getters }) {\n    try {\n      const response = await axios.get(\n        `${baseUrl}/api/business-active-requirements?application_number=${getters.businessApplication.id}`,\n        {\n          headers: { Authorization: `jwt ${getters.authToken}` },\n        }\n      );\n      console.log(response.data);\n      await commit(\"setApplicationRequirements\", response.data[0]);\n    } catch (err) {\n      console.log(err);\n      if (err.response) {\n        console.log(err.response.data);\n      }\n    }\n  },\n  async renewBusinessApplication({ commit, getters }) {\n    try {\n      const response = await axios.post(\n        `${baseUrl}/api/renew-business-application/`,\n        { application_number: getters.businessApplication.id },\n        {\n          headers: { Authorization: `jwt ${getters.authToken}` },\n        }\n      );\n      console.log(response.data);\n    } catch (err) {\n      console.log(err);\n      if (err.response) {\n        console.log(err.response.data);\n      }\n    }\n  },\n  async uploadBusinessPermit({ commit, getters, dispatch }, payload) {\n    try {\n      await commit(\"setLoading\", true);\n      const response = await axios.post(\n        `${baseUrl}/staff/business-permit/`,\n        payload,\n        { headers: { Authorization: `jwt ${getters.authToken}` } }\n      );\n      await commit(\"setLoading\", false);\n      await dispatch(\"getBusinessPermit\");\n    } catch (err) {\n      await commit(\"setLoading\", false);\n      await commit(\"setIsFileUploadFailed\", true);\n      console.log(err.response);\n      await dispatch(\"createPrompt\", {\n        type: \"error\",\n        title: \"Failed!\",\n        message: \"Something went wrong! Please try again later.\",\n      });\n    }\n  },\n\n  async getBusinessPermit({ commit, getters, dispatch }) {\n    try {\n      let payload = { id: getters.businessApplication.id };\n      const response = await axios.get(`${baseUrl}/staff/business-permit`, {\n        headers: { Authorization: `jwt ${getters.authToken}` },\n        params: payload,\n      });\n      console.log(response.data);\n      await commit(\"setBusinessPermits\", response.data);\n    } catch (error) {\n      console.log(error);\n    }\n  },\n};\n\nexport default {\n  state,\n  getters,\n  actions,\n  mutations,\n};\n"]}]}