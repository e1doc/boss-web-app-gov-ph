{"remainingRequest":"/var/www/html/boss-web/node_modules/babel-loader/lib/index.js!/var/www/html/boss-web/src/store/modules/property.js","dependencies":[{"path":"/var/www/html/boss-web/src/store/modules/property.js","mtime":1605179000991},{"path":"/var/www/html/boss-web/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/var/www/html/boss-web/node_modules/babel-loader/lib/index.js","mtime":315532800000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"sources":["/var/www/html/boss-web/src/store/modules/property.js"],"names":["axios","baseUrl","process","env","VUE_APP_API_URL","oneDocToken","VUE_APP_ONE_DOC_TOKEN","router","getDefaultPropertyState","currentPropertyStep","buildingApplication","buildingBasicInformation","buildingDetails","buildingOtherDetails","buildingBasicInfoHasError","buildingDetailsHasError","buildingOtherDetailsHasError","buildingStepOneErrors","basic_information","buildingStepTwoErrors","building_details","building_other_details","buildingApplications","buildingProfiles","buildingApplicationRequirements","buildingRequirements","draftProperty","realPropertyProfiles","applicationRemarks","legalDocuments","technicalDocuments","supplementaryDocuments","designPlans","designSpecs","currentBuildingId","buildingSearch","propertyFilterBy","buildingAssessmentMessage","buildingAssessmentResult","buildingDeptCanAssess","isLastBuildingDept","forBuildingAssessmentList","assessedBuildingList","state","getters","mutations","setCurrentPropertyStep","resetPropertyState","Object","assign","setBuildingApplication","setBuildingBasicInformation","setBuildingDetails","setBuildingOtherDetails","setBuildingBasicInfoHasError","setBuildingDetailsHasError","setBuildingOtherDetailsHasError","buildingSetStepOneErrors","key","value","buildingSetStepTwoErrors","setBuildingApplications","setBuildingProfiles","setDraftProperty","setBuildingApplicationRequirements","setBuildingRequirements","setRealPropertyProfiles","setApplicationRemarks","setLegalDocuments","setTechnicalDocuments","setSupplementaryDocuments","setCurrentBuildingId","setBuildingSearch","setDesignPlans","setDesignSpecs","setPropertyFilterBy","setBuildingAssessmentMessage","setBuildingAssessmentResult","setBuildingDeptCanAssess","setIsLastBuildingDept","setForBuildingAssessmentList","setAssessedBuildingList","actions","getBuildingApplication","payload","commit","get","headers","Authorization","authToken","response","application","id","data","is_draft","is_approve","is_disapprove","created_at","application_status","buildingbasicinformation","buildingdetails","buildingotherdetails","buildingapplicationrequirements","push","name","console","log","setBuildingCheckList","post","JSON","parse","updateBuildingCheckList","category","put","setApplicationStateRemarks","propertyEnrollment","dispatch","config","approveBuildingApplication","action","status","type","title","message","getAllBuildingApplications","page","total_pages","results","getBuildingApplications","count","getBuildingProfiles","getRealPropertyProfiles","addBuildingApplication","updateBuildingApplication","addBuildingBasicInformation","application_number","errors","updateBuildingBasicInformation","addBuildingDetails","addBuildingOtherDetails","updateBuildingDetails","updateBuildingOtherDetails","addBuildingApplicationRequirements","uploadBuildingRequirements","getBuildingApplicationRequirements","params","buildingchecklist","buildingrequirements","filter","item","is_active","length","map","assessBuildingApplication","detail","getBuildingAssessmentResult","checkBuildingDeptCanAssess","can_assess","last_department","getForBuildingAssessmentList","getAssessedBuildingList","resetBuildingAssessment","getUserBuildingAssessmentResult"],"mappings":";;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,IAAMC,OAAO,GAAGC,OAAO,CAACC,GAAR,CAAYC,eAA5B;AACA,IAAMC,WAAW,GAAGH,OAAO,CAACC,GAAR,CAAYG,qBAAhC;AACA,OAAOC,MAAP,MAAmB,uBAAnB;;AACA,IAAMC,uBAAuB,GAAG,SAA1BA,uBAA0B,GAAM;AACpC,SAAO;AACLC,IAAAA,mBAAmB,EAAE,GADhB;AAELC,IAAAA,mBAAmB,EAAE,EAFhB;AAGLC,IAAAA,wBAAwB,EAAE,EAHrB;AAILC,IAAAA,eAAe,EAAE,EAJZ;AAKLC,IAAAA,oBAAoB,EAAE,EALjB;AAMLC,IAAAA,yBAAyB,EAAE,KANtB;AAOLC,IAAAA,uBAAuB,EAAE,KAPpB;AAQLC,IAAAA,4BAA4B,EAAE,KARzB;AASLC,IAAAA,qBAAqB,EAAE;AACrBC,MAAAA,iBAAiB,EAAE;AADE,KATlB;AAYLC,IAAAA,qBAAqB,EAAE;AACrBC,MAAAA,gBAAgB,EAAE,EADG;AAErBC,MAAAA,sBAAsB,EAAE;AAFH,KAZlB;AAgBLC,IAAAA,oBAAoB,EAAE,EAhBjB;AAiBLC,IAAAA,gBAAgB,EAAE,EAjBb;AAkBLC,IAAAA,+BAA+B,EAAE,EAlB5B;AAmBLC,IAAAA,oBAAoB,EAAE,EAnBjB;AAoBLC,IAAAA,aAAa,EAAE,KApBV;AAqBLC,IAAAA,oBAAoB,EAAE,EArBjB;AAsBLC,IAAAA,kBAAkB,EAAE,EAtBf;AAuBLC,IAAAA,cAAc,EAAE,EAvBX;AAwBLC,IAAAA,kBAAkB,EAAE,EAxBf;AAyBLC,IAAAA,sBAAsB,EAAE,EAzBnB;AA0BLC,IAAAA,WAAW,EAAE,EA1BR;AA2BLC,IAAAA,WAAW,EAAE,EA3BR;AA4BLC,IAAAA,iBAAiB,EAAE,CA5Bd;AA6BLC,IAAAA,cAAc,EAAE,EA7BX;AA8BLC,IAAAA,gBAAgB,EAAE,KA9Bb;AA+BLC,IAAAA,yBAAyB,EAAE,EA/BtB;AAgCLC,IAAAA,wBAAwB,EAAE,EAhCrB;AAiCLC,IAAAA,qBAAqB,EAAE,KAjClB;AAkCLC,IAAAA,kBAAkB,EAAE,KAlCf;AAmCLC,IAAAA,yBAAyB,EAAE,EAnCtB;AAoCLC,IAAAA,oBAAoB,EAAE;AApCjB,GAAP;AAsCD,CAvCD;;AAyCA,IAAMC,KAAK,GAAGnC,uBAAuB,EAArC;AAEA,IAAMoC,OAAO,GAAG;AACdnC,EAAAA,mBAAmB,EAAE,6BAACkC,KAAD;AAAA,WAAWA,KAAK,CAAClC,mBAAjB;AAAA,GADP;AAEdC,EAAAA,mBAAmB,EAAE,6BAACiC,KAAD;AAAA,WAAWA,KAAK,CAACjC,mBAAjB;AAAA,GAFP;AAGdC,EAAAA,wBAAwB,EAAE,kCAACgC,KAAD;AAAA,WAAWA,KAAK,CAAChC,wBAAjB;AAAA,GAHZ;AAIdC,EAAAA,eAAe,EAAE,yBAAC+B,KAAD;AAAA,WAAWA,KAAK,CAAC/B,eAAjB;AAAA,GAJH;AAKdC,EAAAA,oBAAoB,EAAE,8BAAC8B,KAAD;AAAA,WAAWA,KAAK,CAAC9B,oBAAjB;AAAA,GALR;AAMdC,EAAAA,yBAAyB,EAAE,mCAAC6B,KAAD;AAAA,WAAWA,KAAK,CAAC7B,yBAAjB;AAAA,GANb;AAOdC,EAAAA,uBAAuB,EAAE,iCAAC4B,KAAD;AAAA,WAAWA,KAAK,CAAC5B,uBAAjB;AAAA,GAPX;AAQdC,EAAAA,4BAA4B,EAAE,sCAAC2B,KAAD;AAAA,WAAWA,KAAK,CAAC3B,4BAAjB;AAAA,GARhB;AASdC,EAAAA,qBAAqB,EAAE,+BAAC0B,KAAD;AAAA,WAAWA,KAAK,CAAC1B,qBAAjB;AAAA,GATT;AAUdE,EAAAA,qBAAqB,EAAE,+BAACwB,KAAD;AAAA,WAAWA,KAAK,CAACxB,qBAAjB;AAAA,GAVT;AAWdG,EAAAA,oBAAoB,EAAE,8BAACqB,KAAD;AAAA,WAAWA,KAAK,CAACrB,oBAAjB;AAAA,GAXR;AAYdC,EAAAA,gBAAgB,EAAE,0BAACoB,KAAD;AAAA,WAAWA,KAAK,CAACpB,gBAAjB;AAAA,GAZJ;AAadG,EAAAA,aAAa,EAAE,uBAACiB,KAAD;AAAA,WAAWA,KAAK,CAACjB,aAAjB;AAAA,GAbD;AAcdF,EAAAA,+BAA+B,EAAE,yCAACmB,KAAD;AAAA,WAC/BA,KAAK,CAACnB,+BADyB;AAAA,GAdnB;AAgBdC,EAAAA,oBAAoB,EAAE,8BAACkB,KAAD;AAAA,WAAWA,KAAK,CAAClB,oBAAjB;AAAA,GAhBR;AAiBdE,EAAAA,oBAAoB,EAAE,8BAACgB,KAAD;AAAA,WAAWA,KAAK,CAAChB,oBAAjB;AAAA,GAjBR;AAkBdC,EAAAA,kBAAkB,EAAE,4BAACe,KAAD;AAAA,WAAWA,KAAK,CAACf,kBAAjB;AAAA,GAlBN;AAmBdC,EAAAA,cAAc,EAAE,wBAACc,KAAD;AAAA,WAAWA,KAAK,CAACd,cAAjB;AAAA,GAnBF;AAoBdC,EAAAA,kBAAkB,EAAE,4BAACa,KAAD;AAAA,WAAWA,KAAK,CAACb,kBAAjB;AAAA,GApBN;AAqBdC,EAAAA,sBAAsB,EAAE,gCAACY,KAAD;AAAA,WAAWA,KAAK,CAACZ,sBAAjB;AAAA,GArBV;AAsBdC,EAAAA,WAAW,EAAE,qBAACW,KAAD;AAAA,WAAWA,KAAK,CAACX,WAAjB;AAAA,GAtBC;AAuBdC,EAAAA,WAAW,EAAE,qBAACU,KAAD;AAAA,WAAWA,KAAK,CAACV,WAAjB;AAAA,GAvBC;AAwBdC,EAAAA,iBAAiB,EAAE,2BAACS,KAAD;AAAA,WAAWA,KAAK,CAACT,iBAAjB;AAAA,GAxBL;AAyBdC,EAAAA,cAAc,EAAE,wBAACQ,KAAD;AAAA,WAAWA,KAAK,CAACR,cAAjB;AAAA,GAzBF;AA0BdC,EAAAA,gBAAgB,EAAE,0BAACO,KAAD;AAAA,WAAWA,KAAK,CAACP,gBAAjB;AAAA,GA1BJ;AA2BdC,EAAAA,yBAAyB,EAAE,mCAACM,KAAD;AAAA,WAAWA,KAAK,CAACN,yBAAjB;AAAA,GA3Bb;AA4BdC,EAAAA,wBAAwB,EAAE,kCAACK,KAAD;AAAA,WAAWA,KAAK,CAACL,wBAAjB;AAAA,GA5BZ;AA6BdC,EAAAA,qBAAqB,EAAE,+BAACI,KAAD;AAAA,WAAWA,KAAK,CAACJ,qBAAjB;AAAA,GA7BT;AA8BdC,EAAAA,kBAAkB,EAAE,4BAACG,KAAD;AAAA,WAAWA,KAAK,CAACH,kBAAjB;AAAA,GA9BN;AA+BdC,EAAAA,yBAAyB,EAAE,mCAACE,KAAD;AAAA,WAAWA,KAAK,CAACF,yBAAjB;AAAA,GA/Bb;AAgCdC,EAAAA,oBAAoB,EAAE,8BAACC,KAAD;AAAA,WAAWA,KAAK,CAACD,oBAAjB;AAAA;AAhCR,CAAhB;AAmCA,IAAMG,SAAS,GAAG;AAChBC,EAAAA,sBAAsB,EAAE,gCAACH,KAAD,EAAQlC,mBAAR;AAAA,WACrBkC,KAAK,CAAClC,mBAAN,GAA4BA,mBADP;AAAA,GADR;AAGhBsC,EAAAA,kBAAkB,EAAE,4BAACJ,KAAD;AAAA,WAClBK,MAAM,CAACC,MAAP,CAAcN,KAAd,EAAqBnC,uBAAuB,EAA5C,CADkB;AAAA,GAHJ;AAKhB0C,EAAAA,sBAAsB,EAAE,gCAACP,KAAD,EAAQjC,mBAAR;AAAA,WACrBiC,KAAK,CAACjC,mBAAN,GAA4BA,mBADP;AAAA,GALR;AAOhByC,EAAAA,2BAA2B,EAAE,qCAACR,KAAD,EAAQhC,wBAAR;AAAA,WAC1BgC,KAAK,CAAChC,wBAAN,GAAiCA,wBADP;AAAA,GAPb;AAShByC,EAAAA,kBAAkB,EAAE,4BAACT,KAAD,EAAQ/B,eAAR;AAAA,WACjB+B,KAAK,CAAC/B,eAAN,GAAwBA,eADP;AAAA,GATJ;AAWhByC,EAAAA,uBAAuB,EAAE,iCAACV,KAAD,EAAQ9B,oBAAR;AAAA,WACtB8B,KAAK,CAAC9B,oBAAN,GAA6BA,oBADP;AAAA,GAXT;AAahByC,EAAAA,4BAA4B,EAAE,sCAACX,KAAD,EAAQ7B,yBAAR;AAAA,WAC3B6B,KAAK,CAAC7B,yBAAN,GAAkCA,yBADP;AAAA,GAbd;AAehByC,EAAAA,0BAA0B,EAAE,oCAACZ,KAAD,EAAQ5B,uBAAR;AAAA,WACzB4B,KAAK,CAAC5B,uBAAN,GAAgCA,uBADP;AAAA,GAfZ;AAiBhByC,EAAAA,+BAA+B,EAAE,yCAACb,KAAD,EAAQ3B,4BAAR;AAAA,WAC9B2B,KAAK,CAAC3B,4BAAN,GAAqCA,4BADP;AAAA,GAjBjB;AAmBhByC,EAAAA,wBAAwB,EAAE,kCAACd,KAAD,EAAQ1B,qBAAR,EAAkC;AAC1D0B,IAAAA,KAAK,CAAC1B,qBAAN,WAA+BA,qBAAqB,CAACyC,GAArD,KACEzC,qBAAqB,CAAC0C,KADxB;AAED,GAtBe;AAuBhBC,EAAAA,wBAAwB,EAAE,kCAACjB,KAAD,EAAQxB,qBAAR,EAAkC;AAC1DwB,IAAAA,KAAK,CAACxB,qBAAN,WAA+BA,qBAAqB,CAACuC,GAArD,KACEvC,qBAAqB,CAACwC,KADxB;AAED,GA1Be;AA2BhBE,EAAAA,uBAAuB,EAAE,iCAAClB,KAAD,EAAQrB,oBAAR;AAAA,WACtBqB,KAAK,CAACrB,oBAAN,GAA6BA,oBADP;AAAA,GA3BT;AA6BhBwC,EAAAA,mBAAmB,EAAE,6BAACnB,KAAD,EAAQpB,gBAAR;AAAA,WAClBoB,KAAK,CAACpB,gBAAN,GAAyBA,gBADP;AAAA,GA7BL;AA+BhBwC,EAAAA,gBAAgB,EAAE,0BAACpB,KAAD,EAAQjB,aAAR;AAAA,WACfiB,KAAK,CAACjB,aAAN,GAAsBA,aADP;AAAA,GA/BF;AAiChBsC,EAAAA,kCAAkC,EAAE,4CAClCrB,KADkC,EAElCnB,+BAFkC;AAAA,WAIjCmB,KAAK,CAACnB,+BAAN,GAAwCA,+BAJP;AAAA,GAjCpB;AAsChByC,EAAAA,uBAAuB,EAAE,iCAACtB,KAAD,EAAQlB,oBAAR;AAAA,WACtBkB,KAAK,CAAClB,oBAAN,GAA6BA,oBADP;AAAA,GAtCT;AAwChByC,EAAAA,uBAAuB,EAAE,iCAACvB,KAAD,EAAQhB,oBAAR;AAAA,WACtBgB,KAAK,CAAChB,oBAAN,GAA6BA,oBADP;AAAA,GAxCT;AA0ChBwC,EAAAA,qBAAqB,EAAE,+BAACxB,KAAD,EAAQf,kBAAR;AAAA,WAAgCe,KAAK,CAACf,kBAAN,GAA2BA,kBAA3D;AAAA,GA1CP;AA2ChBwC,EAAAA,iBAAiB,EAAE,2BAACzB,KAAD,EAAQd,cAAR;AAAA,WAChBc,KAAK,CAACd,cAAN,GAAuBA,cADP;AAAA,GA3CH;AA6ChBwC,EAAAA,qBAAqB,EAAE,+BAAC1B,KAAD,EAAQb,kBAAR;AAAA,WACpBa,KAAK,CAACb,kBAAN,GAA2BA,kBADP;AAAA,GA7CP;AA+ChBwC,EAAAA,yBAAyB,EAAE,mCAAC3B,KAAD,EAAQZ,sBAAR;AAAA,WACxBY,KAAK,CAACZ,sBAAN,GAA+BA,sBADP;AAAA,GA/CX;AAiDhBwC,EAAAA,oBAAoB,EAAE,8BAAC5B,KAAD,EAAQT,iBAAR;AAAA,WACnBS,KAAK,CAACT,iBAAN,GAA0BA,iBADP;AAAA,GAjDN;AAmDhBsC,EAAAA,iBAAiB,EAAE,2BAAC7B,KAAD,EAAQR,cAAR;AAAA,WAChBQ,KAAK,CAACR,cAAN,GAAuBA,cADP;AAAA,GAnDH;AAqDhBsC,EAAAA,cAAc,EAAE,wBAAC9B,KAAD,EAAQX,WAAR;AAAA,WAAyBW,KAAK,CAACX,WAAN,GAAoBA,WAA7C;AAAA,GArDA;AAsDhB0C,EAAAA,cAAc,EAAE,wBAAC/B,KAAD,EAAQV,WAAR;AAAA,WAAyBU,KAAK,CAACV,WAAN,GAAoBA,WAA7C;AAAA,GAtDA;AAuDhB0C,EAAAA,mBAAmB,EAAE,6BAAChC,KAAD,EAAQP,gBAAR;AAAA,WAClBO,KAAK,CAACP,gBAAN,GAAyBA,gBADP;AAAA,GAvDL;AAyDhBwC,EAAAA,4BAA4B,EAAE,sCAACjC,KAAD,EAAQN,yBAAR;AAAA,WAC3BM,KAAK,CAACN,yBAAN,GAAkCA,yBADP;AAAA,GAzDd;AA2DhBwC,EAAAA,2BAA2B,EAAE,qCAAClC,KAAD,EAAQL,wBAAR;AAAA,WAC1BK,KAAK,CAACL,wBAAN,GAAiCA,wBADP;AAAA,GA3Db;AA6DhBwC,EAAAA,wBAAwB,EAAE,kCAACnC,KAAD,EAAQJ,qBAAR;AAAA,WACvBI,KAAK,CAACJ,qBAAN,GAA8BA,qBADP;AAAA,GA7DV;AA+DhBwC,EAAAA,qBAAqB,EAAE,+BAACpC,KAAD,EAAQH,kBAAR;AAAA,WAAgCG,KAAK,CAACH,kBAAN,GAA2BA,kBAA3D;AAAA,GA/DP;AAgEhBwC,EAAAA,4BAA4B,EAAE,sCAACrC,KAAD,EAAQF,yBAAR;AAAA,WAAuCE,KAAK,CAACF,yBAAN,GAAkCA,yBAAzE;AAAA,GAhEd;AAiEhBwC,EAAAA,uBAAuB,EAAE,iCAACtC,KAAD,EAAQD,oBAAR;AAAA,WAAkCC,KAAK,CAACD,oBAAN,GAA6BA,oBAA/D;AAAA;AAjET,CAAlB;AAoEA,IAAMwC,OAAO,GAAG;AACRC,EAAAA,sBADQ,wCACoCC,OADpC,EAC6C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAA5BC,cAAAA,MAA4B,QAA5BA,MAA4B,EAApBzC,OAAoB,QAApBA,OAAoB;AAAA;AAAA;AAAA,qBAEhC5C,KAAK,CAACsF,GAAN,WAClBrF,OADkB,0DACqCmF,OADrC,GAErB;AAAEG,gBAAAA,OAAO,EAAE;AAAEC,kBAAAA,aAAa,gBAAS5C,OAAO,CAAC6C,SAAjB;AAAf;AAAX,eAFqB,CAFgC;;AAAA;AAEjDC,cAAAA,QAFiD;AAMnDC,cAAAA,WANmD,GAMrC;AAChBC,gBAAAA,EAAE,EAAEF,QAAQ,CAACG,IAAT,CAAcD,EADF;AAEhBE,gBAAAA,QAAQ,EAAEJ,QAAQ,CAACG,IAAT,CAAcC,QAFR;AAGhBC,gBAAAA,UAAU,EAAEL,QAAQ,CAACG,IAAT,CAAcE,UAHV;AAIhBC,gBAAAA,aAAa,EAAEN,QAAQ,CAACG,IAAT,CAAcG,aAJb;AAKhBC,gBAAAA,UAAU,EAAEP,QAAQ,CAACG,IAAT,CAAcI,UALV;AAMhBC,gBAAAA,kBAAkB,EAAER,QAAQ,CAACG,IAAT,CAAcK;AANlB,eANqC;AAAA;AAAA,qBAcjDb,MAAM,CAAC,wBAAD,EAA2BM,WAA3B,CAd2C;;AAAA;AAAA;AAAA,qBAejDN,MAAM,CACV,6BADU,EAEVK,QAAQ,CAACG,IAAT,CAAcM,wBAFJ,CAf2C;;AAAA;AAAA;AAAA,qBAmBjDd,MAAM,CAAC,oBAAD,EAAuBK,QAAQ,CAACG,IAAT,CAAcO,eAArC,CAnB2C;;AAAA;AAAA;AAAA,qBAoBjDf,MAAM,CACV,yBADU,EAEVK,QAAQ,CAACG,IAAT,CAAcQ,oBAFJ,CApB2C;;AAAA;AAAA;AAAA,qBAwBjDhB,MAAM,CACV,oCADU,EAEVK,QAAQ,CAACG,IAAT,CAAcS,+BAAd,CAA8C,CAA9C,CAFU,CAxB2C;;AAAA;AAAA;AAAA,qBA4BjD/F,MAAM,CAACgG,IAAP,CAAY;AAAEC,gBAAAA,IAAI,EAAE;AAAR,eAAZ,CA5BiD;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AA8BvDnB,cAAAA,MAAM,CAAC,YAAD,EAAe,KAAf,CAAN;AACAoB,cAAAA,OAAO,CAACC,GAAR;;AA/BuD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAiC1D,GAlCa;AAmCRC,EAAAA,oBAnCQ,uCAmCkCvB,OAnClC,EAmC2C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAA5BC,cAAAA,MAA4B,SAA5BA,MAA4B,EAApBzC,OAAoB,SAApBA,OAAoB;AAAA;AAErD6D,cAAAA,OAAO,CAACC,GAAR,CAAY,iBAAZ,EAA+BtB,OAA/B;AAFqD;AAAA,qBAG9BpF,KAAK,CAAC4G,IAAN,WAClB3G,OADkB,+BAErBmF,OAFqB,EAGrB;AAAEG,gBAAAA,OAAO,EAAE;AAAEC,kBAAAA,aAAa,gBAAS5C,OAAO,CAAC6C,SAAjB;AAAf;AAAX,eAHqB,CAH8B;;AAAA;AAG/CC,cAAAA,QAH+C;AAQjD/B,cAAAA,KARiD,GAQzCkD,IAAI,CAACC,KAAL,CAAW1B,OAAO,CAACzB,KAAnB,CARyC;AAAA;AAAA;;AAAA;AAAA;AAAA;AAUrD0B,cAAAA,MAAM,CAAC,YAAD,EAAe,KAAf,CAAN;AACAoB,cAAAA,OAAO,CAACC,GAAR,CAAY,aAAIhB,QAAhB;;AAXqD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAaxD,GAhDa;AAiDRqB,EAAAA,uBAjDQ,0CAiDqC3B,OAjDrC,EAiD8C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAA5BC,cAAAA,MAA4B,SAA5BA,MAA4B,EAApBzC,OAAoB,SAApBA,OAAoB;AAAA;AAExD6D,cAAAA,OAAO,CAACC,GAAR,CAAY,gBAAZ,EAA8BtB,OAAO,CAAC4B,QAAtC;AAFwD;AAAA,qBAGjChH,KAAK,CAACiH,GAAN,WAClBhH,OADkB,+BAErBmF,OAFqB,EAGrB;AAAEG,gBAAAA,OAAO,EAAE;AAAEC,kBAAAA,aAAa,gBAAS5C,OAAO,CAAC6C,SAAjB;AAAf;AAAX,eAHqB,CAHiC;;AAAA;AAGlDC,cAAAA,QAHkD;AAQxDe,cAAAA,OAAO,CAACC,GAAR,CAAYhB,QAAQ,CAACG,IAArB;AARwD;AAAA;;AAAA;AAAA;AAAA;AAUxDR,cAAAA,MAAM,CAAC,YAAD,EAAe,KAAf,CAAN;AACAoB,cAAAA,OAAO,CAACC,GAAR,CAAY,aAAIhB,QAAhB;;AAXwD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAa3D,GA9Da;AA+DRwB,EAAAA,0BA/DQ,6CA+DwC9B,OA/DxC,EA+DiD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAA5BC,cAAAA,MAA4B,SAA5BA,MAA4B,EAApBzC,OAAoB,SAApBA,OAAoB;AAAA;AAAA,qBACvDyC,MAAM,CAAC,uBAAD,EAA0BD,OAA1B,CADiD;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAE9D,GAjEa;AAkER+B,EAAAA,kBAlEQ,qCAkE0C/B,OAlE1C,EAkEmD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAtCC,cAAAA,MAAsC,SAAtCA,MAAsC,EAA9B+B,QAA8B,SAA9BA,QAA8B,EAApBxE,OAAoB,SAApBA,OAAoB;AAC3DyE,cAAAA,MAD2D,GAClD;AACX9B,gBAAAA,OAAO,EAAE;AACP,kCAAgBlF;AADT;AADE,eADkD;AAAA;AAAA,qBAMxCL,KAAK,CAAC4G,IAAN,qCAErBxB,OAFqB,EAGrBiC,MAHqB,CANwC;;AAAA;AAMzD3B,cAAAA,QANyD;AAW/De,cAAAA,OAAO,CAACC,GAAR,CAAYhB,QAAQ,CAACG,IAArB;;AAX+D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAYhE,GA9Ea;AA+ERyB,EAAAA,0BA/EQ,6CA+EkDlC,OA/ElD,EA+E2D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAtCC,cAAAA,MAAsC,SAAtCA,MAAsC,EAA9B+B,QAA8B,SAA9BA,QAA8B,EAApBxE,OAAoB,SAApBA,OAAoB;AAAA;AAAA;AAAA,qBAE9C5C,KAAK,CAACiH,GAAN,WAClBhH,OADkB,0CAErBmF,OAFqB,EAGrB;AAAEG,gBAAAA,OAAO,EAAE;AAAEC,kBAAAA,aAAa,gBAAS5C,OAAO,CAAC6C,SAAjB;AAAf;AAAX,eAHqB,CAF8C;;AAAA;AAE/DC,cAAAA,QAF+D;AAOrE;AAEI6B,cAAAA,MATiE,GAUnEnC,OAAO,CAACoC,MAAR,IAAkB,CAAlB,GACI,YADJ,GAEIpC,OAAO,CAACoC,MAAR,IAAkB,CAAlB,GACA,gBADA,GAEApC,OAAO,CAACoC,MAAR,IAAkB,CAAlB,GACA,gBADA,GAEApC,OAAO,CAACoC,MAAR,IAAkB,CAAlB,GACA,gBADA,GAEA,aAlB+D;AAoBrEJ,cAAAA,QAAQ,CAAC,cAAD,EAAiB;AACvBK,gBAAAA,IAAI,EAAE,SADiB;AAEvBC,gBAAAA,KAAK,EAAE,UAFgB;AAGvBC,gBAAAA,OAAO,gDAAyCJ,MAAzC;AAHgB,eAAjB,CAAR;AAKAhH,cAAAA,MAAM,CAACgG,IAAP,CAAY;AAAEC,gBAAAA,IAAI,EAAE;AAAR,eAAZ;AAzBqE;AAAA;;AAAA;AAAA;AAAA;AA2BrEC,cAAAA,OAAO,CAACC,GAAR;AACArB,cAAAA,MAAM,CAAC,YAAD,EAAe,KAAf,CAAN;;AA5BqE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AA8BxE,GA7Ga;AA8GRuC,EAAAA,0BA9GQ,6CA8G4D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAvCvC,cAAAA,MAAuC,SAAvCA,MAAuC,EAA/BzC,OAA+B,SAA/BA,OAA+B,EAAtBwE,QAAsB,SAAtBA,QAAsB;AAAVS,cAAAA,IAAU,0EAAH,CAAG;AAAA;AAAA;AAAA,qBAE/C7H,KAAK,CAACsF,GAAN,WAClBrF,OADkB,2DACsC4H,IADtC,wBACwDjF,OAAO,CAACR,gBADhE,iBACuFQ,OAAO,CAACT,cAD/F,GAErB;AAAEoD,gBAAAA,OAAO,EAAE;AAAEC,kBAAAA,aAAa,gBAAS5C,OAAO,CAAC6C,SAAjB;AAAf;AAAX,eAFqB,CAF+C;;AAAA;AAEhEC,cAAAA,QAFgE;AAMtEL,cAAAA,MAAM,CAAC,cAAD,EAAiBK,QAAQ,CAACG,IAAT,CAAciC,WAA/B,CAAN;AACAzC,cAAAA,MAAM,CAAC,yBAAD,EAA4BK,QAAQ,CAACG,IAAT,CAAckC,OAA1C,CAAN;AACAtB,cAAAA,OAAO,CAACC,GAAR,CAAYhB,QAAQ,CAACG,IAAT,CAAckC,OAA1B;AARsE;AAAA;;AAAA;AAAA;AAAA;AAUtEtB,cAAAA,OAAO,CAACC,GAAR,CAAY,aAAIhB,QAAhB;;AAVsE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAYzE,GA1Ha;AA2HRsC,EAAAA,uBA3HQ,0CA2HyD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAvC3C,cAAAA,MAAuC,SAAvCA,MAAuC,EAA/BzC,OAA+B,SAA/BA,OAA+B,EAAtBwE,QAAsB,SAAtBA,QAAsB;AAAVS,cAAAA,IAAU,6EAAH,CAAG;AAAA;AAAA;AAAA,qBAE5C7H,KAAK,CAACsF,GAAN,WAClBrF,OADkB,uDACkC4H,IADlC,GAErB;AAAEtC,gBAAAA,OAAO,EAAE;AAAEC,kBAAAA,aAAa,gBAAS5C,OAAO,CAAC6C,SAAjB;AAAf;AAAX,eAFqB,CAF4C;;AAAA;AAE7DC,cAAAA,QAF6D;AAMnEL,cAAAA,MAAM,CAAC,yBAAD,EAA4BK,QAAQ,CAACG,IAAT,CAAckC,OAA1C,CAAN;AACA1C,cAAAA,MAAM,CAAC,cAAD,EAAiBK,QAAQ,CAACG,IAAT,CAAcoC,KAA/B,CAAN;AAPmE;AAAA;;AAAA;AAAA;AAAA;AASnExB,cAAAA,OAAO,CAACC,GAAR,CAAY,aAAIhB,QAAhB;;AATmE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAWtE,GAtIa;AAuIRwC,EAAAA,mBAvIQ,sCAuI2C9C,OAvI3C,EAuIoD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAtCC,cAAAA,MAAsC,SAAtCA,MAAsC,EAA9BzC,OAA8B,SAA9BA,OAA8B,EAArBwE,QAAqB,SAArBA,QAAqB;AAAA;AAAA;AAAA,qBAEvCpH,KAAK,CAACsF,GAAN,WAAarF,OAAb,6BAA8C;AACnEsF,gBAAAA,OAAO,EAAE;AAAEC,kBAAAA,aAAa,gBAAS5C,OAAO,CAAC6C,SAAjB;AAAf;AAD0D,eAA9C,CAFuC;;AAAA;AAExDC,cAAAA,QAFwD;AAK9DL,cAAAA,MAAM,CAAC,qBAAD,EAAwBK,QAAQ,CAACG,IAAjC,CAAN;AAL8D;AAAA;;AAAA;AAAA;AAAA;AAO9DY,cAAAA,OAAO,CAACC,GAAR,CAAY,aAAIhB,QAAhB;;AAP8D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AASjE,GAhJa;AAiJRyC,EAAAA,uBAjJQ,2CAiJ+C/C,OAjJ/C,EAiJwD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAtCC,cAAAA,MAAsC,UAAtCA,MAAsC,EAA9BzC,OAA8B,UAA9BA,OAA8B,EAArBwE,QAAqB,UAArBA,QAAqB;AAAA;AAAA;AAAA,qBAE3CpH,KAAK,CAACsF,GAAN,WAClBrF,OADkB,kCAErB;AAAEsF,gBAAAA,OAAO,EAAE;AAAEC,kBAAAA,aAAa,gBAAS5C,OAAO,CAAC6C,SAAjB;AAAf;AAAX,eAFqB,CAF2C;;AAAA;AAE5DC,cAAAA,QAF4D;AAMlEL,cAAAA,MAAM,CAAC,yBAAD,EAA4BK,QAAQ,CAACG,IAArC,CAAN;AANkE;AAAA;;AAAA;AAAA;AAAA;AAQlEY,cAAAA,OAAO,CAACC,GAAR,CAAY,cAAIhB,QAAhB;;AARkE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAUrE,GA3Ja;AA4JR0C,EAAAA,sBA5JQ,0CA4J8ChD,OA5J9C,EA4JuD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAtCC,cAAAA,MAAsC,UAAtCA,MAAsC,EAA9BzC,OAA8B,UAA9BA,OAA8B,EAArBwE,QAAqB,UAArBA,QAAqB;AAAA;AAAA;AAAA,qBAE1CpH,KAAK,CAAC4G,IAAN,WAClB3G,OADkB,wCAErBmF,OAFqB,EAGrB;AAAEG,gBAAAA,OAAO,EAAE;AAAEC,kBAAAA,aAAa,gBAAS5C,OAAO,CAAC6C,SAAjB;AAAf;AAAX,eAHqB,CAF0C;;AAAA;AAE3DC,cAAAA,QAF2D;AAOjEL,cAAAA,MAAM,CAAC,wBAAD,EAA2BK,QAAQ,CAACG,IAApC,CAAN;AAPiE;AAAA;;AAAA;AAAA;AAAA;AASjEY,cAAAA,OAAO,CAACC,GAAR,CAAY,cAAIhB,QAAhB;;AATiE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAWpE,GAvKa;AAwKR2C,EAAAA,yBAxKQ,6CAwKiDjD,OAxKjD,EAwK0D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAtCC,cAAAA,MAAsC,UAAtCA,MAAsC,EAA9BzC,OAA8B,UAA9BA,OAA8B,EAArBwE,QAAqB,UAArBA,QAAqB;AAAA;AAEpEhC,cAAAA,OAAO,CAACQ,EAAR,GAAahD,OAAO,CAAClC,mBAAR,CAA4BkF,EAAzC;AAFoE;AAAA,qBAG7C5F,KAAK,CAACiH,GAAN,WAClBhH,OADkB,wCAErBmF,OAFqB,EAGrB;AAAEG,gBAAAA,OAAO,EAAE;AAAEC,kBAAAA,aAAa,gBAAS5C,OAAO,CAAC6C,SAAjB;AAAf;AAAX,eAHqB,CAH6C;;AAAA;AAG9DC,cAAAA,QAH8D;AAAA;AAAA;;AAAA;AAAA;AAAA;AASpEe,cAAAA,OAAO,CAACC,GAAR,CAAY,cAAIhB,QAAhB;;AAToE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAWvE,GAnLa;AAoLR4C,EAAAA,2BApLQ,+CAoLyClD,OApLzC,EAoLkD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAA5BC,cAAAA,MAA4B,UAA5BA,MAA4B,EAApBzC,OAAoB,UAApBA,OAAoB;AAAA;AAE5DwC,cAAAA,OAAO,CAACmD,kBAAR,GAA6B3F,OAAO,CAAClC,mBAAR,CAA4BkF,EAAzD;AAF4D;AAAA,qBAGrC5F,KAAK,CAAC4G,IAAN,WAClB3G,OADkB,uCAErBmF,OAFqB,EAGrB;AAAEG,gBAAAA,OAAO,EAAE;AAAEC,kBAAAA,aAAa,gBAAS5C,OAAO,CAAC6C,SAAjB;AAAf;AAAX,eAHqB,CAHqC;;AAAA;AAGtDC,cAAAA,QAHsD;AAAA;AAAA,qBAQtDL,MAAM,CAAC,6BAAD,EAAgCK,QAAQ,CAACG,IAAzC,CARgD;;AAAA;AAS5DR,cAAAA,MAAM,CAAC,8BAAD,EAAiC,KAAjC,CAAN;AAT4D;AAAA;;AAAA;AAAA;AAAA;AAW5DA,cAAAA,MAAM,CAAC,8BAAD,EAAiC,IAAjC,CAAN;AACImD,cAAAA,MAZwD,GAY/C;AAAE9E,gBAAAA,GAAG,EAAE,mBAAP;AAA4BC,gBAAAA,KAAK,EAAE,cAAI+B,QAAJ,CAAaG;AAAhD,eAZ+C;AAa5DR,cAAAA,MAAM,CAAC,0BAAD,EAA6BmD,MAA7B,CAAN;AACA/B,cAAAA,OAAO,CAACC,GAAR;;AAd4D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAgB/D,GApMa;AAqMR+B,EAAAA,8BArMQ,kDAqM4CrD,OArM5C,EAqMqD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAA5BC,cAAAA,MAA4B,UAA5BA,MAA4B,EAApBzC,OAAoB,UAApBA,OAAoB;AAAA;AAE/DwC,cAAAA,OAAO,CAACQ,EAAR,GAAahD,OAAO,CAACjC,wBAAR,CAAiCiF,EAA9C;AAF+D;AAAA,qBAGxC5F,KAAK,CAACiH,GAAN,WAClBhH,OADkB,uCAErBmF,OAFqB,EAGrB;AAAEG,gBAAAA,OAAO,EAAE;AAAEC,kBAAAA,aAAa,gBAAS5C,OAAO,CAAC6C,SAAjB;AAAf;AAAX,eAHqB,CAHwC;;AAAA;AAGzDC,cAAAA,QAHyD;AAQ/DL,cAAAA,MAAM,CAAC,6BAAD,EAAgCK,QAAQ,CAACG,IAAzC,CAAN;AACAR,cAAAA,MAAM,CAAC,8BAAD,EAAiC,KAAjC,CAAN;AAT+D;AAAA;;AAAA;AAAA;AAAA;AAW3DmD,cAAAA,MAX2D,GAWlD;AAAE9E,gBAAAA,GAAG,EAAE,mBAAP;AAA4BC,gBAAAA,KAAK,EAAE,cAAI+B,QAAJ,CAAaG;AAAhD,eAXkD;AAY/DR,cAAAA,MAAM,CAAC,0BAAD,EAA6BmD,MAA7B,CAAN;AACAnD,cAAAA,MAAM,CAAC,8BAAD,EAAiC,IAAjC,CAAN;AACAoB,cAAAA,OAAO,CAACC,GAAR,CAAY,cAAIhB,QAAhB;;AAd+D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAgBlE,GArNa;AAsNRgD,EAAAA,kBAtNQ,sCAsNgCtD,OAtNhC,EAsNyC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAA5BC,cAAAA,MAA4B,UAA5BA,MAA4B,EAApBzC,OAAoB,UAApBA,OAAoB;AAAA;AAEnDwC,cAAAA,OAAO,CAACmD,kBAAR,GAA6B3F,OAAO,CAAClC,mBAAR,CAA4BkF,EAAzD;AAFmD;AAAA,qBAG5B5F,KAAK,CAAC4G,IAAN,WAClB3G,OADkB,6BAErBmF,OAFqB,EAGrB;AAAEG,gBAAAA,OAAO,EAAE;AAAEC,kBAAAA,aAAa,gBAAS5C,OAAO,CAAC6C,SAAjB;AAAf;AAAX,eAHqB,CAH4B;;AAAA;AAG7CC,cAAAA,QAH6C;AAQnDL,cAAAA,MAAM,CAAC,4BAAD,EAA+B,KAA/B,CAAN;AACAA,cAAAA,MAAM,CAAC,oBAAD,EAAuBK,QAAQ,CAACG,IAAhC,CAAN;AATmD;AAAA;;AAAA;AAAA;AAAA;AAW/C2C,cAAAA,MAX+C,GAWtC;AAAE9E,gBAAAA,GAAG,EAAE,kBAAP;AAA2BC,gBAAAA,KAAK,EAAE,cAAI+B,QAAJ,CAAaG;AAA/C,eAXsC;AAYnDR,cAAAA,MAAM,CAAC,0BAAD,EAA6BmD,MAA7B,CAAN;AACAnD,cAAAA,MAAM,CAAC,4BAAD,EAA+B,IAA/B,CAAN;AACAoB,cAAAA,OAAO,CAACC,GAAR,CAAY,cAAIhB,QAAhB;;AAdmD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAgBtD,GAtOa;AAuORiD,EAAAA,uBAvOQ,2CAuOqCvD,OAvOrC,EAuO8C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAA5BC,cAAAA,MAA4B,UAA5BA,MAA4B,EAApBzC,OAAoB,UAApBA,OAAoB;AAAA;AAExDwC,cAAAA,OAAO,CAACmD,kBAAR,GAA6B3F,OAAO,CAAClC,mBAAR,CAA4BkF,EAAzD;AAFwD;AAAA,qBAGjC5F,KAAK,CAAC4G,IAAN,WAClB3G,OADkB,mCAErBmF,OAFqB,EAGrB;AAAEG,gBAAAA,OAAO,EAAE;AAAEC,kBAAAA,aAAa,gBAAS5C,OAAO,CAAC6C,SAAjB;AAAf;AAAX,eAHqB,CAHiC;;AAAA;AAGlDC,cAAAA,QAHkD;AAQxDL,cAAAA,MAAM,CAAC,iCAAD,EAAoC,KAApC,CAAN;AACAA,cAAAA,MAAM,CAAC,yBAAD,EAA4BK,QAAQ,CAACG,IAArC,CAAN;AATwD;AAAA;;AAAA;AAAA;AAAA;AAWpD2C,cAAAA,MAXoD,GAW3C;AAAE9E,gBAAAA,GAAG,EAAE,wBAAP;AAAiCC,gBAAAA,KAAK,EAAE,cAAI+B,QAAJ,CAAaG;AAArD,eAX2C;AAYxDR,cAAAA,MAAM,CAAC,0BAAD,EAA6BmD,MAA7B,CAAN;AACAnD,cAAAA,MAAM,CAAC,iCAAD,EAAoC,IAApC,CAAN;AACAoB,cAAAA,OAAO,CAACC,GAAR,CAAY,cAAIhB,QAAhB;;AAdwD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAgB3D,GAvPa;AAwPRkD,EAAAA,qBAxPQ,yCAwPmCxD,OAxPnC,EAwP4C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAA5BC,cAAAA,MAA4B,UAA5BA,MAA4B,EAApBzC,OAAoB,UAApBA,OAAoB;AAAA;AAEtDwC,cAAAA,OAAO,CAACQ,EAAR,GAAahD,OAAO,CAAChC,eAAR,CAAwBgF,EAArC;AAFsD;AAAA,qBAG/B5F,KAAK,CAACiH,GAAN,WAClBhH,OADkB,6BAErBmF,OAFqB,EAGrB;AAAEG,gBAAAA,OAAO,EAAE;AAAEC,kBAAAA,aAAa,gBAAS5C,OAAO,CAAC6C,SAAjB;AAAf;AAAX,eAHqB,CAH+B;;AAAA;AAGhDC,cAAAA,QAHgD;AAQtDL,cAAAA,MAAM,CAAC,oBAAD,EAAuBK,QAAQ,CAACG,IAAhC,CAAN;AACAR,cAAAA,MAAM,CAAC,4BAAD,EAA+B,KAA/B,CAAN;AATsD;AAAA;;AAAA;AAAA;AAAA;AAWlDmD,cAAAA,MAXkD,GAWzC;AAAE9E,gBAAAA,GAAG,EAAE,kBAAP;AAA2BC,gBAAAA,KAAK,EAAE,cAAI+B,QAAJ,CAAaG;AAA/C,eAXyC;AAYtDR,cAAAA,MAAM,CAAC,0BAAD,EAA6BmD,MAA7B,CAAN;AACAnD,cAAAA,MAAM,CAAC,4BAAD,EAA+B,IAA/B,CAAN;AACAoB,cAAAA,OAAO,CAACC,GAAR,CAAY,cAAIhB,QAAhB;;AAdsD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAgBzD,GAxQa;AAyQRmD,EAAAA,0BAzQQ,8CAyQwCzD,OAzQxC,EAyQiD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAA5BC,cAAAA,MAA4B,UAA5BA,MAA4B,EAApBzC,OAAoB,UAApBA,OAAoB;AAAA;AAE3DwC,cAAAA,OAAO,CAACQ,EAAR,GAAahD,OAAO,CAAC/B,oBAAR,CAA6B+E,EAA1C;AAF2D;AAAA,qBAGpC5F,KAAK,CAACiH,GAAN,WAClBhH,OADkB,mCAErBmF,OAFqB,EAGrB;AAAEG,gBAAAA,OAAO,EAAE;AAAEC,kBAAAA,aAAa,gBAAS5C,OAAO,CAAC6C,SAAjB;AAAf;AAAX,eAHqB,CAHoC;;AAAA;AAGrDC,cAAAA,QAHqD;AAQ3DL,cAAAA,MAAM,CAAC,yBAAD,EAA4BK,QAAQ,CAACG,IAArC,CAAN;AACAR,cAAAA,MAAM,CAAC,iCAAD,EAAoC,KAApC,CAAN;AAT2D;AAAA;;AAAA;AAAA;AAAA;AAWvDmD,cAAAA,MAXuD,GAW9C;AAAE9E,gBAAAA,GAAG,EAAE,wBAAP;AAAiCC,gBAAAA,KAAK,EAAE,cAAI+B,QAAJ,CAAaG;AAArD,eAX8C;AAY3DR,cAAAA,MAAM,CAAC,0BAAD,EAA6BmD,MAA7B,CAAN;AACA/B,cAAAA,OAAO,CAACC,GAAR,CAAY,cAAIhB,QAAhB;AACAL,cAAAA,MAAM,CAAC,iCAAD,EAAoC,IAApC,CAAN;;AAd2D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAgB9D,GAzRa;AA0RRyD,EAAAA,kCA1RQ,sDA0RgD1D,OA1RhD,EA0RyD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAA5BC,cAAAA,MAA4B,UAA5BA,MAA4B,EAApBzC,OAAoB,UAApBA,OAAoB;AAAA;AAAA;AAAA,qBAE5C5C,KAAK,CAAC4G,IAAN,WAClB3G,OADkB,8CAErBmF,OAFqB,EAGrB;AAAEG,gBAAAA,OAAO,EAAE;AAAEC,kBAAAA,aAAa,gBAAS5C,OAAO,CAAC6C,SAAjB;AAAf;AAAX,eAHqB,CAF4C;;AAAA;AAE7DC,cAAAA,QAF6D;AAOnEL,cAAAA,MAAM,CAAC,oCAAD,EAAuCK,QAAQ,CAACG,IAAhD,CAAN;AAPmE;AAAA;;AAAA;AAAA;AAAA;AASnEY,cAAAA,OAAO,CAACC,GAAR,CAAY,cAAIhB,QAAhB;;AATmE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAWtE,GArSa;AAsSRqD,EAAAA,0BAtSQ,8CAsSkD3D,OAtSlD,EAsS2D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAtCC,cAAAA,MAAsC,UAAtCA,MAAsC,EAA9BzC,OAA8B,UAA9BA,OAA8B,EAArBwE,QAAqB,UAArBA,QAAqB;AAAA;AAErE/B,cAAAA,MAAM,CAAC,YAAD,EAAe,IAAf,CAAN;AAFqE;AAAA,qBAG9CrF,KAAK,CAAC4G,IAAN,WAClB3G,OADkB,iCAErBmF,OAFqB,EAGrB;AAAEG,gBAAAA,OAAO,EAAE;AAAEC,kBAAAA,aAAa,gBAAS5C,OAAO,CAAC6C,SAAjB;AAAf;AAAX,eAHqB,CAH8C;;AAAA;AAG/DC,cAAAA,QAH+D;AAAA;AAAA,qBAQ/D0B,QAAQ,CAAC,oCAAD,CARuD;;AAAA;AASrE/B,cAAAA,MAAM,CAAC,YAAD,EAAe,KAAf,CAAN;AATqE;AAAA;;AAAA;AAAA;AAAA;AAWrEoB,cAAAA,OAAO,CAACC,GAAR,CAAY,cAAIhB,QAAhB;AACAL,cAAAA,MAAM,CAAC,YAAD,EAAe,KAAf,CAAN;;AAZqE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAcxE,GApTa;AAqTR2D,EAAAA,kCArTQ,sDAqTgD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAnB3D,cAAAA,MAAmB,UAAnBA,MAAmB,EAAXzC,OAAW,UAAXA,OAAW;AAAA;AAEtDwC,cAAAA,OAFsD,GAE5C;AAAEQ,gBAAAA,EAAE,EAAEhD,OAAO,CAACpB,+BAAR,CAAwCoE;AAA9C,eAF4C;AAAA;AAAA,qBAGnC5F,KAAK,CAACsF,GAAN,WAClBrF,OADkB,8CAErB;AACEsF,gBAAAA,OAAO,EAAE;AAAEC,kBAAAA,aAAa,gBAAS5C,OAAO,CAAC6C,SAAjB;AAAf,iBADX;AAEEwD,gBAAAA,MAAM,EAAE7D;AAFV,eAFqB,CAHmC;;AAAA;AAGpDM,cAAAA,QAHoD;AAU1De,cAAAA,OAAO,CAACC,GAAR,CAAYhB,QAAQ,CAACG,IAAT,CAAcqD,iBAA1B;AACAxD,cAAAA,QAAQ,CAACG,IAAT,CAAcsD,oBAAd,GAAqCzD,QAAQ,CAACG,IAAT,CAAcsD,oBAAd,CAAmCC,MAAnC,CACnC,UAACC,IAAD;AAAA,uBAAUA,IAAI,CAACC,SAAL,IAAkB,IAA5B;AAAA,eADmC,CAArC;AAGAjE,cAAAA,MAAM,CAAC,yBAAD,EAA4BK,QAAQ,CAACG,IAArC,CAAN;;AACA,kBAAIH,QAAQ,CAACG,IAAT,CAAcqD,iBAAd,CAAgCK,MAAhC,GAAyC,CAA7C,EAAgD;AAC9C7D,gBAAAA,QAAQ,CAACG,IAAT,CAAcqD,iBAAd,CAAgCM,GAAhC,CAAoC,UAACH,IAAD,EAAU;AAC5C,sBAAIA,IAAI,CAACrC,QAAL,KAAkB,OAAtB,EAA+B;AAC7B3B,oBAAAA,MAAM,CAAC,mBAAD,EAAsBgE,IAAtB,CAAN;AACD,mBAFD,MAEO,IAAIA,IAAI,CAACrC,QAAL,KAAkB,WAAtB,EAAmC;AACxC3B,oBAAAA,MAAM,CAAC,uBAAD,EAA0BgE,IAA1B,CAAN;AACD,mBAFM,MAEA,IAAIA,IAAI,CAACrC,QAAL,KAAkB,eAAtB,EAAuC;AAC5C3B,oBAAAA,MAAM,CAAC,2BAAD,EAA8BgE,IAA9B,CAAN;AACD,mBAFM,MAEA,IAAIA,IAAI,CAACrC,QAAL,KAAkB,cAAtB,EAAsC;AAC3C3B,oBAAAA,MAAM,CAAC,gBAAD,EAAmBgE,IAAnB,CAAN;AACD,mBAFM,MAEA,IAAIA,IAAI,CAACrC,QAAL,KAAkB,cAAtB,EAAsC;AAC3C3B,oBAAAA,MAAM,CAAC,gBAAD,EAAmBgE,IAAnB,CAAN;AACD;AACF,iBAZD;AAaD;;AACD5C,cAAAA,OAAO,CAACC,GAAR,CAAYhB,QAAQ,CAACG,IAArB;AA9B0D;AAAA;;AAAA;AAAA;AAAA;AAgC1DY,cAAAA,OAAO,CAACC,GAAR;;AAhC0D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAkC7D,GAvVa;AAwVR+C,EAAAA,yBAxVQ,6CAwViDrE,OAxVjD,EAwV0D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAtCC,cAAAA,MAAsC,UAAtCA,MAAsC,EAA9BzC,OAA8B,UAA9BA,OAA8B,EAArBwE,QAAqB,UAArBA,QAAqB;AAAA;AAAA;AAAA,qBAE7CpH,KAAK,CAAC4G,IAAN,WAClB3G,OADkB,sCAErBmF,OAFqB,EAGrB;AAAEG,gBAAAA,OAAO,EAAE;AAAEC,kBAAAA,aAAa,gBAAS5C,OAAO,CAAC6C,SAAjB;AAAf;AAAX,eAHqB,CAF6C;;AAAA;AAE9DC,cAAAA,QAF8D;AAOpEL,cAAAA,MAAM,CAAC,8BAAD,EAAiCK,QAAQ,CAACG,IAAT,CAAc8B,OAA/C,CAAN;;AACA,kBAAG,CAAC/E,OAAO,CAACJ,kBAAZ,EAA+B;AAC7B4E,gBAAAA,QAAQ,CAAC,cAAD,EAAiB;AACvBK,kBAAAA,IAAI,EAAE,SADiB;AAEvBC,kBAAAA,KAAK,EAAE,UAFgB;AAGvBC,kBAAAA,OAAO,EAAEjC,QAAQ,CAACG,IAAT,CAAc6D;AAHA,iBAAjB,CAAR;AAKD;;AAdmE;AAAA;;AAAA;AAAA;AAAA;AAgBpEjD,cAAAA,OAAO,CAACC,GAAR;;AACA,kBAAI,cAAIhB,QAAR,EAAkB;AAChBe,gBAAAA,OAAO,CAACC,GAAR,CAAY,cAAIhB,QAAhB;AACA0B,gBAAAA,QAAQ,CAAC,cAAD,EAAiB;AACvBK,kBAAAA,IAAI,EAAE,OADiB;AAEvBC,kBAAAA,KAAK,EAAE,SAFgB;AAGvBC,kBAAAA,OAAO,EAAE,cAAIjC,QAAJ,CAAaG,IAAb,CAAkB6D;AAHJ,iBAAjB,CAAR;AAKD;;AAxBmE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AA0BvE,GAlXa;AAmXRC,EAAAA,2BAnXQ,+CAmXyCvE,OAnXzC,EAmXkD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAA5BC,cAAAA,MAA4B,UAA5BA,MAA4B,EAApBzC,OAAoB,UAApBA,OAAoB;AAAA;AAAA;AAAA,qBAErC5C,KAAK,CAACsF,GAAN,WAClBrF,OADkB,sCAErB;AACEsF,gBAAAA,OAAO,EAAE;AAAEC,kBAAAA,aAAa,gBAAS5C,OAAO,CAAC6C,SAAjB;AAAf,iBADX;AAEEwD,gBAAAA,MAAM,EAAE7D;AAFV,eAFqB,CAFqC;;AAAA;AAEtDM,cAAAA,QAFsD;AAS5DL,cAAAA,MAAM,CAAC,6BAAD,EAAgCK,QAAQ,CAACG,IAAzC,CAAN;AAT4D;AAAA;;AAAA;AAAA;AAAA;AAW5DY,cAAAA,OAAO,CAACC,GAAR;;AACA,kBAAI,cAAIhB,QAAR,EAAkB;AAChBe,gBAAAA,OAAO,CAACC,GAAR,CAAY,cAAIhB,QAAhB;AACD;;AAd2D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAgB/D,GAnYa;AAoYRkE,EAAAA,0BApYQ,8CAoYwCxE,OApYxC,EAoYiD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAA5BC,cAAAA,MAA4B,UAA5BA,MAA4B,EAApBzC,OAAoB,UAApBA,OAAoB;AAAA;AAAA;AAAA,qBAEpC5C,KAAK,CAACsF,GAAN,WAClBrF,OADkB,+CAErB;AACEsF,gBAAAA,OAAO,EAAE;AAAEC,kBAAAA,aAAa,gBAAS5C,OAAO,CAAC6C,SAAjB;AAAf,iBADX;AAEEwD,gBAAAA,MAAM,EAAE7D;AAFV,eAFqB,CAFoC;;AAAA;AAErDM,cAAAA,QAFqD;AAS3DL,cAAAA,MAAM,CAAC,0BAAD,EAA6BK,QAAQ,CAACG,IAAT,CAAcgE,UAA3C,CAAN;AACAxE,cAAAA,MAAM,CAAC,uBAAD,EAA0BK,QAAQ,CAACG,IAAT,CAAciE,eAAxC,CAAN;AAV2D;AAAA;;AAAA;AAAA;AAAA;AAY3DrD,cAAAA,OAAO,CAACC,GAAR;;AACA,kBAAI,cAAIhB,QAAR,EAAkB;AAChBe,gBAAAA,OAAO,CAACC,GAAR,CAAY,cAAIhB,QAAhB;AACD;;AAf0D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAiB9D,GArZa;AAsZRqE,EAAAA,4BAtZQ,gDAsZiD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAA3B1E,cAAAA,MAA2B,UAA3BA,MAA2B,EAAnBzC,OAAmB,UAAnBA,OAAmB;AAATiF,cAAAA,IAAS,6EAAF,CAAE;AAAA;AAAA;AAAA,qBAEpC7H,KAAK,CAACsF,GAAN,WAClBrF,OADkB,sDACiC4H,IADjC,GAErB;AACEtC,gBAAAA,OAAO,EAAE;AAAEC,kBAAAA,aAAa,gBAAS5C,OAAO,CAAC6C,SAAjB;AAAf;AADX,eAFqB,CAFoC;;AAAA;AAErDC,cAAAA,QAFqD;AAQ3DL,cAAAA,MAAM,CAAC,8BAAD,EAAiCK,QAAQ,CAACG,IAAT,CAAckC,OAA/C,CAAN;AACA1C,cAAAA,MAAM,CAAC,cAAD,EAAiBK,QAAQ,CAACG,IAAT,CAAciC,WAA/B,CAAN;AAT2D;AAAA;;AAAA;AAAA;AAAA;AAW3DrB,cAAAA,OAAO,CAACC,GAAR;;AACA,kBAAG,cAAIhB,QAAP,EAAgB;AACde,gBAAAA,OAAO,CAACC,GAAR,CAAY,cAAIhB,QAAJ,CAAaG,IAAzB;AACD;;AAd0D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAgB9D,GAtaa;AAuaRmE,EAAAA,uBAvaQ,2CAua+C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAA7B3E,cAAAA,MAA6B,UAA7BA,MAA6B,EAArBzC,OAAqB,UAArBA,OAAqB;AAAViF,cAAAA,IAAU,6EAAH,CAAG;AAAA;AAAA;AAAA,qBAElC7H,KAAK,CAACsF,GAAN,WAClBrF,OADkB,4DACuC4H,IADvC,GAErB;AACEtC,gBAAAA,OAAO,EAAE;AAAEC,kBAAAA,aAAa,gBAAS5C,OAAO,CAAC6C,SAAjB;AAAf;AADX,eAFqB,CAFkC;;AAAA;AAEnDC,cAAAA,QAFmD;AAQzDL,cAAAA,MAAM,CAAC,yBAAD,EAA4BK,QAAQ,CAACG,IAAT,CAAckC,OAA1C,CAAN;AACA1C,cAAAA,MAAM,CAAC,cAAD,EAAiBK,QAAQ,CAACG,IAAT,CAAciC,WAA/B,CAAN;AATyD;AAAA;;AAAA;AAAA;AAAA;AAWzDrB,cAAAA,OAAO,CAACC,GAAR;;AACA,kBAAI,cAAIhB,QAAR,EAAkB;AAChBe,gBAAAA,OAAO,CAACC,GAAR,CAAY,cAAIhB,QAAJ,CAAaG,IAAzB;AACD;;AAdwD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAgB5D,GAvba;AAwbRoE,EAAAA,uBAxbQ,2CAwbmC7E,OAxbnC,EAwb2C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAA1BC,cAAAA,MAA0B,UAA1BA,MAA0B,EAAlBzC,OAAkB,UAAlBA,OAAkB;AAAA;AAAA;AAAA,qBAE9B5C,KAAK,CAACiH,GAAN,WAAahH,OAAb,uCAAuDmF,OAAvD,EAA+D;AACpFG,gBAAAA,OAAO,EAAE;AAAEC,kBAAAA,aAAa,gBAAS5C,OAAO,CAAC6C,SAAjB;AAAf;AAD2E,eAA/D,CAF8B;;AAAA;AAE/CC,cAAAA,QAF+C;AAAA;AAAA;;AAAA;AAAA;AAAA;AAMrDe,cAAAA,OAAO,CAACC,GAAR;;AACA,kBAAI,cAAIhB,QAAR,EAAkB;AAChBe,gBAAAA,OAAO,CAACC,GAAR,CAAY,cAAIhB,QAAJ,CAAaG,IAAzB;AACD;;AAToD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAWxD,GAnca;AAocRqE,EAAAA,+BApcQ,mDAoc6C9E,OApc7C,EAocsD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAA5BC,cAAAA,MAA4B,UAA5BA,MAA4B,EAApBzC,OAAoB,UAApBA,OAAoB;AAAA;AAAA;AAAA,qBAEzC5C,KAAK,CAACsF,GAAN,WAClBrF,OADkB,uCAErB;AACEsF,gBAAAA,OAAO,EAAE;AAAEC,kBAAAA,aAAa,gBAAS5C,OAAO,CAAC6C,SAAjB;AAAf,iBADX;AAEEwD,gBAAAA,MAAM,EAAE7D;AAFV,eAFqB,CAFyC;;AAAA;AAE1DM,cAAAA,QAF0D;AAShEL,cAAAA,MAAM,CAAC,6BAAD,EAAgCK,QAAQ,CAACG,IAAzC,CAAN;AATgE;AAAA;;AAAA;AAAA;AAAA;AAWhEY,cAAAA,OAAO,CAACC,GAAR;;AACA,kBAAI,cAAIhB,QAAR,EAAkB;AAChBe,gBAAAA,OAAO,CAACC,GAAR,CAAY,cAAIhB,QAAhB;AACD;;AAd+D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAgBnE;AApda,CAAhB;AAudA,eAAe;AACb/C,EAAAA,KAAK,EAALA,KADa;AAEbC,EAAAA,OAAO,EAAPA,OAFa;AAGbsC,EAAAA,OAAO,EAAPA,OAHa;AAIbrC,EAAAA,SAAS,EAATA;AAJa,CAAf","sourcesContent":["import axios from \"axios\";\nconst baseUrl = process.env.VUE_APP_API_URL;\nconst oneDocToken = process.env.VUE_APP_ONE_DOC_TOKEN;\nimport router from \"../../router/index.js\";\nconst getDefaultPropertyState = () => {\n  return {\n    currentPropertyStep: \"1\",\n    buildingApplication: {},\n    buildingBasicInformation: {},\n    buildingDetails: {},\n    buildingOtherDetails: {},\n    buildingBasicInfoHasError: false,\n    buildingDetailsHasError: false,\n    buildingOtherDetailsHasError: false,\n    buildingStepOneErrors: {\n      basic_information: [],\n    },\n    buildingStepTwoErrors: {\n      building_details: [],\n      building_other_details: [],\n    },\n    buildingApplications: [],\n    buildingProfiles: [],\n    buildingApplicationRequirements: {},\n    buildingRequirements: [],\n    draftProperty: false,\n    realPropertyProfiles: [],\n    applicationRemarks: {},\n    legalDocuments: {},\n    technicalDocuments: {},\n    supplementaryDocuments: {},\n    designPlans: {},\n    designSpecs: {},\n    currentBuildingId: 0,\n    buildingSearch: \"\",\n    propertyFilterBy: \"all\",\n    buildingAssessmentMessage: \"\",\n    buildingAssessmentResult: [],\n    buildingDeptCanAssess: false,\n    isLastBuildingDept: false,\n    forBuildingAssessmentList: [],\n    assessedBuildingList: []\n  };\n};\n\nconst state = getDefaultPropertyState();\n\nconst getters = {\n  currentPropertyStep: (state) => state.currentPropertyStep,\n  buildingApplication: (state) => state.buildingApplication,\n  buildingBasicInformation: (state) => state.buildingBasicInformation,\n  buildingDetails: (state) => state.buildingDetails,\n  buildingOtherDetails: (state) => state.buildingOtherDetails,\n  buildingBasicInfoHasError: (state) => state.buildingBasicInfoHasError,\n  buildingDetailsHasError: (state) => state.buildingDetailsHasError,\n  buildingOtherDetailsHasError: (state) => state.buildingOtherDetailsHasError,\n  buildingStepOneErrors: (state) => state.buildingStepOneErrors,\n  buildingStepTwoErrors: (state) => state.buildingStepTwoErrors,\n  buildingApplications: (state) => state.buildingApplications,\n  buildingProfiles: (state) => state.buildingProfiles,\n  draftProperty: (state) => state.draftProperty,\n  buildingApplicationRequirements: (state) =>\n    state.buildingApplicationRequirements,\n  buildingRequirements: (state) => state.buildingRequirements,\n  realPropertyProfiles: (state) => state.realPropertyProfiles,\n  applicationRemarks: (state) => state.applicationRemarks,\n  legalDocuments: (state) => state.legalDocuments,\n  technicalDocuments: (state) => state.technicalDocuments,\n  supplementaryDocuments: (state) => state.supplementaryDocuments,\n  designPlans: (state) => state.designPlans,\n  designSpecs: (state) => state.designSpecs,\n  currentBuildingId: (state) => state.currentBuildingId,\n  buildingSearch: (state) => state.buildingSearch,\n  propertyFilterBy: (state) => state.propertyFilterBy,\n  buildingAssessmentMessage: (state) => state.buildingAssessmentMessage,\n  buildingAssessmentResult: (state) => state.buildingAssessmentResult,\n  buildingDeptCanAssess: (state) => state.buildingDeptCanAssess,\n  isLastBuildingDept: (state) => state.isLastBuildingDept,\n  forBuildingAssessmentList: (state) => state.forBuildingAssessmentList,\n  assessedBuildingList: (state) => state.assessedBuildingList\n};\n\nconst mutations = {\n  setCurrentPropertyStep: (state, currentPropertyStep) =>\n    (state.currentPropertyStep = currentPropertyStep),\n  resetPropertyState: (state) =>\n    Object.assign(state, getDefaultPropertyState()),\n  setBuildingApplication: (state, buildingApplication) =>\n    (state.buildingApplication = buildingApplication),\n  setBuildingBasicInformation: (state, buildingBasicInformation) =>\n    (state.buildingBasicInformation = buildingBasicInformation),\n  setBuildingDetails: (state, buildingDetails) =>\n    (state.buildingDetails = buildingDetails),\n  setBuildingOtherDetails: (state, buildingOtherDetails) =>\n    (state.buildingOtherDetails = buildingOtherDetails),\n  setBuildingBasicInfoHasError: (state, buildingBasicInfoHasError) =>\n    (state.buildingBasicInfoHasError = buildingBasicInfoHasError),\n  setBuildingDetailsHasError: (state, buildingDetailsHasError) =>\n    (state.buildingDetailsHasError = buildingDetailsHasError),\n  setBuildingOtherDetailsHasError: (state, buildingOtherDetailsHasError) =>\n    (state.buildingOtherDetailsHasError = buildingOtherDetailsHasError),\n  buildingSetStepOneErrors: (state, buildingStepOneErrors) => {\n    state.buildingStepOneErrors[`${buildingStepOneErrors.key}`] =\n      buildingStepOneErrors.value;\n  },\n  buildingSetStepTwoErrors: (state, buildingStepTwoErrors) => {\n    state.buildingStepTwoErrors[`${buildingStepTwoErrors.key}`] =\n      buildingStepTwoErrors.value;\n  },\n  setBuildingApplications: (state, buildingApplications) =>\n    (state.buildingApplications = buildingApplications),\n  setBuildingProfiles: (state, buildingProfiles) =>\n    (state.buildingProfiles = buildingProfiles),\n  setDraftProperty: (state, draftProperty) =>\n    (state.draftProperty = draftProperty),\n  setBuildingApplicationRequirements: (\n    state,\n    buildingApplicationRequirements\n  ) =>\n    (state.buildingApplicationRequirements = buildingApplicationRequirements),\n  setBuildingRequirements: (state, buildingRequirements) =>\n    (state.buildingRequirements = buildingRequirements),\n  setRealPropertyProfiles: (state, realPropertyProfiles) =>\n    (state.realPropertyProfiles = realPropertyProfiles),\n  setApplicationRemarks: (state, applicationRemarks) => (state.applicationRemarks = applicationRemarks),\n  setLegalDocuments: (state, legalDocuments) =>\n    (state.legalDocuments = legalDocuments),\n  setTechnicalDocuments: (state, technicalDocuments) =>\n    (state.technicalDocuments = technicalDocuments),\n  setSupplementaryDocuments: (state, supplementaryDocuments) =>\n    (state.supplementaryDocuments = supplementaryDocuments),\n  setCurrentBuildingId: (state, currentBuildingId) =>\n    (state.currentBuildingId = currentBuildingId),\n  setBuildingSearch: (state, buildingSearch) =>\n    (state.buildingSearch = buildingSearch),\n  setDesignPlans: (state, designPlans) => (state.designPlans = designPlans),\n  setDesignSpecs: (state, designSpecs) => (state.designSpecs = designSpecs),\n  setPropertyFilterBy: (state, propertyFilterBy) =>\n    (state.propertyFilterBy = propertyFilterBy),\n  setBuildingAssessmentMessage: (state, buildingAssessmentMessage) =>\n    (state.buildingAssessmentMessage = buildingAssessmentMessage),\n  setBuildingAssessmentResult: (state, buildingAssessmentResult) =>\n    (state.buildingAssessmentResult = buildingAssessmentResult),\n  setBuildingDeptCanAssess: (state, buildingDeptCanAssess) =>\n    (state.buildingDeptCanAssess = buildingDeptCanAssess),\n  setIsLastBuildingDept: (state, isLastBuildingDept) => (state.isLastBuildingDept = isLastBuildingDept),\n  setForBuildingAssessmentList: (state, forBuildingAssessmentList) => (state.forBuildingAssessmentList = forBuildingAssessmentList),\n  setAssessedBuildingList: (state, assessedBuildingList) => (state.assessedBuildingList = assessedBuildingList)\n};\n\nconst actions = {\n  async getBuildingApplication({ commit, getters }, payload) {\n    try {\n      const response = await axios.get(\n        `${baseUrl}/api/building-application?application_number=${payload}`,\n        { headers: { Authorization: `jwt ${getters.authToken}` } }\n      );\n      let application = {\n        id: response.data.id,\n        is_draft: response.data.is_draft,\n        is_approve: response.data.is_approve,\n        is_disapprove: response.data.is_disapprove,\n        created_at: response.data.created_at,\n        application_status: response.data.application_status,\n      };\n      await commit(\"setBuildingApplication\", application);\n      await commit(\n        \"setBuildingBasicInformation\",\n        response.data.buildingbasicinformation\n      );\n      await commit(\"setBuildingDetails\", response.data.buildingdetails);\n      await commit(\n        \"setBuildingOtherDetails\",\n        response.data.buildingotherdetails\n      );\n      await commit(\n        \"setBuildingApplicationRequirements\",\n        response.data.buildingapplicationrequirements[0]\n      );\n      await router.push({ name: \"BuildingPermitApplication\" });\n    } catch (err) {\n      commit(\"setLoading\", false);\n      console.log(err);\n    }\n  },\n  async setBuildingCheckList({ commit, getters }, payload) {\n    try {\n      console.log(\"post checklist \", payload);\n      const response = await axios.post(\n        `${baseUrl}/api/building-checklist/`,\n        payload,\n        { headers: { Authorization: `jwt ${getters.authToken}` } }\n      );\n      let value = JSON.parse(payload.value);\n    } catch (err) {\n      commit(\"setLoading\", false);\n      console.log(err.response);\n    }\n  },\n  async updateBuildingCheckList({ commit, getters }, payload) {\n    try {\n      console.log(\"put checklist \", payload.category);\n      const response = await axios.put(\n        `${baseUrl}/api/building-checklist/`,\n        payload,\n        { headers: { Authorization: `jwt ${getters.authToken}` } }\n      );\n      console.log(response.data);\n    } catch (err) {\n      commit(\"setLoading\", false);\n      console.log(err.response);\n    }\n  },\n  async setApplicationStateRemarks({ commit, getters }, payload) {\n    await commit(\"setApplicationRemarks\", payload);\n  },\n  async propertyEnrollment({ commit, dispatch, getters }, payload) {\n    let config = {\n      headers: {\n        \"OneDoc-Token\": oneDocToken,\n      },\n    };\n    const response = await axios.post(\n      `http://122.55.20.85:8012/lguapi/`,\n      payload,\n      config\n    );\n    console.log(response.data);\n  },\n  async approveBuildingApplication({ commit, dispatch, getters }, payload) {\n    try {\n      const response = await axios.put(\n        `${baseUrl}/staff/building-permit-application/`,\n        payload,\n        { headers: { Authorization: `jwt ${getters.authToken}` } }\n      );\n      // # 0 = For approval, 1 = disapprove / incomplete, 2 = complete, 3 = for inspection, 4 = for compliance, 5 = for payment / approve\n\n      let action =\n        payload.status == 1\n          ? \"incomplete\"\n          : payload.status == 2\n          ? \"for evaluation\"\n          : payload.status == 3\n          ? \"for inspection\"\n          : payload.status == 4\n          ? \"for compliance\"\n          : \"for payment\";\n\n      dispatch(\"createPrompt\", {\n        type: \"success\",\n        title: \"Success!\",\n        message: `Application was successfully set to ${action}!`,\n      });\n      router.push({ name: \"Applications\" });\n    } catch (err) {\n      console.log(err);\n      commit(\"setLoading\", false);\n    }\n  },\n  async getAllBuildingApplications({ commit, getters, dispatch }, page = 1) {\n    try {\n      const response = await axios.get(\n        `${baseUrl}/staff/building-permit-application-list/?page=${page}&filter_by=${getters.propertyFilterBy}&id=${getters.buildingSearch}`,\n        { headers: { Authorization: `jwt ${getters.authToken}` } }\n      );\n      commit(\"setPageCount\", response.data.total_pages);\n      commit(\"setBuildingApplications\", response.data.results);\n      console.log(response.data.results);\n    } catch (err) {\n      console.log(err.response);\n    }\n  },\n  async getBuildingApplications({ commit, getters, dispatch }, page = 1) {\n    try {\n      const response = await axios.get(\n        `${baseUrl}/api/user-building-application-list/?page=${page}`,\n        { headers: { Authorization: `jwt ${getters.authToken}` } }\n      );\n      commit(\"setBuildingApplications\", response.data.results);\n      commit(\"setPageCount\", response.data.count);\n    } catch (err) {\n      console.log(err.response);\n    }\n  },\n  async getBuildingProfiles({ commit, getters, dispatch }, payload) {\n    try {\n      const response = await axios.get(`${baseUrl}/api/building-profile/`, {\n        headers: { Authorization: `jwt ${getters.authToken}` },\n      });\n      commit(\"setBuildingProfiles\", response.data);\n    } catch (err) {\n      console.log(err.response);\n    }\n  },\n  async getRealPropertyProfiles({ commit, getters, dispatch }, payload) {\n    try {\n      const response = await axios.get(\n        `${baseUrl}/api/real-property-profile/`,\n        { headers: { Authorization: `jwt ${getters.authToken}` } }\n      );\n      commit(\"setRealPropertyProfiles\", response.data);\n    } catch (err) {\n      console.log(err.response);\n    }\n  },\n  async addBuildingApplication({ commit, getters, dispatch }, payload) {\n    try {\n      const response = await axios.post(\n        `${baseUrl}/api/building-permit-application/`,\n        payload,\n        { headers: { Authorization: `jwt ${getters.authToken}` } }\n      );\n      commit(\"setBuildingApplication\", response.data);\n    } catch (err) {\n      console.log(err.response);\n    }\n  },\n  async updateBuildingApplication({ commit, getters, dispatch }, payload) {\n    try {\n      payload.id = getters.buildingApplication.id;\n      const response = await axios.put(\n        `${baseUrl}/api/building-permit-application/`,\n        payload,\n        { headers: { Authorization: `jwt ${getters.authToken}` } }\n      );\n    } catch (err) {\n      console.log(err.response);\n    }\n  },\n  async addBuildingBasicInformation({ commit, getters }, payload) {\n    try {\n      payload.application_number = getters.buildingApplication.id;\n      const response = await axios.post(\n        `${baseUrl}/api/building-basic-information/`,\n        payload,\n        { headers: { Authorization: `jwt ${getters.authToken}` } }\n      );\n      await commit(\"setBuildingBasicInformation\", response.data);\n      commit(\"setBuildingBasicInfoHasError\", false);\n    } catch (err) {\n      commit(\"setBuildingBasicInfoHasError\", true);\n      let errors = { key: \"basic_information\", value: err.response.data };\n      commit(\"buildingSetStepOneErrors\", errors);\n      console.log(err);\n    }\n  },\n  async updateBuildingBasicInformation({ commit, getters }, payload) {\n    try {\n      payload.id = getters.buildingBasicInformation.id;\n      const response = await axios.put(\n        `${baseUrl}/api/building-basic-information/`,\n        payload,\n        { headers: { Authorization: `jwt ${getters.authToken}` } }\n      );\n      commit(\"setBuildingBasicInformation\", response.data);\n      commit(\"setBuildingBasicInfoHasError\", false);\n    } catch (err) {\n      let errors = { key: \"basic_information\", value: err.response.data };\n      commit(\"buildingSetStepOneErrors\", errors);\n      commit(\"setBuildingBasicInfoHasError\", true);\n      console.log(err.response);\n    }\n  },\n  async addBuildingDetails({ commit, getters }, payload) {\n    try {\n      payload.application_number = getters.buildingApplication.id;\n      const response = await axios.post(\n        `${baseUrl}/api/building-details/`,\n        payload,\n        { headers: { Authorization: `jwt ${getters.authToken}` } }\n      );\n      commit(\"setBuildingDetailsHasError\", false);\n      commit(\"setBuildingDetails\", response.data);\n    } catch (err) {\n      let errors = { key: \"building_details\", value: err.response.data };\n      commit(\"buildingSetStepTwoErrors\", errors);\n      commit(\"setBuildingDetailsHasError\", true);\n      console.log(err.response);\n    }\n  },\n  async addBuildingOtherDetails({ commit, getters }, payload) {\n    try {\n      payload.application_number = getters.buildingApplication.id;\n      const response = await axios.post(\n        `${baseUrl}/api/building-other-details/`,\n        payload,\n        { headers: { Authorization: `jwt ${getters.authToken}` } }\n      );\n      commit(\"setBuildingOtherDetailsHasError\", false);\n      commit(\"setBuildingOtherDetails\", response.data);\n    } catch (err) {\n      let errors = { key: \"building_other_details\", value: err.response.data };\n      commit(\"buildingSetStepTwoErrors\", errors);\n      commit(\"setBuildingOtherDetailsHasError\", true);\n      console.log(err.response);\n    }\n  },\n  async updateBuildingDetails({ commit, getters }, payload) {\n    try {\n      payload.id = getters.buildingDetails.id;\n      const response = await axios.put(\n        `${baseUrl}/api/building-details/`,\n        payload,\n        { headers: { Authorization: `jwt ${getters.authToken}` } }\n      );\n      commit(\"setBuildingDetails\", response.data);\n      commit(\"setBuildingDetailsHasError\", false);\n    } catch (err) {\n      let errors = { key: \"building_details\", value: err.response.data };\n      commit(\"buildingSetStepTwoErrors\", errors);\n      commit(\"setBuildingDetailsHasError\", true);\n      console.log(err.response);\n    }\n  },\n  async updateBuildingOtherDetails({ commit, getters }, payload) {\n    try {\n      payload.id = getters.buildingOtherDetails.id;\n      const response = await axios.put(\n        `${baseUrl}/api/building-other-details/`,\n        payload,\n        { headers: { Authorization: `jwt ${getters.authToken}` } }\n      );\n      commit(\"setBuildingOtherDetails\", response.data);\n      commit(\"setBuildingOtherDetailsHasError\", false);\n    } catch (err) {\n      let errors = { key: \"building_other_details\", value: err.response.data };\n      commit(\"buildingSetStepTwoErrors\", errors);\n      console.log(err.response);\n      commit(\"setBuildingOtherDetailsHasError\", true);\n    }\n  },\n  async addBuildingApplicationRequirements({ commit, getters }, payload) {\n    try {\n      const response = await axios.post(\n        `${baseUrl}/api/building-application-requirements/`,\n        payload,\n        { headers: { Authorization: `jwt ${getters.authToken}` } }\n      );\n      commit(\"setBuildingApplicationRequirements\", response.data);\n    } catch (err) {\n      console.log(err.response);\n    }\n  },\n  async uploadBuildingRequirements({ commit, getters, dispatch }, payload) {\n    try {\n      commit(\"setLoading\", true);\n      const response = await axios.post(\n        `${baseUrl}/api/building-file-upload/`,\n        payload,\n        { headers: { Authorization: `jwt ${getters.authToken}` } }\n      );\n      await dispatch(\"getBuildingApplicationRequirements\");\n      commit(\"setLoading\", false);\n    } catch (err) {\n      console.log(err.response);\n      commit(\"setLoading\", false);\n    }\n  },\n  async getBuildingApplicationRequirements({ commit, getters }) {\n    try {\n      let payload = { id: getters.buildingApplicationRequirements.id };\n      const response = await axios.get(\n        `${baseUrl}/api/building-application-requirements/`,\n        {\n          headers: { Authorization: `jwt ${getters.authToken}` },\n          params: payload,\n        }\n      );\n      console.log(response.data.buildingchecklist);\n      response.data.buildingrequirements = response.data.buildingrequirements.filter(\n        (item) => item.is_active == true\n      );\n      commit(\"setBuildingRequirements\", response.data);\n      if (response.data.buildingchecklist.length > 0) {\n        response.data.buildingchecklist.map((item) => {\n          if (item.category === \"legal\") {\n            commit(\"setLegalDocuments\", item);\n          } else if (item.category === \"technical\") {\n            commit(\"setTechnicalDocuments\", item);\n          } else if (item.category === \"supplementary\") {\n            commit(\"setSupplementaryDocuments\", item);\n          } else if (item.category === \"design_plans\") {\n            commit(\"setDesignPlans\", item);\n          } else if (item.category === \"design_specs\") {\n            commit(\"setDesignSpecs\", item);\n          }\n        });\n      }\n      console.log(response.data);\n    } catch (err) {\n      console.log(err);\n    }\n  },\n  async assessBuildingApplication({ commit, getters, dispatch }, payload) {\n    try {\n      const response = await axios.post(\n        `${baseUrl}/staff/building-dept-assessment`,\n        payload,\n        { headers: { Authorization: `jwt ${getters.authToken}` } }\n      );\n      commit(\"setBuildingAssessmentMessage\", response.data.message);\n      if(!getters.isLastBuildingDept){\n        dispatch(\"createPrompt\", {\n          type: \"success\",\n          title: \"Success!\",\n          message: response.data.detail,\n        });\n      }\n    } catch (err) {\n      console.log(err);\n      if (err.response) {\n        console.log(err.response);\n        dispatch(\"createPrompt\", {\n          type: \"error\",\n          title: \"Failed!\",\n          message: err.response.data.detail,\n        });\n      }\n    }\n  },\n  async getBuildingAssessmentResult({ commit, getters }, payload) {\n    try {\n      const response = await axios.get(\n        `${baseUrl}/staff/building-dept-assessment`,\n        {\n          headers: { Authorization: `jwt ${getters.authToken}` },\n          params: payload,\n        }\n      );\n      commit(\"setBuildingAssessmentResult\", response.data);\n    } catch (err) {\n      console.log(err);\n      if (err.response) {\n        console.log(err.response);\n      }\n    }\n  },\n  async checkBuildingDeptCanAssess({ commit, getters }, payload) {\n    try {\n      const response = await axios.get(\n        `${baseUrl}/staff/check-building-dept-if-can-assess`,\n        {\n          headers: { Authorization: `jwt ${getters.authToken}` },\n          params: payload,\n        }\n      );\n      commit(\"setBuildingDeptCanAssess\", response.data.can_assess);\n      commit(\"setIsLastBuildingDept\", response.data.last_department)\n    } catch (err) {\n      console.log(err);\n      if (err.response) {\n        console.log(err.response);\n      }\n    }\n  },\n  async getForBuildingAssessmentList({commit, getters}, page = 1){\n    try {\n      const response = await axios.get(\n        `${baseUrl}/staff/for-building-assessment-list?page=${page}`,\n        {\n          headers: { Authorization: `jwt ${getters.authToken}` },\n        }\n      );\n      commit('setForBuildingAssessmentList', response.data.results)\n      commit(\"setPageCount\", response.data.total_pages);\n    } catch (err) {\n      console.log(err)\n      if(err.response){\n        console.log(err.response.data)\n      }\n    }\n  },\n  async getAssessedBuildingList({ commit, getters }, page = 1) {\n    try {\n      const response = await axios.get(\n        `${baseUrl}/staff/assessed-building-application-list?page=${page}`,\n        {\n          headers: { Authorization: `jwt ${getters.authToken}` },\n        }\n      );\n      commit(\"setAssessedBuildingList\", response.data.results);\n      commit(\"setPageCount\", response.data.total_pages);\n    } catch (err) {\n      console.log(err);\n      if (err.response) {\n        console.log(err.response.data);\n      }\n    }\n  },\n  async resetBuildingAssessment({commit, getters}, payload){\n    try {\n      const response = await axios.put(`${baseUrl}/staff/reset-building-assessment`,payload,{\n        headers: { Authorization: `jwt ${getters.authToken}` },\n      })\n    } catch (err) {\n      console.log(err);\n      if (err.response) {\n        console.log(err.response.data);\n      }\n    }\n  },\n  async getUserBuildingAssessmentResult({ commit, getters }, payload) {\n    try {\n      const response = await axios.get(\n        `${baseUrl}/api/building-assessment-result/`,\n        {\n          headers: { Authorization: `jwt ${getters.authToken}` },\n          params: payload,\n        }\n      );\n      commit(\"setBuildingAssessmentResult\", response.data);\n    } catch (err) {\n      console.log(err);\n      if (err.response) {\n        console.log(err.response);\n      }\n    }\n  },\n};\n\nexport default {\n  state,\n  getters,\n  actions,\n  mutations,\n};\n"]}]}