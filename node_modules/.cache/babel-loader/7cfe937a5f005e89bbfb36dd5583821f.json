{"remainingRequest":"/var/www/html/boss-web/node_modules/babel-loader/lib/index.js!/var/www/html/boss-web/src/store/modules/inquiry.js","dependencies":[{"path":"/var/www/html/boss-web/src/store/modules/inquiry.js","mtime":1605179000991},{"path":"/var/www/html/boss-web/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/var/www/html/boss-web/node_modules/babel-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"sources":["/var/www/html/boss-web/src/store/modules/inquiry.js"],"names":["axios","baseUrl","process","env","VUE_APP_API_URL","oneDocToken","VUE_APP_ONE_DOC_TOKEN","getDefaultInquiryState","inquiries","remarks","inquiry","currentInquiry","continueBuildingThread","continueBusinessThread","state","getters","mutations","setInquiries","setRemarks","resetInquiryState","Object","assign","setInquiry","setCurrentInquiry","setContinueBuildingThread","setContinueBusinessThread","actions","getAllUserInquiries","commit","dispatch","page","get","headers","Authorization","authToken","response","data","total_pages","results","console","log","getAllUserRemarks","getAllAdminInquiries","filter_by","getAllAdminRemarks","getInquiry","id","addThread","payload","post","addMessage","adminRespond","put","resolveInquiry","getBusinessRemarks","getBuildingRemarks"],"mappings":"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","sourcesContent":["import axios from \"axios\";\nconst baseUrl = process.env.VUE_APP_API_URL;\nconst oneDocToken = process.env.VUE_APP_ONE_DOC_TOKEN;\n\nconst getDefaultInquiryState = () => {\n  return {\n    inquiries: [],\n    remarks: [],\n    inquiry: {},\n    currentInquiry: \"\",\n    continueBuildingThread: false,\n    continueBusinessThread: false\n  };\n};\nconst state = getDefaultInquiryState();\nconst getters = {\n  inquiries: (state) => state.inquiries,\n  remarks: (state) => state.remarks,\n  inquiry: (state) => state.inquiry,\n  currentInquiry: (state) => state.currentInquiry,\n  continueBuildingThread: (state) => state.continueBuildingThread,\n  continueBusinessThread: (state) => state.continueBusinessThread\n};\nconst mutations = {\n  setInquiries: (state, inquiries) => (state.inquiries = inquiries),\n  setRemarks: (state, remarks) => (state.remarks = remarks),\n  resetInquiryState: (state) => Object.assign(state, getDefaultInquiryState()),\n  setInquiry: (state, inquiry) => (state.inquiry = inquiry),\n  setCurrentInquiry: (state, currentInquiry) =>\n    (state.currentInquiry = currentInquiry),\n  setContinueBuildingThread: (state, continueBuildingThread) => (state.continueBuildingThread = continueBuildingThread),\n  setContinueBusinessThread: (state, continueBusinessThread) => (state.continueBusinessThread = continueBusinessThread)\n};\nconst actions = {\n  async getAllUserInquiries({ commit, dispatch, getters }, page = 1) {\n    try {\n      const response = await axios.get(\n        `${baseUrl}/api/user-inquiry/?page=${page}`,\n        {headers: {Authorization: `jwt ${getters.authToken}`} }\n      );\n      commit(\"setPageCount\", response.data.total_pages);\n      commit(\"setInquiries\", response.data.results);\n    } catch (err) {\n      console.log(err);\n    }\n  },\n  async getAllUserRemarks({ commit, dispatch, getters }, page = 1) {\n    try {\n      const response = await axios.get(\n        `${baseUrl}/api/user-remarks/?page=${page}`,\n        {headers: {Authorization: `jwt ${getters.authToken}`} }\n      );\n      commit(\"setPageCount\", response.data.total_pages);\n      commit(\"setRemarks\", response.data.results);\n    } catch (err) {\n      console.log(err);\n    }\n  },\n  async getAllAdminInquiries(\n    { commit,getters },\n    { page = 1, filter_by = \"all_inquiries\" }\n  ) {\n    try {\n      const response = await axios.get(\n        `${baseUrl}/staff/threads/?page=${page}&filter_by=${filter_by}`,\n        {headers: {Authorization: `jwt ${getters.authToken}`} }\n      );\n      commit(\"setPageCount\", response.data.total_pages);\n      commit(\"setInquiries\", response.data.results);\n    } catch (err) {\n      console.log(err);\n    }\n  },\n  async getAllAdminRemarks(\n    { commit,getters },\n    { page, filter_by = \"all_inquiries\" }\n  ) {\n    try {\n      console.log(page)\n      const response = await axios.get(\n        `${baseUrl}/staff/remarks-threads/?page=${page}&filter_by=${filter_by}`,\n        {headers: {Authorization: `jwt ${getters.authToken}`} }\n      );\n      commit(\"setPageCount\", response.data.total_pages);\n      commit(\"setRemarks\", response.data.results);\n    } catch (err) {\n      console.log(err);\n    }\n  },\n  async getInquiry({ commit, getters  }, id) {\n    try {\n      const response = await axios.get(`${baseUrl}/api/inquiry/?id=${id}`, {headers: {Authorization: `jwt ${getters.authToken}`} });\n      console.log(\"Inquiry details\", response.data);\n      commit(\"setInquiry\", response.data);\n      commit(\"setCurrentInquiry\", response.data.id);\n    } catch (err) {\n      console.log(err);\n    }\n  },\n  async addThread({ commit, getters  }, payload) {\n    try {\n      const response = await axios.post(`${baseUrl}/api/threads/`, payload, {headers: {Authorization: `jwt ${getters.authToken}`} });\n      commit(\"setCurrentInquiry\", response.data.id);\n    } catch (err) {\n      console.log(err);\n    }\n  },\n  async addMessage({ commit, getters  }, payload) {\n    try {\n      const response = await axios.post(`${baseUrl}/api/messages/`, payload, {headers: {Authorization: `jwt ${getters.authToken}`} });\n    } catch (err) {\n      console.log(err);\n    }\n  },\n  async adminRespond({ commit, getters  }, payload) {\n    try {\n      const response = await axios.put(`${baseUrl}/staff/thread/`, payload, {headers: {Authorization: `jwt ${getters.authToken}`} });\n    } catch (err) {\n      console.log(err);\n    }\n  },\n  async resolveInquiry({ commit, getters  }, payload) {\n    try {\n      const response = await axios.put(\n        `${baseUrl}/api/resolve-inquiry/`,\n        payload,\n        {headers: {Authorization: `jwt ${getters.authToken}`} }\n      );\n    } catch (err) {\n      console.log(err.response);\n    }\n  },\n  async getBusinessRemarks({ commit, getters }, payload){\n    try {\n      const response = await axios.get(`${baseUrl}/api/business-remarks-thread/?id=${payload}`, {headers: {Authorization: `jwt ${getters.authToken}`} })\n      if(response.data.id){\n        commit('setCurrentInquiry', response.data.id)\n      }\n    } catch (err) {\n      console.log(err.response);\n    }\n  },\n  async getBuildingRemarks({ commit, getters }, payload){\n    try {\n      const response = await axios.get(`${baseUrl}/api/building-remarks-thread/?id=${payload}`, {headers: {Authorization: `jwt ${getters.authToken}`} })\n      if(response.data.id){\n        commit('setCurrentInquiry', response.data.id)\n      }\n    } catch (err) {\n      console.log(err.response);\n    }\n  }\n};\n\nexport default {\n  state,\n  getters,\n  mutations,\n  actions,\n};\n"]}]}