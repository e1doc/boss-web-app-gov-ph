{"remainingRequest":"/var/www/html/boss-web/node_modules/babel-loader/lib/index.js!/var/www/html/boss-web/src/store/modules/inquiry.js","dependencies":[{"path":"/var/www/html/boss-web/src/store/modules/inquiry.js","mtime":1606876953090},{"path":"/var/www/html/boss-web/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/var/www/html/boss-web/node_modules/babel-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"sources":["/var/www/html/boss-web/src/store/modules/inquiry.js"],"names":["axios","baseUrl","process","env","VUE_APP_API_URL","oneDocToken","VUE_APP_ONE_DOC_TOKEN","getDefaultInquiryState","inquiries","remarks","inquiry","currentInquiry","continueBuildingThread","continueBusinessThread","currentEvaluationFile","FormData","inquirySearch","departmentFilter","state","getters","mutations","setInquiries","setRemarks","resetInquiryState","Object","assign","setInquiry","setCurrentInquiry","setContinueBuildingThread","setContinueBusinessThread","setCurrentEvaluationFile","setInquirySearch","setDepartmentFilter","actions","getAllUserInquiries","commit","dispatch","page","get","headers","Authorization","authToken","response","data","total_pages","results","console","log","getAllUserRemarks","getAllAdminInquiries","filter_by","getAllAdminRemarks","getInquiry","id","addThread","payload","post","addMessage","isEvaluation","newFormData","append","adminRespond","put","resolveInquiry","getBusinessRemarks","getBuildingRemarks","uploadMessageAttachment"],"mappings":"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","sourcesContent":["import axios from \"axios\";\nconst baseUrl = process.env.VUE_APP_API_URL;\nconst oneDocToken = process.env.VUE_APP_ONE_DOC_TOKEN;\n\nconst getDefaultInquiryState = () => {\n  return {\n    inquiries: [],\n    remarks: [],\n    inquiry: {},\n    currentInquiry: \"\",\n    continueBuildingThread: false,\n    continueBusinessThread: false,\n    currentEvaluationFile: new FormData(),\n    inquirySearch: \"\",\n    departmentFilter: \"\"\n  };\n};\nconst state = getDefaultInquiryState();\nconst getters = {\n  inquiries: (state) => state.inquiries,\n  remarks: (state) => state.remarks,\n  inquiry: (state) => state.inquiry,\n  currentInquiry: (state) => state.currentInquiry,\n  continueBuildingThread: (state) => state.continueBuildingThread,\n  continueBusinessThread: (state) => state.continueBusinessThread,\n  currentEvaluationFile: (state) => state.currentEvaluationFile,\n  inquirySearch: (state) => state.inquirySearch,\n  departmentFilter: (state) => state.departmentFilter\n};\nconst mutations = {\n  setInquiries: (state, inquiries) => (state.inquiries = inquiries),\n  setRemarks: (state, remarks) => (state.remarks = remarks),\n  resetInquiryState: (state) => Object.assign(state, getDefaultInquiryState()),\n  setInquiry: (state, inquiry) => (state.inquiry = inquiry),\n  setCurrentInquiry: (state, currentInquiry) =>\n    (state.currentInquiry = currentInquiry),\n  setContinueBuildingThread: (state, continueBuildingThread) => (state.continueBuildingThread = continueBuildingThread),\n  setContinueBusinessThread: (state, continueBusinessThread) => (state.continueBusinessThread = continueBusinessThread),\n  setCurrentEvaluationFile: (state, currentEvaluationFile) => (state.currentEvaluationFile = currentEvaluationFile),\n  setInquirySearch: (state, inquirySearch) => (state.inquirySearch = inquirySearch),\n  setDepartmentFilter: (state, departmentFilter) => (state.departmentFilter = departmentFilter)\n};\nconst actions = {\n  async getAllUserInquiries({ commit, dispatch, getters }, page = 1) {\n    try {\n      const response = await axios.get(\n        `${baseUrl}/api/user-inquiry/?page=${page}`,\n        {headers: {Authorization: `jwt ${getters.authToken}`} }\n      );\n      commit(\"setPageCount\", response.data.total_pages);\n      commit(\"setInquiries\", response.data.results);\n    } catch (err) {\n      console.log(err);\n    }\n  },\n  async getAllUserRemarks({ commit, dispatch, getters }, page = 1) {\n    try {\n      const response = await axios.get(\n        `${baseUrl}/api/user-remarks/?page=${page}`,\n        {headers: {Authorization: `jwt ${getters.authToken}`} }\n      );\n      commit(\"setPageCount\", response.data.total_pages);\n      commit(\"setRemarks\", response.data.results);\n    } catch (err) {\n      console.log(err);\n    }\n  },\n  async getAllAdminInquiries(\n    { commit,getters },\n    { page = 1, filter_by = \"all_inquiries\" }\n  ) {\n    try {\n      const response = await axios.get(\n        `${baseUrl}/staff/threads/?page=${page}&filter_by=${filter_by}&search=${getters.inquirySearch}&department=${getters.departmentFilter}`,\n        {headers: {Authorization: `jwt ${getters.authToken}`} }\n      );\n      commit(\"setPageCount\", response.data.total_pages);\n      commit(\"setInquiries\", response.data.results);\n    } catch (err) {\n      console.log(err);\n    }\n  },\n  async getAllAdminRemarks(\n    { commit,getters },\n    { page, filter_by = \"all_inquiries\" }\n  ) {\n    try {\n      const response = await axios.get(\n        `${baseUrl}/staff/remarks-threads/?page=${page}&filter_by=${filter_by}&search=${getters.inquirySearch}&department=all`,\n        {headers: {Authorization: `jwt ${getters.authToken}`} }\n      );\n      commit(\"setPageCount\", response.data.total_pages);\n      commit(\"setRemarks\", response.data.results);\n    } catch (err) {\n      console.log(err);\n    }\n  },\n  async getInquiry({ commit, getters  }, id) {\n    try {\n      const response = await axios.get(`${baseUrl}/api/inquiry/?id=${id}`, {headers: {Authorization: `jwt ${getters.authToken}`} });\n      commit(\"setInquiry\", response.data);\n      commit(\"setCurrentInquiry\", response.data.id);\n    } catch (err) {\n      console.log(err);\n    }\n  },\n  async addThread({ commit, getters  }, payload) {\n    try {\n      const response = await axios.post(`${baseUrl}/api/threads/`, payload, {headers: {Authorization: `jwt ${getters.authToken}`} });\n      commit(\"setCurrentInquiry\", response.data.id);\n    } catch (err) {\n      console.log(err);\n    }\n  },\n\n  // TODO: \n  async addMessage({ commit, getters, dispatch  }, payload) {\n    try {\n      const response = await axios.post(`${baseUrl}/api/messages/`, payload, {headers: {Authorization: `jwt ${getters.authToken}`} });\n      if( getters.isEvaluation ){\n          let newFormData = getters.currentEvaluationFile\n            newFormData.append(\"message\", response.data.id)\n            await dispatch('uploadMessageAttachment', newFormData)\n            commit(\"setIsEvaluation\", false)\n      }\n    } catch (err) {\n      err.response ? console.log(err.response) : console.log(err)\n    }\n  },\n  async adminRespond({ commit, getters  }, payload) {\n    try {\n      const response = await axios.put(`${baseUrl}/staff/thread/`, payload, {headers: {Authorization: `jwt ${getters.authToken}`} });\n    } catch (err) {\n      console.log(err);\n    }\n  },\n  async resolveInquiry({ commit, getters  }, payload) {\n    try {\n      const response = await axios.put(\n        `${baseUrl}/api/resolve-inquiry/`,\n        payload,\n        {headers: {Authorization: `jwt ${getters.authToken}`} }\n      );\n    } catch (err) {\n      console.log(err.response);\n    }\n  },\n  async getBusinessRemarks({ commit, getters }, payload){\n    try {\n      const response = await axios.get(`${baseUrl}/api/business-remarks-thread/?id=${payload}`, {headers: {Authorization: `jwt ${getters.authToken}`} })\n      if(response.data.id){\n        commit('setCurrentInquiry', response.data.id)\n      }else{\n        commit('setCurrentInquiry', \"\")\n      }\n      console.log(response.data)\n    } catch (err) {\n      console.log(err.response);\n    }\n  },\n  async getBuildingRemarks({ commit, getters }, payload){\n    try {\n      const response = await axios.get(`${baseUrl}/api/building-remarks-thread/?id=${payload}`, {headers: {Authorization: `jwt ${getters.authToken}`} })\n      if(response.data.id){\n        commit('setCurrentInquiry', response.data.id)\n      }else{\n        commit('setCurrentInquiry', \"\")\n      }\n    } catch (err) {\n      console.log(err.response);\n    }\n  },\n  async uploadMessageAttachment({ commit, getters}, payload){\n    try {\n      const response = await axios.post(`${baseUrl}/api/message-attachment-upload/`, payload, {headers: {Authorization: `jwt ${getters.authToken}`} })\n    } catch (err) {\n      err.response ? console.log(err.response) : console.log(err)\n    }\n  }\n};\n\nexport default {\n  state,\n  getters,\n  mutations,\n  actions,\n};\n"]}]}