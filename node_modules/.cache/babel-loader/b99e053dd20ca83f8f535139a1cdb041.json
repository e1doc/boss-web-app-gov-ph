{"remainingRequest":"/var/www/html/boss-web/node_modules/babel-loader/lib/index.js!/var/www/html/boss-web/src/store/modules/inquiry.js","dependencies":[{"path":"/var/www/html/boss-web/src/store/modules/inquiry.js","mtime":1651664677521},{"path":"/var/www/html/boss-web/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/var/www/html/boss-web/node_modules/babel-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"sources":["/var/www/html/boss-web/src/store/modules/inquiry.js"],"names":["axios","baseUrl","process","env","VUE_APP_API_URL","oneDocToken","VUE_APP_ONE_DOC_TOKEN","getDefaultInquiryState","inquiries","remarks","inquiry","currentInquiry","continueBuildingThread","continueBusinessThread","currentEvaluationFile","FormData","inquirySearch","departmentFilter","delinquentPayments","inquiryPageNum","remarksPageNum","delinquentPageNum","isRemarks","clearFileInput","isFileReady","state","getters","mutations","setInquiries","setRemarks","resetInquiryState","Object","assign","setInquiry","setCurrentInquiry","setContinueBuildingThread","setContinueBusinessThread","setCurrentEvaluationFile","setInquirySearch","setDepartmentFilter","setDelinquentPayments","setIsRemarks","setClearFileInput","setIsFileReady","actions","getAllUserInquiries","commit","dispatch","page","get","headers","Authorization","authToken","response","data","total_pages","results","console","log","getAllUserRemarks","getAllAdminInquiries","filter_by","getAllAdminRemarks","getInquiry","id","addThread","payload","post","addMessage","isEvaluation","isDelinquentPayment","newFormData","append","adminRespond","put","resolveInquiry","getBusinessRemarks","getBuildingRemarks","uploadMessageAttachment","getAllDelinquentPayments"],"mappings":"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","sourcesContent":["import axios from \"axios\";\nconst baseUrl = process.env.VUE_APP_API_URL;\nconst oneDocToken = process.env.VUE_APP_ONE_DOC_TOKEN;\n\nconst getDefaultInquiryState = () => {\n  return {\n    inquiries: [],\n    remarks: [],\n    inquiry: {},\n    currentInquiry: \"\",\n    continueBuildingThread: false,\n    continueBusinessThread: false,\n    currentEvaluationFile: new FormData(),\n    inquirySearch: \"\",\n    departmentFilter: \"\",\n    delinquentPayments: [],\n    inquiryPageNum: 1,\n    remarksPageNum: 1,\n    delinquentPageNum: 1,\n    isRemarks: false,\n    clearFileInput: false,\n    isFileReady: false,\n  };\n};\nconst state = getDefaultInquiryState();\nconst getters = {\n  inquiries: (state) => state.inquiries,\n  remarks: (state) => state.remarks,\n  inquiry: (state) => state.inquiry,\n  currentInquiry: (state) => state.currentInquiry,\n  continueBuildingThread: (state) => state.continueBuildingThread,\n  continueBusinessThread: (state) => state.continueBusinessThread,\n  currentEvaluationFile: (state) => state.currentEvaluationFile,\n  inquirySearch: (state) => state.inquirySearch,\n  departmentFilter: (state) => state.departmentFilter,\n  delinquentPayments: (state) => state.delinquentPayments,\n  inquiryPageNum: (state) => state.inquiryPageNum,\n  remarksPageNum: (state) => state.remarksPageNum,\n  delinquentPageNum: (state) => state.delinquentPageNum,\n  isRemarks: (state) => state.isRemarks,\n  clearFileInput: (state) => state.clearFileInput,\n  isFileReady: (state) => state.isFileReady,\n};\nconst mutations = {\n  setInquiries: (state, inquiries) => (state.inquiries = inquiries),\n  setRemarks: (state, remarks) => (state.remarks = remarks),\n  resetInquiryState: (state) => Object.assign(state, getDefaultInquiryState()),\n  setInquiry: (state, inquiry) => (state.inquiry = inquiry),\n  setCurrentInquiry: (state, currentInquiry) =>\n    (state.currentInquiry = currentInquiry),\n  setContinueBuildingThread: (state, continueBuildingThread) =>\n    (state.continueBuildingThread = continueBuildingThread),\n  setContinueBusinessThread: (state, continueBusinessThread) =>\n    (state.continueBusinessThread = continueBusinessThread),\n  setCurrentEvaluationFile: (state, currentEvaluationFile) =>\n    (state.currentEvaluationFile = currentEvaluationFile),\n  setInquirySearch: (state, inquirySearch) =>\n    (state.inquirySearch = inquirySearch),\n  setDepartmentFilter: (state, departmentFilter) =>\n    (state.departmentFilter = departmentFilter),\n  setDelinquentPayments: (state, delinquentPayments) =>\n    (state.delinquentPayments = delinquentPayments),\n  setIsRemarks: (state, isRemarks) => (state.isRemarks = isRemarks),\n  setClearFileInput: (state, clearFileInput) =>\n    (state.clearFileInput = clearFileInput),\n  setIsFileReady: (state, isFileReady) => (state.isFileReady = isFileReady),\n};\nconst actions = {\n  async getAllUserInquiries({ commit, dispatch, getters }, page = 1) {\n    try {\n      const response = await axios.get(\n        `${baseUrl}/api/user-inquiry/?page=${page}`,\n        { headers: { Authorization: `jwt ${getters.authToken}` } }\n      );\n      commit(\"setPageCount\", response.data.total_pages);\n      commit(\"setInquiries\", response.data.results);\n    } catch (err) {\n      console.log(err);\n    }\n  },\n  async getAllUserRemarks({ commit, dispatch, getters }, page = 1) {\n    try {\n      const response = await axios.get(\n        `${baseUrl}/api/user-remarks/?page=${page}`,\n        { headers: { Authorization: `jwt ${getters.authToken}` } }\n      );\n      commit(\"setPageCount\", response.data.total_pages);\n      commit(\"F\", response.data.results);\n    } catch (err) {\n      console.log(err);\n    }\n  },\n  async getAllAdminInquiries(\n    { commit, getters },\n    { page = 1, filter_by = \"all_inquiries\" }\n  ) {\n    try {\n      const response = await axios.get(\n        `${baseUrl}/staff/threads/?page=${page}&filter_by=${filter_by}&search=${getters.inquirySearch}&department=${getters.departmentFilter}`,\n        { headers: { Authorization: `jwt ${getters.authToken}` } }\n      );\n      commit(\"setPageCount\", response.data.total_pages);\n      commit(\"setInquiries\", response.data.results);\n    } catch (err) {\n      console.log(err);\n    }\n  },\n  async getAllAdminRemarks(\n    { commit, getters },\n    { page, filter_by = \"all_inquiries\" }\n  ) {\n    try {\n      const response = await axios.get(\n        `${baseUrl}/staff/remarks-threads/?page=${page}&filter_by=${filter_by}&search=${getters.inquirySearch}&department=all`,\n        { headers: { Authorization: `jwt ${getters.authToken}` } }\n      );\n      commit(\"setPageCount\", response.data.total_pages);\n      commit(\"setRemarks\", response.data.results);\n    } catch (err) {\n      console.log(err);\n    }\n  },\n  async getInquiry({ commit, getters }, id) {\n    try {\n      const response = await axios.get(`${baseUrl}/api/inquiry/?id=${id}`, {\n        headers: { Authorization: `jwt ${getters.authToken}` },\n      });\n      commit(\"setInquiry\", response.data);\n      commit(\"setCurrentInquiry\", response.data.id);\n    } catch (err) {\n      console.log(err);\n    }\n  },\n  async addThread({ commit, getters }, payload) {\n    try {\n      const response = await axios.post(`${baseUrl}/api/threads/`, payload, {\n        headers: { Authorization: `jwt ${getters.authToken}` },\n      });\n      await commit(\"setCurrentInquiry\", response.data.id);\n    } catch (err) {\n      console.log(err);\n    }\n  },\n\n  // TODO:\n  async addMessage({ commit, getters, dispatch }, payload) {\n    try {\n      const response = await axios.post(`${baseUrl}/api/messages/`, payload, {\n        headers: { Authorization: `jwt ${getters.authToken}` },\n      });\n      if (\n        (getters.isEvaluation ||\n          getters.isDelinquentPayment ||\n          getters.isRemarks) &&\n        getters.isFileReady\n      ) {\n        await commit(\"setLoading\", true);\n        let newFormData = getters.currentEvaluationFile;\n        newFormData.append(\"message\", response.data.id);\n        await dispatch(\"uploadMessageAttachment\", newFormData);\n        await commit(\"setIsEvaluation\", false);\n        await commit(\"setLoading\", false);\n        if (getters.isRemarks) {\n          await commit(\"setClearFileInput\", true);\n        }\n      }\n    } catch (err) {\n      await commit(\"setLoading\", false);\n      err.response ? console.log(err.response) : console.log(err);\n    }\n  },\n  async adminRespond({ commit, getters }, payload) {\n    try {\n      const response = await axios.put(`${baseUrl}/staff/thread/`, payload, {\n        headers: { Authorization: `jwt ${getters.authToken}` },\n      });\n    } catch (err) {\n      console.log(err);\n    }\n  },\n  async resolveInquiry({ commit, getters }, payload) {\n    try {\n      const response = await axios.put(\n        `${baseUrl}/api/resolve-inquiry/`,\n        payload,\n        { headers: { Authorization: `jwt ${getters.authToken}` } }\n      );\n    } catch (err) {\n      console.log(err.response);\n    }\n  },\n  async getBusinessRemarks({ commit, getters }, payload) {\n    try {\n      const response = await axios.get(\n        `${baseUrl}/api/business-remarks-thread/?id=${payload}`,\n        { headers: { Authorization: `jwt ${getters.authToken}` } }\n      );\n      if (response.data.id) {\n        commit(\"setCurrentInquiry\", response.data.id);\n      } else {\n        commit(\"setCurrentInquiry\", \"\");\n      }\n      console.log(response.data);\n    } catch (err) {\n      console.log(err.response);\n    }\n  },\n  async getBuildingRemarks({ commit, getters }, payload) {\n    try {\n      const response = await axios.get(\n        `${baseUrl}/api/building-remarks-thread/?id=${payload}`,\n        { headers: { Authorization: `jwt ${getters.authToken}` } }\n      );\n      console.log(response.data);\n      if (response.data.id) {\n        await commit(\"setCurrentInquiry\", response.data.id);\n      } else {\n        await commit(\"setCurrentInquiry\", \"\");\n      }\n    } catch (err) {\n      console.log(err.response);\n    }\n  },\n  async uploadMessageAttachment({ commit, getters }, payload) {\n    try {\n      const response = await axios.post(\n        `${baseUrl}/api/message-attachment-upload/`,\n        payload,\n        { headers: { Authorization: `jwt ${getters.authToken}` } }\n      );\n      await commit(\"setIsFileReady\", false);\n    } catch (err) {\n      await commit(\"setLoading\", false);\n      err.response ? console.log(err.response) : console.log(err);\n    }\n  },\n\n  async getAllDelinquentPayments(\n    { commit, getters },\n    { page = 1, filter_by = \"all_inquiries\" }\n  ) {\n    try {\n      const response = await axios.get(\n        `${baseUrl}/staff/delinquent-payments/?page=${page}&filter_by=${filter_by}&search=${getters.inquirySearch}`,\n        { headers: { Authorization: `jwt ${getters.authToken}` } }\n      );\n      await commit(\"setDelinquentPayments\", response.data.results);\n      await commit(\"setPageCount\", response.data.total_pages);\n    } catch (err) {\n      err.response ? console.log(err.response) : console.log(err);\n    }\n  },\n};\n\nexport default {\n  state,\n  getters,\n  mutations,\n  actions,\n};\n"]}]}