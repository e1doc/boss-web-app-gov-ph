{"remainingRequest":"/var/www/html/boss-web/node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!/var/www/html/boss-web/node_modules/cache-loader/dist/cjs.js??ref--0-0!/var/www/html/boss-web/node_modules/vue-loader/lib/index.js??vue-loader-options!/var/www/html/boss-web/src/pages/ViewBuildingDetails.vue?vue&type=template&id=0946e415&scoped=true&","dependencies":[{"path":"/var/www/html/boss-web/src/pages/ViewBuildingDetails.vue","mtime":1620076411832},{"path":"/var/www/html/boss-web/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/var/www/html/boss-web/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":499162500000},{"path":"/var/www/html/boss-web/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/var/www/html/boss-web/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:dmFyIHJlbmRlciA9IGZ1bmN0aW9uKCkgewogIHZhciBfdm0gPSB0aGlzCiAgdmFyIF9oID0gX3ZtLiRjcmVhdGVFbGVtZW50CiAgdmFyIF9jID0gX3ZtLl9zZWxmLl9jIHx8IF9oCiAgcmV0dXJuIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAibWV0YS1wYXJlbnQtYm94IiB9LCBbCiAgICBfYygiZGl2IiwgeyByZWY6ICJjb250ZW50Iiwgc3RhdGljQ2xhc3M6ICJtZXRhLWNvbnRhaW5lciBmbGV4LXdyYXAiIH0sIFsKICAgICAgX2MoImRpdiIsIHsgc3RhdGljQ2xhc3M6ICJtZXRhLWZvcm0tYm9keSBmbGV4LXdyYXAiIH0sIFsKICAgICAgICBfYygiaDEiLCB7IHN0YXRpY0NsYXNzOiAibWV0YS1mb3JtLXRpdGxlIiB9LCBbCiAgICAgICAgICBfdm0uX3YoIkJ1aWxkaW5nIEFwcGxpY2F0aW9uIERldGFpbHMiKQogICAgICAgIF0pLAogICAgICAgIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAibWV0YS10ZXh0LWdyb3VwIGZsZXgtd3JhcCIgfSwgWwogICAgICAgICAgX2MoImRpdiIsIHsgc3RhdGljQ2xhc3M6ICJtZXRhLXRleHQgbm8tYmIiIH0sIFsKICAgICAgICAgICAgX2MoImRpdiIsIHsgc3RhdGljQ2xhc3M6ICJtZXRhLWxhYmVsIiB9LCBbCiAgICAgICAgICAgICAgX3ZtLl92KCJBcHBsaWNhdGlvbiBOdW1iZXIgOiIpCiAgICAgICAgICAgIF0pLAogICAgICAgICAgICBfYygiZGl2IiwgeyBzdGF0aWNDbGFzczogIm1ldGEtdmFsdWUiIH0sIFsKICAgICAgICAgICAgICBfdm0uX3YoIiAjIiArIF92bS5fcyhfdm0uYnVpbGRpbmdBcHBsaWNhdGlvbi5zZXJpZXNfbnVtYmVyKSArICIgIikKICAgICAgICAgICAgXSkKICAgICAgICAgIF0pLAogICAgICAgICAgX2MoImRpdiIsIHsgc3RhdGljQ2xhc3M6ICJtZXRhLXRleHQiIH0sIFsKICAgICAgICAgICAgX2MoImRpdiIsIHsgc3RhdGljQ2xhc3M6ICJtZXRhLWxhYmVsIiB9LCBbCiAgICAgICAgICAgICAgX3ZtLl92KCJPd25lcnNoaXAgVHlwZToiKQogICAgICAgICAgICBdKSwKICAgICAgICAgICAgX2MoImRpdiIsIHsgc3RhdGljQ2xhc3M6ICJtZXRhLXZhbHVlIiB9LCBbCiAgICAgICAgICAgICAgX3ZtLl92KAogICAgICAgICAgICAgICAgIiAiICsKICAgICAgICAgICAgICAgICAgX3ZtLl9zKAogICAgICAgICAgICAgICAgICAgIF92bS5idWlsZGluZ0Jhc2ljSW5mb3JtYXRpb24ub3duZXJzaGlwX3R5cGUKICAgICAgICAgICAgICAgICAgICAgIC5jaGFyQXQoMCkKICAgICAgICAgICAgICAgICAgICAgIC50b1VwcGVyQ2FzZSgpICsKICAgICAgICAgICAgICAgICAgICAgIF92bS5idWlsZGluZ0Jhc2ljSW5mb3JtYXRpb24ub3duZXJzaGlwX3R5cGUuc2xpY2UoMSkKICAgICAgICAgICAgICAgICAgKSArCiAgICAgICAgICAgICAgICAgICIgIgogICAgICAgICAgICAgICkKICAgICAgICAgICAgXSkKICAgICAgICAgIF0pCiAgICAgICAgXSksCiAgICAgICAgX2MoImRpdiIsIHsgc3RhdGljQ2xhc3M6ICJtZXRhLXRleHQtZ3JvdXAgZmxleC13cmFwIiB9LCBbCiAgICAgICAgICBfYygiZGl2IiwgeyBzdGF0aWNDbGFzczogIm1ldGEtZ3JvdXAtdGl0bGUiIH0sIFsKICAgICAgICAgICAgX3ZtLl92KCJPd25lciAvIEFwcGxpY2FudCA6IikKICAgICAgICAgIF0pLAogICAgICAgICAgX2MoImRpdiIsIHsgc3RhdGljQ2xhc3M6ICJtZXRhLXRleHQgdzMgbm8tYnIiIH0sIFsKICAgICAgICAgICAgX2MoImRpdiIsIHsgc3RhdGljQ2xhc3M6ICJtZXRhLWxhYmVsIiB9LCBbX3ZtLl92KCJMYXN0IE5hbWUgOiIpXSksCiAgICAgICAgICAgIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAibWV0YS12YWx1ZSIgfSwgWwogICAgICAgICAgICAgIF92bS5fdigKICAgICAgICAgICAgICAgICIgIiArIF92bS5fcyhfdm0uYnVpbGRpbmdCYXNpY0luZm9ybWF0aW9uLm93bmVyX2xhc3RfbmFtZSkgKyAiICIKICAgICAgICAgICAgICApCiAgICAgICAgICAgIF0pCiAgICAgICAgICBdKSwKICAgICAgICAgIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAibWV0YS10ZXh0IHczIG5vLWJyIiB9LCBbCiAgICAgICAgICAgIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAibWV0YS1sYWJlbCIgfSwgW192bS5fdigiRmlyc3QgTmFtZSA6IildKSwKICAgICAgICAgICAgX2MoImRpdiIsIHsgc3RhdGljQ2xhc3M6ICJtZXRhLXZhbHVlIiB9LCBbCiAgICAgICAgICAgICAgX3ZtLl92KAogICAgICAgICAgICAgICAgIiAiICsKICAgICAgICAgICAgICAgICAgX3ZtLl9zKF92bS5idWlsZGluZ0Jhc2ljSW5mb3JtYXRpb24ub3duZXJfZmlyc3RfbmFtZSkgKwogICAgICAgICAgICAgICAgICAiICIKICAgICAgICAgICAgICApCiAgICAgICAgICAgIF0pCiAgICAgICAgICBdKSwKICAgICAgICAgIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAibWV0YS10ZXh0IHczIG5vLWJyIiB9LCBbCiAgICAgICAgICAgIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAibWV0YS1sYWJlbCIgfSwgWwogICAgICAgICAgICAgIF92bS5fdigiTWlkZGxlIEluaXRpYWwgOiIpCiAgICAgICAgICAgIF0pLAogICAgICAgICAgICBfYygiZGl2IiwgeyBzdGF0aWNDbGFzczogIm1ldGEtdmFsdWUiIH0sIFsKICAgICAgICAgICAgICBfdm0uX3YoCiAgICAgICAgICAgICAgICAiICIgKwogICAgICAgICAgICAgICAgICBfdm0uX3MoX3ZtLmJ1aWxkaW5nQmFzaWNJbmZvcm1hdGlvbi5vd25lcl9taWRkbGVfbmFtZSkgKwogICAgICAgICAgICAgICAgICAiICIKICAgICAgICAgICAgICApCiAgICAgICAgICAgIF0pCiAgICAgICAgICBdKSwKICAgICAgICAgIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAibWV0YS10ZXh0IHczIiB9LCBbCiAgICAgICAgICAgIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAibWV0YS1sYWJlbCIgfSwgW192bS5fdigiVElOIDoiKV0pLAogICAgICAgICAgICBfYygiZGl2IiwgeyBzdGF0aWNDbGFzczogIm1ldGEtdmFsdWUiIH0sIFsKICAgICAgICAgICAgICBfdm0uX3YoX3ZtLl9zKF92bS5idWlsZGluZ0Jhc2ljSW5mb3JtYXRpb24udGluKSkKICAgICAgICAgICAgXSkKICAgICAgICAgIF0pCiAgICAgICAgXSksCiAgICAgICAgX2MoImRpdiIsIHsgc3RhdGljQ2xhc3M6ICJtZXRhLXRleHQtZ3JvdXAgZmxleC13cmFwIiB9LCBbCiAgICAgICAgICBfYygiZGl2IiwgeyBzdGF0aWNDbGFzczogIm1ldGEtdGV4dCBuby1iYiIgfSwgWwogICAgICAgICAgICBfYygiZGl2IiwgeyBzdGF0aWNDbGFzczogIm1ldGEtbGFiZWwiIH0sIFtfdm0uX3YoIlRDVCBOby4gOiIpXSksCiAgICAgICAgICAgIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAibWV0YS12YWx1ZSIgfSwgWwogICAgICAgICAgICAgIF92bS5fdihfdm0uX3MoX3ZtLmJ1aWxkaW5nRGV0YWlscy50Y3Rfbm8pKQogICAgICAgICAgICBdKQogICAgICAgICAgXSksCiAgICAgICAgICBfYygiZGl2IiwgeyBzdGF0aWNDbGFzczogIm1ldGEtdGV4dCIgfSwgWwogICAgICAgICAgICBfYygiZGl2IiwgeyBzdGF0aWNDbGFzczogIm1ldGEtbGFiZWwiIH0sIFsKICAgICAgICAgICAgICBfdm0uX3YoIlRheCBEZWMuIE5vLiA6IikKICAgICAgICAgICAgXSksCiAgICAgICAgICAgIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAibWV0YS12YWx1ZSIgfSwgWwogICAgICAgICAgICAgIF92bS5fdihfdm0uX3MoX3ZtLmJ1aWxkaW5nRGV0YWlscy50YXhfZGVjX25vKSkKICAgICAgICAgICAgXSkKICAgICAgICAgIF0pCiAgICAgICAgXSksCiAgICAgICAgX2MoImRpdiIsIHsgc3RhdGljQ2xhc3M6ICJtZXRhLXRleHQtZ3JvdXAgZmxleC13cmFwIiB9LCBbCiAgICAgICAgICBfYygiZGl2IiwgeyBzdGF0aWNDbGFzczogIm1ldGEtZ3JvdXAtdGl0bGUiIH0sIFsKICAgICAgICAgICAgX3ZtLl92KCJMb2NhdGlvbiBvZiBDb25zdHJ1Y3Rpb24gOiIpCiAgICAgICAgICBdKSwKICAgICAgICAgIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAibWV0YS10ZXh0IHc0IG5vLWJyIG5vLWJiIiB9LCBbCiAgICAgICAgICAgIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAibWV0YS1sYWJlbCIgfSwgW192bS5fdigiQWRkcmVzcyBOby4gOiIpXSksCiAgICAgICAgICAgIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAibWV0YS12YWx1ZSIgfSwgWwogICAgICAgICAgICAgIF92bS5fdihfdm0uX3MoX3ZtLmJ1aWxkaW5nRGV0YWlscy5hZGRyZXNzX25vKSkKICAgICAgICAgICAgXSkKICAgICAgICAgIF0pLAogICAgICAgICAgX2MoImRpdiIsIHsgc3RhdGljQ2xhc3M6ICJtZXRhLXRleHQgdzQgbm8tYnIgbm8tYmIiIH0sIFsKICAgICAgICAgICAgX2MoImRpdiIsIHsgc3RhdGljQ2xhc3M6ICJtZXRhLWxhYmVsIiB9LCBbX3ZtLl92KCJMb3QgTm8uIDoiKV0pLAogICAgICAgICAgICBfYygiZGl2IiwgeyBzdGF0aWNDbGFzczogIm1ldGEtdmFsdWUiIH0sIFsKICAgICAgICAgICAgICBfdm0uX3YoX3ZtLl9zKF92bS5idWlsZGluZ0RldGFpbHMubG90X25vKSkKICAgICAgICAgICAgXSkKICAgICAgICAgIF0pLAogICAgICAgICAgX2MoImRpdiIsIHsgc3RhdGljQ2xhc3M6ICJtZXRhLXRleHQgdzQgbm8tYmIiIH0sIFsKICAgICAgICAgICAgX2MoImRpdiIsIHsgc3RhdGljQ2xhc3M6ICJtZXRhLWxhYmVsIiB9LCBbCiAgICAgICAgICAgICAgX3ZtLl92KCJMb3QgTm8uIGNvdW50IChkZWZhdWx0IDEpIDoiKQogICAgICAgICAgICBdKSwKICAgICAgICAgICAgX2MoImRpdiIsIHsgc3RhdGljQ2xhc3M6ICJtZXRhLXZhbHVlIiB9LCBbCiAgICAgICAgICAgICAgX3ZtLl92KF92bS5fcyhfdm0uYnVpbGRpbmdEZXRhaWxzLmxvdF9ub19jb3VudCkpCiAgICAgICAgICAgIF0pCiAgICAgICAgICBdKSwKICAgICAgICAgIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAiY2xlYXJmaXgiIH0pLAogICAgICAgICAgX2MoImRpdiIsIHsgc3RhdGljQ2xhc3M6ICJtZXRhLXRleHQgdzQgbm8tYnIgbm8tYmIiIH0sIFsKICAgICAgICAgICAgX2MoImRpdiIsIHsgc3RhdGljQ2xhc3M6ICJtZXRhLWxhYmVsIiB9LCBbX3ZtLl92KCJCbGsgTm8uIDoiKV0pLAogICAgICAgICAgICBfYygiZGl2IiwgeyBzdGF0aWNDbGFzczogIm1ldGEtdmFsdWUiIH0sIFsKICAgICAgICAgICAgICBfdm0uX3YoX3ZtLl9zKF92bS5idWlsZGluZ0RldGFpbHMuYmxrX25vKSkKICAgICAgICAgICAgXSkKICAgICAgICAgIF0pLAogICAgICAgICAgX2MoImRpdiIsIHsgc3RhdGljQ2xhc3M6ICJtZXRhLXRleHQgdzQgbm8tYnIgbm8tYmIiIH0sIFsKICAgICAgICAgICAgX2MoImRpdiIsIHsgc3RhdGljQ2xhc3M6ICJtZXRhLWxhYmVsIiB9LCBbX3ZtLl92KCJQaGFzZSBOby4gOiIpXSksCiAgICAgICAgICAgIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAibWV0YS12YWx1ZSIgfSwgWwogICAgICAgICAgICAgIF92bS5fdihfdm0uX3MoX3ZtLmJ1aWxkaW5nRGV0YWlscy5waGFzZV9ubykpCiAgICAgICAgICAgIF0pCiAgICAgICAgICBdKSwKICAgICAgICAgIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAibWV0YS10ZXh0IHc0IG5vLWJiIiB9LCBbCiAgICAgICAgICAgIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAibWV0YS1sYWJlbCIgfSwgW192bS5fdigiU3ViZGl2aXNpb24gOiIpXSksCiAgICAgICAgICAgIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAibWV0YS12YWx1ZSIgfSwgWwogICAgICAgICAgICAgIF92bS5fdihfdm0uX3MoX3ZtLmJ1aWxkaW5nRGV0YWlscy5zdWJkaXZpc2lvbl9uYW1lKSkKICAgICAgICAgICAgXSkKICAgICAgICAgIF0pLAogICAgICAgICAgX2MoImRpdiIsIHsgc3RhdGljQ2xhc3M6ICJjbGVhcmZpeCIgfSksCiAgICAgICAgICBfYygiZGl2IiwgeyBzdGF0aWNDbGFzczogIm1ldGEtdGV4dCB3NiBuby1iciBuby1iYiIgfSwgWwogICAgICAgICAgICBfYygiZGl2IiwgeyBzdGF0aWNDbGFzczogIm1ldGEtbGFiZWwiIH0sIFtfdm0uX3YoIlN0cmVldCA6IildKSwKICAgICAgICAgICAgX2MoImRpdiIsIHsgc3RhdGljQ2xhc3M6ICJtZXRhLXZhbHVlIiB9LCBbCiAgICAgICAgICAgICAgX3ZtLl92KF92bS5fcyhfdm0uYnVpbGRpbmdEZXRhaWxzLnN0cmVldCkpCiAgICAgICAgICAgIF0pCiAgICAgICAgICBdKSwKICAgICAgICAgIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAibWV0YS10ZXh0IHc2IG5vLWJiIiB9LCBbCiAgICAgICAgICAgIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAibWV0YS1sYWJlbCIgfSwgW192bS5fdigiRGlzdHJpY3QgOiIpXSksCiAgICAgICAgICAgIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAibWV0YS12YWx1ZSIgfSwgWwogICAgICAgICAgICAgIF92bS5fdihfdm0uX3MoX3ZtLmJ1aWxkaW5nRGV0YWlscy5kaXN0cmljdCkpCiAgICAgICAgICAgIF0pCiAgICAgICAgICBdKSwKICAgICAgICAgIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAiY2xlYXJmaXgiIH0pLAogICAgICAgICAgX2MoImRpdiIsIHsgc3RhdGljQ2xhc3M6ICJtZXRhLXRleHQgbm8tYmIiIH0sIFsKICAgICAgICAgICAgX2MoImRpdiIsIHsgc3RhdGljQ2xhc3M6ICJtZXRhLWxhYmVsIiB9LCBbX3ZtLl92KCJCYXJhbmdheSA6IildKSwKICAgICAgICAgICAgX2MoImRpdiIsIHsgc3RhdGljQ2xhc3M6ICJtZXRhLXZhbHVlIiB9LCBbCiAgICAgICAgICAgICAgX3ZtLl92KF92bS5fcyhfdm0uYnVpbGRpbmdEZXRhaWxzLmJhcmFuZ2F5KSkKICAgICAgICAgICAgXSkKICAgICAgICAgIF0pLAogICAgICAgICAgX2MoImRpdiIsIHsgc3RhdGljQ2xhc3M6ICJtZXRhLXRleHQiIH0sIFsKICAgICAgICAgICAgX2MoImRpdiIsIHsgc3RhdGljQ2xhc3M6ICJtZXRhLWxhYmVsIiB9LCBbCiAgICAgICAgICAgICAgX3ZtLl92KCJDaXR5IC8gUHJvdmluY2U6IikKICAgICAgICAgICAgXSksCiAgICAgICAgICAgIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAibWV0YS12YWx1ZSIgfSwgWwogICAgICAgICAgICAgIF92bS5fdihfdm0uX3MoX3ZtLmJ1aWxkaW5nRGV0YWlscy5jaXR5KSkKICAgICAgICAgICAgXSkKICAgICAgICAgIF0pLAogICAgICAgICAgX2MoImRpdiIsIHsgc3RhdGljQ2xhc3M6ICJtZXRhLXRleHQgbm8tYmIgbXQyMCIgfSwgWwogICAgICAgICAgICBfYygiZGl2IiwgeyBzdGF0aWNDbGFzczogIm1ldGEtbGFiZWwiIH0sIFsKICAgICAgICAgICAgICBfdm0uX3YoIlNjb3BlIG9mIFdvcmsgOiIpCiAgICAgICAgICAgIF0pLAogICAgICAgICAgICBfYygiZGl2IiwgeyBzdGF0aWNDbGFzczogIm1ldGEtdmFsdWUiIH0sIFsKICAgICAgICAgICAgICBfdm0uX3YoCiAgICAgICAgICAgICAgICAiICIgKwogICAgICAgICAgICAgICAgICBfdm0uX3MoCiAgICAgICAgICAgICAgICAgICAgX3ZtLmJ1aWxkaW5nRGV0YWlscy5zY29wZV9vZl93b3JrX290aGVycyA9PT0gIiIKICAgICAgICAgICAgICAgICAgICAgID8gX3ZtLmJ1aWxkaW5nRGV0YWlscy5zY29wZV9vZl93b3JrCiAgICAgICAgICAgICAgICAgICAgICA6IF92bS5idWlsZGluZ0RldGFpbHMuc2NvcGVfb2Zfd29ya19vdGhlcnMKICAgICAgICAgICAgICAgICAgKSArCiAgICAgICAgICAgICAgICAgICIgIgogICAgICAgICAgICAgICkKICAgICAgICAgICAgXSkKICAgICAgICAgIF0pLAogICAgICAgICAgX2MoImRpdiIsIHsgc3RhdGljQ2xhc3M6ICJtZXRhLXRleHQiIH0sIFsKICAgICAgICAgICAgX2MoImRpdiIsIHsgc3RhdGljQ2xhc3M6ICJtZXRhLWxhYmVsIiB9LCBbCiAgICAgICAgICAgICAgX3ZtLl92KCJVc2Ugb3IgQ2hhcmFjdGVyIG9mIE9jY3VwYW5jeSA6IikKICAgICAgICAgICAgXSksCiAgICAgICAgICAgIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAibWV0YS12YWx1ZSIgfSwgWwogICAgICAgICAgICAgIF92bS5fdigKICAgICAgICAgICAgICAgICIgIiArCiAgICAgICAgICAgICAgICAgIF92bS5fcygKICAgICAgICAgICAgICAgICAgICBfdm0uYnVpbGRpbmdEZXRhaWxzLmNoYXJhY3Rlcl9vZl9vY2N1cGFuY3lfb3RoZXJzID09PSAiIgogICAgICAgICAgICAgICAgICAgICAgPyBfdm0uYnVpbGRpbmdEZXRhaWxzLmNoYXJhY3Rlcl9vZl9vY2N1cGFuY3kKICAgICAgICAgICAgICAgICAgICAgIDogX3ZtLmJ1aWxkaW5nRGV0YWlscy5jaGFyYWN0ZXJfb2Zfb2NjdXBhbmN5X290aGVycwogICAgICAgICAgICAgICAgICApICsKICAgICAgICAgICAgICAgICAgIiAiCiAgICAgICAgICAgICAgKQogICAgICAgICAgICBdKQogICAgICAgICAgXSkKICAgICAgICBdKSwKICAgICAgICBfYygiZGl2IiwgeyBzdGF0aWNDbGFzczogIm1ldGEtdGV4dC1ncm91cCBmbGV4LXdyYXAiIH0sIFsKICAgICAgICAgIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAibWV0YS10ZXh0IG5vLWJiIiB9LCBbCiAgICAgICAgICAgIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAibWV0YS1sYWJlbCIgfSwgWwogICAgICAgICAgICAgIF92bS5fdigiVG90YWwgRXN0aW1hdGVkIENvc3QgOiIpCiAgICAgICAgICAgIF0pLAogICAgICAgICAgICBfYygiZGl2IiwgeyBzdGF0aWNDbGFzczogIm1ldGEtdmFsdWUiIH0sIFsKICAgICAgICAgICAgICBfdm0uX3YoCiAgICAgICAgICAgICAgICAiIOKCsSAiICsKICAgICAgICAgICAgICAgICAgX3ZtLl9zKAogICAgICAgICAgICAgICAgICAgIF92bS5mb3JtYXRDdXJyZW5jeSgKICAgICAgICAgICAgICAgICAgICAgIF92bS5idWlsZGluZ090aGVyRGV0YWlscy50b3RhbF9lc3RpbWF0ZWRfY29zdAogICAgICAgICAgICAgICAgICAgICkKICAgICAgICAgICAgICAgICAgKSArCiAgICAgICAgICAgICAgICAgICIgIgogICAgICAgICAgICAgICkKICAgICAgICAgICAgXSkKICAgICAgICAgIF0pLAogICAgICAgICAgX2MoImRpdiIsIHsgc3RhdGljQ2xhc3M6ICJtZXRhLXRleHQgdzYgbm8tYnIgbm8tYmIiIH0sIFsKICAgICAgICAgICAgX2MoImRpdiIsIHsgc3RhdGljQ2xhc3M6ICJtZXRhLWxhYmVsIiB9LCBbCiAgICAgICAgICAgICAgX3ZtLl92KCJOdW1iZXIgb2YgVW5pdHMgOiIpCiAgICAgICAgICAgIF0pLAogICAgICAgICAgICBfYygiZGl2IiwgeyBzdGF0aWNDbGFzczogIm1ldGEtdmFsdWUiIH0sIFsKICAgICAgICAgICAgICBfdm0uX3YoX3ZtLl9zKF92bS5idWlsZGluZ090aGVyRGV0YWlscy51bml0cykpCiAgICAgICAgICAgIF0pCiAgICAgICAgICBdKSwKICAgICAgICAgIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAibWV0YS10ZXh0IHc2IG5vLWJiIiB9LCBbCiAgICAgICAgICAgIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAibWV0YS1sYWJlbCIgfSwgWwogICAgICAgICAgICAgIF92bS5fdigiUHJvcG9zZWQgRGF0ZSBvZiBDb25zdHJ1Y3Rpb24gOiIpCiAgICAgICAgICAgIF0pLAogICAgICAgICAgICBfYygiZGl2IiwgeyBzdGF0aWNDbGFzczogIm1ldGEtdmFsdWUiIH0sIFsKICAgICAgICAgICAgICBfdm0uX3YoCiAgICAgICAgICAgICAgICAiICIgKwogICAgICAgICAgICAgICAgICBfdm0uX3MoCiAgICAgICAgICAgICAgICAgICAgX3ZtLl9mKCJtb21lbnQiKSgKICAgICAgICAgICAgICAgICAgICAgIF92bS5idWlsZGluZ090aGVyRGV0YWlscy5kYXRlX29mX2NvbnN0cnVjdGlvbiwKICAgICAgICAgICAgICAgICAgICAgICJNTU1NIERELCBZWVlZIgogICAgICAgICAgICAgICAgICAgICkKICAgICAgICAgICAgICAgICAgKSArCiAgICAgICAgICAgICAgICAgICIgIgogICAgICAgICAgICAgICkKICAgICAgICAgICAgXSkKICAgICAgICAgIF0pLAogICAgICAgICAgX2MoImRpdiIsIHsgc3RhdGljQ2xhc3M6ICJtZXRhLXRleHQgbm8tYmIiIH0sIFsKICAgICAgICAgICAgX2MoImRpdiIsIHsgc3RhdGljQ2xhc3M6ICJtZXRhLWxhYmVsIiB9LCBbCiAgICAgICAgICAgICAgX3ZtLl92KCJFeHBlY3RlZCBEYXRlIG9mIENvbXBsZXRpb24gOiIpCiAgICAgICAgICAgIF0pLAogICAgICAgICAgICBfYygiZGl2IiwgeyBzdGF0aWNDbGFzczogIm1ldGEtdmFsdWUiIH0sIFsKICAgICAgICAgICAgICBfdm0uX3YoCiAgICAgICAgICAgICAgICAiICIgKwogICAgICAgICAgICAgICAgICBfdm0uX3MoCiAgICAgICAgICAgICAgICAgICAgX3ZtLl9mKCJtb21lbnQiKSgKICAgICAgICAgICAgICAgICAgICAgIF92bS5idWlsZGluZ090aGVyRGV0YWlscy5kYXRlX29mX2NvbXBsZXRpb24sCiAgICAgICAgICAgICAgICAgICAgICAiTU1NTSBERCwgWVlZWSIKICAgICAgICAgICAgICAgICAgICApCiAgICAgICAgICAgICAgICAgICkgKwogICAgICAgICAgICAgICAgICAiICIKICAgICAgICAgICAgICApCiAgICAgICAgICAgIF0pCiAgICAgICAgICBdKSwKICAgICAgICAgIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAibWV0YS10ZXh0IG5vLWJiIiB9LCBbCiAgICAgICAgICAgIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAibWV0YS1sYWJlbCIgfSwgWwogICAgICAgICAgICAgIF92bS5fdigiVG90YWwgRmxvb3IgQXJlYSA6IikKICAgICAgICAgICAgXSksCiAgICAgICAgICAgIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAibWV0YS12YWx1ZSIgfSwgWwogICAgICAgICAgICAgIF92bS5fdigKICAgICAgICAgICAgICAgICIgIiArCiAgICAgICAgICAgICAgICAgIF92bS5fcyhfdm0uYnVpbGRpbmdPdGhlckRldGFpbHMuZmxvb3JfYXJlYSkgKwogICAgICAgICAgICAgICAgICAiIHNxdWFyZSBtZXRlcnMgIgogICAgICAgICAgICAgICkKICAgICAgICAgICAgXSkKICAgICAgICAgIF0pLAogICAgICAgICAgX2MoImRpdiIsIHsgc3RhdGljQ2xhc3M6ICJtZXRhLXRleHQiIH0sIFsKICAgICAgICAgICAgX2MoImRpdiIsIHsgc3RhdGljQ2xhc3M6ICJtZXRhLWxhYmVsIiB9LCBbX3ZtLl92KCJMb3QgQXJlYSA6IildKSwKICAgICAgICAgICAgX2MoImRpdiIsIHsgc3RhdGljQ2xhc3M6ICJtZXRhLXZhbHVlIiB9LCBbCiAgICAgICAgICAgICAgX3ZtLl92KAogICAgICAgICAgICAgICAgIiAiICsKICAgICAgICAgICAgICAgICAgX3ZtLl9zKF92bS5idWlsZGluZ090aGVyRGV0YWlscy5sb3RfYXJlYSkgKwogICAgICAgICAgICAgICAgICAiIHNxdWFyZSBtZXRlcnMgIgogICAgICAgICAgICAgICkKICAgICAgICAgICAgXSkKICAgICAgICAgIF0pCiAgICAgICAgXSksCiAgICAgICAgX3ZtLmJ1aWxkaW5nUmVxdWlyZW1lbnRzCiAgICAgICAgICA/IF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAibWV0YS10ZXh0LWdyb3VwIGZsZXgtd3JhcCIgfSwgWwogICAgICAgICAgICAgIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAibWV0YS1ncm91cC10aXRsZSIgfSwgWwogICAgICAgICAgICAgICAgX3ZtLl92KCJVcGxvYWRlZCBSZXF1aXJlbWVudHMiKQogICAgICAgICAgICAgIF0pLAogICAgICAgICAgICAgIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAicmVxdWlyZW1lbnQtbGlzdCIgfSwgWwogICAgICAgICAgICAgICAgX2MoCiAgICAgICAgICAgICAgICAgICJvbCIsCiAgICAgICAgICAgICAgICAgIF92bS5fbCgKICAgICAgICAgICAgICAgICAgICB0aGlzLmJ1aWxkaW5nUmVxdWlyZW1lbnRzLmJ1aWxkaW5ncmVxdWlyZW1lbnRzLAogICAgICAgICAgICAgICAgICAgIGZ1bmN0aW9uKGl0ZW0sIGluZGV4KSB7CiAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gX2MoCiAgICAgICAgICAgICAgICAgICAgICAgICJsaSIsCiAgICAgICAgICAgICAgICAgICAgICAgIHsga2V5OiBpbmRleCB9LAogICAgICAgICAgICAgICAgICAgICAgICBbCiAgICAgICAgICAgICAgICAgICAgICAgICAgX2MoCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAiYXBwLWxpbmsiLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgeyBhdHRyczogeyB0bzogX3ZtLnJlcGxhY2VVcmwoaXRlbS5maWxlKSB9IH0sCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBbX3ZtLl92KF92bS5fcyhpdGVtLmZpbGVuYW1lKSldCiAgICAgICAgICAgICAgICAgICAgICAgICAgKQogICAgICAgICAgICAgICAgICAgICAgICBdLAogICAgICAgICAgICAgICAgICAgICAgICAxCiAgICAgICAgICAgICAgICAgICAgICApCiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICApLAogICAgICAgICAgICAgICAgICAwCiAgICAgICAgICAgICAgICApCiAgICAgICAgICAgICAgXSkKICAgICAgICAgICAgXSkKICAgICAgICAgIDogX3ZtLl9lKCksCiAgICAgICAgX2MoImRpdiIsIHsgc3RhdGljQ2xhc3M6ICJmbGV4LWNvbHVtbiIgfSwgWwogICAgICAgICAgX2MoImRpdiIsIHsgc3RhdGljQ2xhc3M6ICJzdWJtaXNzaW9uLXRleHQiIH0sIFsKICAgICAgICAgICAgX3ZtLl92KAogICAgICAgICAgICAgICIgU3VibWlzc2lvbiBEYXRlOiAiICsKICAgICAgICAgICAgICAgIF92bS5fcygKICAgICAgICAgICAgICAgICAgX3ZtLl9mKCJtb21lbnQiKSgKICAgICAgICAgICAgICAgICAgICBfdm0uYnVpbGRpbmdBcHBsaWNhdGlvbi5sYXN0X3N1Ym1pdHRlZCwKICAgICAgICAgICAgICAgICAgICAiTU1NTSBERCwgWVlZWSBoaDptbSBBIgogICAgICAgICAgICAgICAgICApCiAgICAgICAgICAgICAgICApICsKICAgICAgICAgICAgICAgICIgIgogICAgICAgICAgICApCiAgICAgICAgICBdKSwKICAgICAgICAgIF92bS5idWlsZGluZ0FwcGxpY2F0aW9uLmFwcGxpY2F0aW9uX3N0YXR1cyA9PSAzIHx8CiAgICAgICAgICBfdm0uYnVpbGRpbmdBcHBsaWNhdGlvbi5hcHBsaWNhdGlvbl9zdGF0dXMgPT0gNQogICAgICAgICAgICA/IF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAiYXNzZXNzbWVudC1yZXN1bHQtbGlzdCBtdDMwIiB9LCBbCiAgICAgICAgICAgICAgICBfYygiZGl2IiwgeyBzdGF0aWNDbGFzczogIm1ldGEtZ3JvdXAtdGl0bGUiIH0sIFsKICAgICAgICAgICAgICAgICAgX3ZtLl92KCJBc3Nlc3NtZW50IFJlc3VsdCIpCiAgICAgICAgICAgICAgICBdKSwKICAgICAgICAgICAgICAgIF9jKAogICAgICAgICAgICAgICAgICAib2wiLAogICAgICAgICAgICAgICAgICBfdm0uX2wodGhpcy5idWlsZGluZ0Fzc2Vzc21lbnRSZXN1bHQsIGZ1bmN0aW9uKGl0ZW0sIGluZGV4KSB7CiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIF9jKCJsaSIsIHsga2V5OiBpbmRleCB9LCBbCiAgICAgICAgICAgICAgICAgICAgICBfYygiZGl2IiwgeyBzdGF0aWNDbGFzczogIm1ldGEtcmVzdWx0LWhvbGRlciIgfSwgWwogICAgICAgICAgICAgICAgICAgICAgICBfYygiZGl2IiwgWwogICAgICAgICAgICAgICAgICAgICAgICAgIF92bS5fdigKICAgICAgICAgICAgICAgICAgICAgICAgICAgICIgIiArCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF92bS5fcyhpdGVtLmRlcGFydG1lbnQpICsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIjogIiArCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF92bS5fcyhpdGVtLnN0YXR1cykKICAgICAgICAgICAgICAgICAgICAgICAgICApLAogICAgICAgICAgICAgICAgICAgICAgICAgIGl0ZW0uY3JlYXRlZF9hdAogICAgICAgICAgICAgICAgICAgICAgICAgICAgPyBfYygic3BhbiIsIFsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBfdm0uX3YoCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAiIC0gIiArCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF92bS5fcygKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBfdm0uX2YoIm1vbWVudCIpKAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaXRlbS5jcmVhdGVkX2F0LAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIk1NTU0gREQsIFlZWVkgaGg6bW0gQSIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICApCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICkKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICApCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF0pCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA6IF92bS5fZSgpCiAgICAgICAgICAgICAgICAgICAgICAgIF0pLAogICAgICAgICAgICAgICAgICAgICAgICBpdGVtLnN0YXR1cyA9PT0gIkRpc2FwcHJvdmVkIgogICAgICAgICAgICAgICAgICAgICAgICAgID8gX2MoCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICJzcGFuIiwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN0YXRpY0NsYXNzOiAibXQ1IG1sMTAgbWIyIG1ldGEtdmlldy1yZW1hcmtzIiwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBvbjogewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2xpY2s6IGZ1bmN0aW9uKCRldmVudCkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gX3ZtLm9wZW5CdWlsZGluZ1JlbWFya3MoCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgX3ZtLmJ1aWxkaW5nQXBwbGljYXRpb24uaWQKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgW192bS5fdigiVmlldyBSZW1hcmtzIildCiAgICAgICAgICAgICAgICAgICAgICAgICAgICApCiAgICAgICAgICAgICAgICAgICAgICAgICAgOiBfdm0uX2UoKQogICAgICAgICAgICAgICAgICAgICAgXSkKICAgICAgICAgICAgICAgICAgICBdKQogICAgICAgICAgICAgICAgICB9KSwKICAgICAgICAgICAgICAgICAgMAogICAgICAgICAgICAgICAgKQogICAgICAgICAgICAgIF0pCiAgICAgICAgICAgIDogX3ZtLl9lKCkKICAgICAgICBdKQogICAgICBdKQogICAgXSkKICBdKQp9CnZhciBzdGF0aWNSZW5kZXJGbnMgPSBbXQpyZW5kZXIuX3dpdGhTdHJpcHBlZCA9IHRydWUKCmV4cG9ydCB7IHJlbmRlciwgc3RhdGljUmVuZGVyRm5zIH0="}]}