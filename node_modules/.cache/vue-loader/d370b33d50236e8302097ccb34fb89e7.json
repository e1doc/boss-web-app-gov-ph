{"remainingRequest":"/var/www/html/boss-web/node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!/var/www/html/boss-web/node_modules/cache-loader/dist/cjs.js??ref--0-0!/var/www/html/boss-web/node_modules/vue-loader/lib/index.js??vue-loader-options!/var/www/html/boss-web/src/pages/admin/ApproveBuildingApplication.vue?vue&type=template&id=320d9553&scoped=true&","dependencies":[{"path":"/var/www/html/boss-web/src/pages/admin/ApproveBuildingApplication.vue","mtime":1651664677521},{"path":"/var/www/html/boss-web/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/var/www/html/boss-web/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":499162500000},{"path":"/var/www/html/boss-web/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/var/www/html/boss-web/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:var render = function() {
  var _vm = this
  var _h = _vm.$createElement
  var _c = _vm._self._c || _h
  return _c(
    "div",
    { staticClass: "meta-parent-box" },
    [
      _c(
        "modal",
        {
          attrs: {
            name: "inspectionModal",
            classes: ["vue-modal"],
            width: "50%",
            height: "auto",
            adaptive: true
          }
        },
        [_c("inspection-modal")],
        1
      ),
      _c("div", { ref: "content", staticClass: "meta-container flex-wrap" }, [
        _c("div", { staticClass: "meta-form-body flex-wrap" }, [
          _c("h1", { staticClass: "meta-form-title" }, [
            _vm._v("Building Application Details")
          ]),
          _c("div", { staticClass: "meta-text-group flex-wrap" }, [
            _c("div", { staticClass: "meta-text no-bb" }, [
              _c("div", { staticClass: "meta-label" }, [
                _vm._v("Application Number :")
              ]),
              _c("div", { staticClass: "meta-value" }, [
                _vm._v(
                  " #" + _vm._s(_vm.buildingApplication.series_number) + " "
                )
              ])
            ]),
            _c("div", { staticClass: "meta-text" }, [
              _c("div", { staticClass: "meta-label" }, [
                _vm._v("Ownership Type:")
              ]),
              _c("div", { staticClass: "meta-value" }, [
                _vm._v(
                  " " +
                    _vm._s(_vm.buildingBasicInformation.ownership_type) +
                    " "
                )
              ])
            ])
          ]),
          _c("div", { staticClass: "meta-text-group flex-wrap" }, [
            _c("div", { staticClass: "meta-group-title" }, [
              _vm._v("Owner / Applicant :")
            ]),
            _c("div", { staticClass: "meta-text w3 no-br" }, [
              _c("div", { staticClass: "meta-label" }, [_vm._v("Last Name :")]),
              _c("div", { staticClass: "meta-value" }, [
                _vm._v(
                  " " +
                    _vm._s(_vm.buildingBasicInformation.owner_last_name) +
                    " "
                )
              ])
            ]),
            _c("div", { staticClass: "meta-text w3 no-br" }, [
              _c("div", { staticClass: "meta-label" }, [
                _vm._v("First Name :")
              ]),
              _c("div", { staticClass: "meta-value" }, [
                _vm._v(
                  " " +
                    _vm._s(_vm.buildingBasicInformation.owner_first_name) +
                    " "
                )
              ])
            ]),
            _c("div", { staticClass: "meta-text w3 no-br" }, [
              _c("div", { staticClass: "meta-label" }, [
                _vm._v("Middle Initial :")
              ]),
              _c("div", { staticClass: "meta-value" }, [
                _vm._v(
                  " " +
                    _vm._s(_vm.buildingBasicInformation.owner_middle_name) +
                    " "
                )
              ])
            ]),
            _c("div", { staticClass: "meta-text w3" }, [
              _c("div", { staticClass: "meta-label" }, [_vm._v("TIN :")]),
              _c("div", { staticClass: "meta-value" }, [
                _vm._v(_vm._s(_vm.buildingBasicInformation.tin))
              ])
            ])
          ]),
          _c("div", { staticClass: "meta-text-group flex-wrap" }, [
            _c("div", { staticClass: "meta-text no-bb" }, [
              _c("div", { staticClass: "meta-label" }, [_vm._v("TCT No. :")]),
              _c("div", { staticClass: "meta-value" }, [
                _vm._v(_vm._s(_vm.buildingDetails.tct_no))
              ])
            ]),
            _c("div", { staticClass: "meta-text" }, [
              _c("div", { staticClass: "meta-label" }, [
                _vm._v("Tax Dec. No. :")
              ]),
              _c("div", { staticClass: "meta-value" }, [
                _vm._v(_vm._s(_vm.buildingDetails.tax_dec_no))
              ])
            ])
          ]),
          _c("div", { staticClass: "meta-text-group flex-wrap" }, [
            _c("div", { staticClass: "meta-group-title" }, [
              _vm._v("Location of Construction :")
            ]),
            _c("div", { staticClass: "meta-text w4 no-br no-bb" }, [
              _c("div", { staticClass: "meta-label" }, [
                _vm._v("Address No. :")
              ]),
              _c("div", { staticClass: "meta-value" }, [
                _vm._v(_vm._s(_vm.buildingDetails.address_no))
              ])
            ]),
            _c("div", { staticClass: "meta-text w4 no-br no-bb" }, [
              _c("div", { staticClass: "meta-label" }, [_vm._v("Lot No. :")]),
              _c("div", { staticClass: "meta-value" }, [
                _vm._v(_vm._s(_vm.buildingDetails.lot_no))
              ])
            ]),
            _c("div", { staticClass: "meta-text w4 no-bb" }, [
              _c("div", { staticClass: "meta-label" }, [
                _vm._v("Lot No. count (default 1) :")
              ]),
              _c("div", { staticClass: "meta-value" }, [
                _vm._v(_vm._s(_vm.buildingDetails.lot_no_count))
              ])
            ]),
            _c("div", { staticClass: "clearfix" }),
            _c("div", { staticClass: "meta-text w4 no-br no-bb" }, [
              _c("div", { staticClass: "meta-label" }, [_vm._v("Blk No. :")]),
              _c("div", { staticClass: "meta-value" }, [
                _vm._v(_vm._s(_vm.buildingDetails.blk_no))
              ])
            ]),
            _c("div", { staticClass: "meta-text w4 no-br no-bb" }, [
              _c("div", { staticClass: "meta-label" }, [_vm._v("Phase No. :")]),
              _c("div", { staticClass: "meta-value" }, [
                _vm._v(_vm._s(_vm.buildingDetails.phase_no))
              ])
            ]),
            _c("div", { staticClass: "meta-text w4 no-bb" }, [
              _c("div", { staticClass: "meta-label" }, [
                _vm._v("Subdivision :")
              ]),
              _c("div", { staticClass: "meta-value" }, [
                _vm._v(_vm._s(_vm.buildingDetails.subdivision_name))
              ])
            ]),
            _c("div", { staticClass: "clearfix" }),
            _c("div", { staticClass: "meta-text w6 no-br no-bb" }, [
              _c("div", { staticClass: "meta-label" }, [_vm._v("Street :")]),
              _c("div", { staticClass: "meta-value" }, [
                _vm._v(_vm._s(_vm.buildingDetails.street))
              ])
            ]),
            _c("div", { staticClass: "meta-text w6 no-bb" }, [
              _c("div", { staticClass: "meta-label" }, [_vm._v("District :")]),
              _c("div", { staticClass: "meta-value" }, [
                _vm._v(_vm._s(_vm.buildingDetails.district))
              ])
            ]),
            _c("div", { staticClass: "clearfix" }),
            _c("div", { staticClass: "meta-text no-bb" }, [
              _c("div", { staticClass: "meta-label" }, [_vm._v("Barangay :")]),
              _c("div", { staticClass: "meta-value" }, [
                _vm._v(_vm._s(_vm.buildingDetails.barangay))
              ])
            ]),
            _c("div", { staticClass: "meta-text" }, [
              _c("div", { staticClass: "meta-label" }, [
                _vm._v("City / Province:")
              ]),
              _c("div", { staticClass: "meta-value" }, [
                _vm._v(_vm._s(_vm.buildingDetails.city))
              ])
            ]),
            _c("div", { staticClass: "meta-text no-bb mt20" }, [
              _c("div", { staticClass: "meta-label" }, [
                _vm._v("Scope of Work :")
              ]),
              _c("div", { staticClass: "meta-value" }, [
                _vm._v(
                  " " +
                    _vm._s(
                      _vm.buildingDetails.scope_of_work_others === ""
                        ? _vm.buildingDetails.scope_of_work
                        : _vm.buildingDetails.scope_of_work_others
                    ) +
                    " "
                )
              ])
            ]),
            _c("div", { staticClass: "meta-text" }, [
              _c("div", { staticClass: "meta-label" }, [
                _vm._v("Use or Character of Occupancy :")
              ]),
              _c("div", { staticClass: "meta-value" }, [
                _vm._v(
                  " " +
                    _vm._s(
                      _vm.buildingDetails.character_of_occupancy_others === ""
                        ? _vm.buildingDetails.character_of_occupancy
                        : _vm.buildingDetails.character_of_occupancy_others
                    ) +
                    " "
                )
              ])
            ])
          ]),
          _c("div", { staticClass: "meta-text-group flex-wrap" }, [
            _c("div", { staticClass: "meta-text no-bb" }, [
              _c("div", { staticClass: "meta-label" }, [
                _vm._v("Total Estimated Cost :")
              ]),
              _c("div", { staticClass: "meta-value" }, [
                _vm._v(
                  " ₱ " +
                    _vm._s(
                      parseFloat(
                        _vm.buildingOtherDetails.total_estimated_cost
                      ).toFixed(2)
                    ) +
                    " "
                )
              ])
            ]),
            _c("div", { staticClass: "meta-text w6 no-br no-bb" }, [
              _c("div", { staticClass: "meta-label" }, [
                _vm._v("Number of Units :")
              ]),
              _c("div", { staticClass: "meta-value" }, [
                _vm._v(_vm._s(_vm.buildingOtherDetails.units))
              ])
            ]),
            _c("div", { staticClass: "meta-text w6 no-bb" }, [
              _c("div", { staticClass: "meta-label" }, [
                _vm._v("Proposed Date of Construction :")
              ]),
              _c("div", { staticClass: "meta-value" }, [
                _vm._v(
                  " " +
                    _vm._s(
                      _vm._f("moment")(
                        _vm.buildingOtherDetails.date_of_construction,
                        "MMMM DD, YYYY"
                      )
                    ) +
                    " "
                )
              ])
            ]),
            _c("div", { staticClass: "meta-text no-bb" }, [
              _c("div", { staticClass: "meta-label" }, [
                _vm._v("Expected Date of Completion :")
              ]),
              _c("div", { staticClass: "meta-value" }, [
                _vm._v(
                  " " +
                    _vm._s(
                      _vm._f("moment")(
                        _vm.buildingOtherDetails.date_of_completion,
                        "MMMM DD, YYYY"
                      )
                    ) +
                    " "
                )
              ])
            ]),
            _c("div", { staticClass: "meta-text no-bb" }, [
              _c("div", { staticClass: "meta-label" }, [
                _vm._v("Total Floor Area :")
              ]),
              _c("div", { staticClass: "meta-value" }, [
                _vm._v(
                  " " +
                    _vm._s(_vm.buildingOtherDetails.floor_area) +
                    " square meters "
                )
              ])
            ]),
            _c("div", { staticClass: "meta-text" }, [
              _c("div", { staticClass: "meta-label" }, [_vm._v("Lot Area :")]),
              _c("div", { staticClass: "meta-value" }, [
                _vm._v(
                  " " +
                    _vm._s(_vm.buildingOtherDetails.lot_area) +
                    " square meters "
                )
              ])
            ])
          ]),
          _vm.buildingRequirements
            ? _c("div", { staticClass: "meta-text-group flex-wrap" }, [
                _c("div", { staticClass: "meta-group-title" }, [
                  _vm._v("Uploaded Requirements Checklist")
                ]),
                _c("div", { staticClass: "meta-form-group mb60" }, [
                  _c("div", { staticClass: "meta-group-title" }, [
                    _vm._v(
                      " A. Legal Documents - Only one PDF File for all legal documents. "
                    )
                  ]),
                  _c("ul", { staticClass: "parent-list" }, [
                    _c("li", [
                      _c("div", { staticClass: "meta-checkbox flex-center" }, [
                        _c("input", {
                          directives: [
                            {
                              name: "model",
                              rawName: "v-model",
                              value: _vm.legal_documents.legal_docs_1,
                              expression: "legal_documents.legal_docs_1"
                            }
                          ],
                          attrs: { type: "checkbox", id: "legal_docs_1" },
                          domProps: {
                            checked: Array.isArray(
                              _vm.legal_documents.legal_docs_1
                            )
                              ? _vm._i(_vm.legal_documents.legal_docs_1, null) >
                                -1
                              : _vm.legal_documents.legal_docs_1
                          },
                          on: {
                            change: function($event) {
                              var $$a = _vm.legal_documents.legal_docs_1,
                                $$el = $event.target,
                                $$c = $$el.checked ? true : false
                              if (Array.isArray($$a)) {
                                var $$v = null,
                                  $$i = _vm._i($$a, $$v)
                                if ($$el.checked) {
                                  $$i < 0 &&
                                    _vm.$set(
                                      _vm.legal_documents,
                                      "legal_docs_1",
                                      $$a.concat([$$v])
                                    )
                                } else {
                                  $$i > -1 &&
                                    _vm.$set(
                                      _vm.legal_documents,
                                      "legal_docs_1",
                                      $$a
                                        .slice(0, $$i)
                                        .concat($$a.slice($$i + 1))
                                    )
                                }
                              } else {
                                _vm.$set(
                                  _vm.legal_documents,
                                  "legal_docs_1",
                                  $$c
                                )
                              }
                            }
                          }
                        }),
                        _c(
                          "div",
                          { staticClass: "custom-checkbox flex-center" },
                          [
                            _c(
                              "span",
                              { staticClass: "check" },
                              [
                                _c("font-awesome-icon", {
                                  staticClass: "mr5 check-icon",
                                  attrs: { icon: "check" }
                                }),
                                _c("font-awesome-icon", {
                                  staticClass: "mr5 x-icon",
                                  attrs: { icon: "times" }
                                })
                              ],
                              1
                            )
                          ]
                        ),
                        _vm._m(0)
                      ]),
                      _vm._m(1)
                    ]),
                    _c("li", [
                      _c("div", { staticClass: "meta-checkbox flex-center" }, [
                        _c("input", {
                          directives: [
                            {
                              name: "model",
                              rawName: "v-model",
                              value: _vm.legal_documents.legal_docs_2,
                              expression: "legal_documents.legal_docs_2"
                            }
                          ],
                          attrs: { type: "checkbox", id: "legal_docs_2" },
                          domProps: {
                            checked: Array.isArray(
                              _vm.legal_documents.legal_docs_2
                            )
                              ? _vm._i(_vm.legal_documents.legal_docs_2, null) >
                                -1
                              : _vm.legal_documents.legal_docs_2
                          },
                          on: {
                            change: function($event) {
                              var $$a = _vm.legal_documents.legal_docs_2,
                                $$el = $event.target,
                                $$c = $$el.checked ? true : false
                              if (Array.isArray($$a)) {
                                var $$v = null,
                                  $$i = _vm._i($$a, $$v)
                                if ($$el.checked) {
                                  $$i < 0 &&
                                    _vm.$set(
                                      _vm.legal_documents,
                                      "legal_docs_2",
                                      $$a.concat([$$v])
                                    )
                                } else {
                                  $$i > -1 &&
                                    _vm.$set(
                                      _vm.legal_documents,
                                      "legal_docs_2",
                                      $$a
                                        .slice(0, $$i)
                                        .concat($$a.slice($$i + 1))
                                    )
                                }
                              } else {
                                _vm.$set(
                                  _vm.legal_documents,
                                  "legal_docs_2",
                                  $$c
                                )
                              }
                            }
                          }
                        }),
                        _c(
                          "div",
                          { staticClass: "custom-checkbox flex-center" },
                          [
                            _c(
                              "span",
                              { staticClass: "check" },
                              [
                                _c("font-awesome-icon", {
                                  staticClass: "mr5 check-icon",
                                  attrs: { icon: "check" }
                                })
                              ],
                              1
                            )
                          ]
                        ),
                        _vm._m(2)
                      ])
                    ]),
                    _c("li", [
                      _c("div", { staticClass: "meta-checkbox flex-center" }, [
                        _c("input", {
                          directives: [
                            {
                              name: "model",
                              rawName: "v-model",
                              value: _vm.legal_documents.legal_docs_3,
                              expression: "legal_documents.legal_docs_3"
                            }
                          ],
                          attrs: { type: "checkbox", id: "legal_docs_3" },
                          domProps: {
                            checked: Array.isArray(
                              _vm.legal_documents.legal_docs_3
                            )
                              ? _vm._i(_vm.legal_documents.legal_docs_3, null) >
                                -1
                              : _vm.legal_documents.legal_docs_3
                          },
                          on: {
                            change: function($event) {
                              var $$a = _vm.legal_documents.legal_docs_3,
                                $$el = $event.target,
                                $$c = $$el.checked ? true : false
                              if (Array.isArray($$a)) {
                                var $$v = null,
                                  $$i = _vm._i($$a, $$v)
                                if ($$el.checked) {
                                  $$i < 0 &&
                                    _vm.$set(
                                      _vm.legal_documents,
                                      "legal_docs_3",
                                      $$a.concat([$$v])
                                    )
                                } else {
                                  $$i > -1 &&
                                    _vm.$set(
                                      _vm.legal_documents,
                                      "legal_docs_3",
                                      $$a
                                        .slice(0, $$i)
                                        .concat($$a.slice($$i + 1))
                                    )
                                }
                              } else {
                                _vm.$set(
                                  _vm.legal_documents,
                                  "legal_docs_3",
                                  $$c
                                )
                              }
                            }
                          }
                        }),
                        _c(
                          "div",
                          { staticClass: "custom-checkbox flex-center" },
                          [
                            _c(
                              "span",
                              { staticClass: "check" },
                              [
                                _c("font-awesome-icon", {
                                  staticClass: "mr5 check-icon",
                                  attrs: { icon: "check" }
                                })
                              ],
                              1
                            )
                          ]
                        ),
                        _vm._m(3)
                      ])
                    ]),
                    _c("li", [
                      _c("div", { staticClass: "meta-checkbox flex-center" }, [
                        _c("input", {
                          directives: [
                            {
                              name: "model",
                              rawName: "v-model",
                              value: _vm.legal_documents.legal_docs_4,
                              expression: "legal_documents.legal_docs_4"
                            }
                          ],
                          attrs: { type: "checkbox", id: "legal_docs_4" },
                          domProps: {
                            checked: Array.isArray(
                              _vm.legal_documents.legal_docs_4
                            )
                              ? _vm._i(_vm.legal_documents.legal_docs_4, null) >
                                -1
                              : _vm.legal_documents.legal_docs_4
                          },
                          on: {
                            change: function($event) {
                              var $$a = _vm.legal_documents.legal_docs_4,
                                $$el = $event.target,
                                $$c = $$el.checked ? true : false
                              if (Array.isArray($$a)) {
                                var $$v = null,
                                  $$i = _vm._i($$a, $$v)
                                if ($$el.checked) {
                                  $$i < 0 &&
                                    _vm.$set(
                                      _vm.legal_documents,
                                      "legal_docs_4",
                                      $$a.concat([$$v])
                                    )
                                } else {
                                  $$i > -1 &&
                                    _vm.$set(
                                      _vm.legal_documents,
                                      "legal_docs_4",
                                      $$a
                                        .slice(0, $$i)
                                        .concat($$a.slice($$i + 1))
                                    )
                                }
                              } else {
                                _vm.$set(
                                  _vm.legal_documents,
                                  "legal_docs_4",
                                  $$c
                                )
                              }
                            }
                          }
                        }),
                        _c(
                          "div",
                          { staticClass: "custom-checkbox flex-center" },
                          [
                            _c(
                              "span",
                              { staticClass: "check" },
                              [
                                _c("font-awesome-icon", {
                                  staticClass: "mr5 check-icon",
                                  attrs: { icon: "check" }
                                }),
                                _c("font-awesome-icon", {
                                  staticClass: "mr5 x-icon",
                                  attrs: { icon: "times" }
                                })
                              ],
                              1
                            )
                          ]
                        ),
                        _vm._m(4)
                      ]),
                      _vm._m(5)
                    ])
                  ])
                ]),
                _c("div", { staticClass: "meta-form-group mb60" }, [
                  _c("div", { staticClass: "meta-group-title" }, [
                    _vm._v("B. Technical Documents")
                  ]),
                  _c("ul", { staticClass: "parent-list" }, [
                    _c("li", [
                      _c("div", { staticClass: "meta-checkbox flex-center" }, [
                        _c("input", {
                          directives: [
                            {
                              name: "model",
                              rawName: "v-model",
                              value: _vm.technical_documents.tech_docs_1,
                              expression: "technical_documents.tech_docs_1"
                            }
                          ],
                          attrs: { type: "checkbox", id: "tech_docs_1" },
                          domProps: {
                            checked: Array.isArray(
                              _vm.technical_documents.tech_docs_1
                            )
                              ? _vm._i(
                                  _vm.technical_documents.tech_docs_1,
                                  null
                                ) > -1
                              : _vm.technical_documents.tech_docs_1
                          },
                          on: {
                            change: function($event) {
                              var $$a = _vm.technical_documents.tech_docs_1,
                                $$el = $event.target,
                                $$c = $$el.checked ? true : false
                              if (Array.isArray($$a)) {
                                var $$v = null,
                                  $$i = _vm._i($$a, $$v)
                                if ($$el.checked) {
                                  $$i < 0 &&
                                    _vm.$set(
                                      _vm.technical_documents,
                                      "tech_docs_1",
                                      $$a.concat([$$v])
                                    )
                                } else {
                                  $$i > -1 &&
                                    _vm.$set(
                                      _vm.technical_documents,
                                      "tech_docs_1",
                                      $$a
                                        .slice(0, $$i)
                                        .concat($$a.slice($$i + 1))
                                    )
                                }
                              } else {
                                _vm.$set(
                                  _vm.technical_documents,
                                  "tech_docs_1",
                                  $$c
                                )
                              }
                            }
                          }
                        }),
                        _c(
                          "div",
                          { staticClass: "custom-checkbox flex-center" },
                          [
                            _c(
                              "span",
                              { staticClass: "check" },
                              [
                                _c("font-awesome-icon", {
                                  staticClass: "mr5 check-icon",
                                  attrs: { icon: "check" }
                                }),
                                _c("font-awesome-icon", {
                                  staticClass: "mr5 x-icon",
                                  attrs: { icon: "times" }
                                })
                              ],
                              1
                            )
                          ]
                        ),
                        _c("label", { attrs: { for: "tech_docs_1" } }, [
                          _vm._v("1. Application Forms")
                        ])
                      ]),
                      _vm._m(6)
                    ])
                  ])
                ]),
                _c("div", { staticClass: "meta-form-group mb60" }, [
                  _c("div", { staticClass: "meta-group-title" }, [
                    _vm._v(" C. Design Specifications and Documents ")
                  ]),
                  _c("ul", { staticClass: "parent-list" }, [
                    _c("li", [
                      _c("div", { staticClass: "meta-checkbox flex-center" }, [
                        _c("input", {
                          directives: [
                            {
                              name: "model",
                              rawName: "v-model",
                              value: _vm.design_specs.specs_1,
                              expression: "design_specs.specs_1"
                            }
                          ],
                          attrs: { type: "checkbox", id: "specs_1" },
                          domProps: {
                            checked: Array.isArray(_vm.design_specs.specs_1)
                              ? _vm._i(_vm.design_specs.specs_1, null) > -1
                              : _vm.design_specs.specs_1
                          },
                          on: {
                            change: function($event) {
                              var $$a = _vm.design_specs.specs_1,
                                $$el = $event.target,
                                $$c = $$el.checked ? true : false
                              if (Array.isArray($$a)) {
                                var $$v = null,
                                  $$i = _vm._i($$a, $$v)
                                if ($$el.checked) {
                                  $$i < 0 &&
                                    _vm.$set(
                                      _vm.design_specs,
                                      "specs_1",
                                      $$a.concat([$$v])
                                    )
                                } else {
                                  $$i > -1 &&
                                    _vm.$set(
                                      _vm.design_specs,
                                      "specs_1",
                                      $$a
                                        .slice(0, $$i)
                                        .concat($$a.slice($$i + 1))
                                    )
                                }
                              } else {
                                _vm.$set(_vm.design_specs, "specs_1", $$c)
                              }
                            }
                          }
                        }),
                        _c(
                          "div",
                          { staticClass: "custom-checkbox flex-center" },
                          [
                            _c(
                              "span",
                              { staticClass: "check" },
                              [
                                _c("font-awesome-icon", {
                                  staticClass: "mr5 check-icon",
                                  attrs: { icon: "check" }
                                }),
                                _c("font-awesome-icon", {
                                  staticClass: "mr5 x-icon",
                                  attrs: { icon: "times" }
                                })
                              ],
                              1
                            )
                          ]
                        ),
                        _c("label", { attrs: { for: "specs_1" } }, [
                          _vm._v("1. Design Specifications and Documents")
                        ])
                      ]),
                      _vm._m(7)
                    ]),
                    _c("li", [
                      _c("div", { staticClass: "meta-checkbox flex-center" }, [
                        _c("input", {
                          directives: [
                            {
                              name: "model",
                              rawName: "v-model",
                              value: _vm.design_specs.specs_2,
                              expression: "design_specs.specs_2"
                            }
                          ],
                          attrs: { type: "checkbox", id: "specs_2" },
                          domProps: {
                            checked: Array.isArray(_vm.design_specs.specs_2)
                              ? _vm._i(_vm.design_specs.specs_2, null) > -1
                              : _vm.design_specs.specs_2
                          },
                          on: {
                            change: function($event) {
                              var $$a = _vm.design_specs.specs_2,
                                $$el = $event.target,
                                $$c = $$el.checked ? true : false
                              if (Array.isArray($$a)) {
                                var $$v = null,
                                  $$i = _vm._i($$a, $$v)
                                if ($$el.checked) {
                                  $$i < 0 &&
                                    _vm.$set(
                                      _vm.design_specs,
                                      "specs_2",
                                      $$a.concat([$$v])
                                    )
                                } else {
                                  $$i > -1 &&
                                    _vm.$set(
                                      _vm.design_specs,
                                      "specs_2",
                                      $$a
                                        .slice(0, $$i)
                                        .concat($$a.slice($$i + 1))
                                    )
                                }
                              } else {
                                _vm.$set(_vm.design_specs, "specs_2", $$c)
                              }
                            }
                          }
                        }),
                        _c(
                          "div",
                          { staticClass: "custom-checkbox flex-center" },
                          [
                            _c(
                              "span",
                              { staticClass: "check" },
                              [
                                _c("font-awesome-icon", {
                                  staticClass: "mr5 check-icon",
                                  attrs: { icon: "check" }
                                }),
                                _c("font-awesome-icon", {
                                  staticClass: "mr5 x-icon",
                                  attrs: { icon: "times" }
                                })
                              ],
                              1
                            )
                          ]
                        ),
                        _vm._m(8)
                      ])
                    ]),
                    _c("li", [
                      _c("div", { staticClass: "meta-checkbox flex-center" }, [
                        _c("input", {
                          directives: [
                            {
                              name: "model",
                              rawName: "v-model",
                              value: _vm.design_specs.specs_3,
                              expression: "design_specs.specs_3"
                            }
                          ],
                          attrs: { type: "checkbox", id: "specs_3" },
                          domProps: {
                            checked: Array.isArray(_vm.design_specs.specs_3)
                              ? _vm._i(_vm.design_specs.specs_3, null) > -1
                              : _vm.design_specs.specs_3
                          },
                          on: {
                            change: function($event) {
                              var $$a = _vm.design_specs.specs_3,
                                $$el = $event.target,
                                $$c = $$el.checked ? true : false
                              if (Array.isArray($$a)) {
                                var $$v = null,
                                  $$i = _vm._i($$a, $$v)
                                if ($$el.checked) {
                                  $$i < 0 &&
                                    _vm.$set(
                                      _vm.design_specs,
                                      "specs_3",
                                      $$a.concat([$$v])
                                    )
                                } else {
                                  $$i > -1 &&
                                    _vm.$set(
                                      _vm.design_specs,
                                      "specs_3",
                                      $$a
                                        .slice(0, $$i)
                                        .concat($$a.slice($$i + 1))
                                    )
                                }
                              } else {
                                _vm.$set(_vm.design_specs, "specs_3", $$c)
                              }
                            }
                          }
                        }),
                        _c(
                          "div",
                          { staticClass: "custom-checkbox flex-center" },
                          [
                            _c(
                              "span",
                              { staticClass: "check" },
                              [
                                _c("font-awesome-icon", {
                                  staticClass: "mr5 check-icon",
                                  attrs: { icon: "check" }
                                }),
                                _c("font-awesome-icon", {
                                  staticClass: "mr5 x-icon",
                                  attrs: { icon: "times" }
                                })
                              ],
                              1
                            )
                          ]
                        ),
                        _vm._m(9)
                      ])
                    ]),
                    _c("li", [
                      _c("div", { staticClass: "meta-checkbox flex-center" }, [
                        _c("input", {
                          directives: [
                            {
                              name: "model",
                              rawName: "v-model",
                              value: _vm.design_specs.specs_4,
                              expression: "design_specs.specs_4"
                            }
                          ],
                          attrs: { type: "checkbox", id: "specs_4" },
                          domProps: {
                            checked: Array.isArray(_vm.design_specs.specs_4)
                              ? _vm._i(_vm.design_specs.specs_4, null) > -1
                              : _vm.design_specs.specs_4
                          },
                          on: {
                            change: function($event) {
                              var $$a = _vm.design_specs.specs_4,
                                $$el = $event.target,
                                $$c = $$el.checked ? true : false
                              if (Array.isArray($$a)) {
                                var $$v = null,
                                  $$i = _vm._i($$a, $$v)
                                if ($$el.checked) {
                                  $$i < 0 &&
                                    _vm.$set(
                                      _vm.design_specs,
                                      "specs_4",
                                      $$a.concat([$$v])
                                    )
                                } else {
                                  $$i > -1 &&
                                    _vm.$set(
                                      _vm.design_specs,
                                      "specs_4",
                                      $$a
                                        .slice(0, $$i)
                                        .concat($$a.slice($$i + 1))
                                    )
                                }
                              } else {
                                _vm.$set(_vm.design_specs, "specs_4", $$c)
                              }
                            }
                          }
                        }),
                        _c(
                          "div",
                          { staticClass: "custom-checkbox flex-center" },
                          [
                            _c(
                              "span",
                              { staticClass: "check" },
                              [
                                _c("font-awesome-icon", {
                                  staticClass: "mr5 check-icon",
                                  attrs: { icon: "check" }
                                }),
                                _c("font-awesome-icon", {
                                  staticClass: "mr5 x-icon",
                                  attrs: { icon: "times" }
                                })
                              ],
                              1
                            )
                          ]
                        ),
                        _vm._m(10)
                      ])
                    ])
                  ])
                ]),
                _c("div", { staticClass: "meta-form-group mb60" }, [
                  _c("div", { staticClass: "meta-group-title" }, [
                    _vm._v("D. Supplementary Documents")
                  ]),
                  _c("ul", { staticClass: "parent-list" }, [
                    _c("li", [
                      _c("div", { staticClass: "meta-checkbox flex-center" }, [
                        _c("input", {
                          directives: [
                            {
                              name: "model",
                              rawName: "v-model",
                              value: _vm.supplementary_documents.supp_docs_1,
                              expression: "supplementary_documents.supp_docs_1"
                            }
                          ],
                          attrs: { type: "checkbox", id: "supp_docs_1" },
                          domProps: {
                            checked: Array.isArray(
                              _vm.supplementary_documents.supp_docs_1
                            )
                              ? _vm._i(
                                  _vm.supplementary_documents.supp_docs_1,
                                  null
                                ) > -1
                              : _vm.supplementary_documents.supp_docs_1
                          },
                          on: {
                            change: function($event) {
                              var $$a = _vm.supplementary_documents.supp_docs_1,
                                $$el = $event.target,
                                $$c = $$el.checked ? true : false
                              if (Array.isArray($$a)) {
                                var $$v = null,
                                  $$i = _vm._i($$a, $$v)
                                if ($$el.checked) {
                                  $$i < 0 &&
                                    _vm.$set(
                                      _vm.supplementary_documents,
                                      "supp_docs_1",
                                      $$a.concat([$$v])
                                    )
                                } else {
                                  $$i > -1 &&
                                    _vm.$set(
                                      _vm.supplementary_documents,
                                      "supp_docs_1",
                                      $$a
                                        .slice(0, $$i)
                                        .concat($$a.slice($$i + 1))
                                    )
                                }
                              } else {
                                _vm.$set(
                                  _vm.supplementary_documents,
                                  "supp_docs_1",
                                  $$c
                                )
                              }
                            }
                          }
                        }),
                        _c(
                          "div",
                          { staticClass: "custom-checkbox flex-center" },
                          [
                            _c(
                              "span",
                              { staticClass: "check" },
                              [
                                _c("font-awesome-icon", {
                                  staticClass: "mr5 check-icon",
                                  attrs: { icon: "check" }
                                }),
                                _c("font-awesome-icon", {
                                  staticClass: "mr5 x-icon",
                                  attrs: { icon: "times" }
                                })
                              ],
                              1
                            )
                          ]
                        ),
                        _vm._m(11)
                      ]),
                      _vm._m(12)
                    ]),
                    _c("li", [
                      _c("div", { staticClass: "meta-checkbox flex-center" }, [
                        _c("input", {
                          directives: [
                            {
                              name: "model",
                              rawName: "v-model",
                              value: _vm.supplementary_documents.supp_docs_2,
                              expression: "supplementary_documents.supp_docs_2"
                            }
                          ],
                          attrs: { type: "checkbox", id: "supp_docs_2" },
                          domProps: {
                            checked: Array.isArray(
                              _vm.supplementary_documents.supp_docs_2
                            )
                              ? _vm._i(
                                  _vm.supplementary_documents.supp_docs_2,
                                  null
                                ) > -1
                              : _vm.supplementary_documents.supp_docs_2
                          },
                          on: {
                            change: function($event) {
                              var $$a = _vm.supplementary_documents.supp_docs_2,
                                $$el = $event.target,
                                $$c = $$el.checked ? true : false
                              if (Array.isArray($$a)) {
                                var $$v = null,
                                  $$i = _vm._i($$a, $$v)
                                if ($$el.checked) {
                                  $$i < 0 &&
                                    _vm.$set(
                                      _vm.supplementary_documents,
                                      "supp_docs_2",
                                      $$a.concat([$$v])
                                    )
                                } else {
                                  $$i > -1 &&
                                    _vm.$set(
                                      _vm.supplementary_documents,
                                      "supp_docs_2",
                                      $$a
                                        .slice(0, $$i)
                                        .concat($$a.slice($$i + 1))
                                    )
                                }
                              } else {
                                _vm.$set(
                                  _vm.supplementary_documents,
                                  "supp_docs_2",
                                  $$c
                                )
                              }
                            }
                          }
                        }),
                        _c(
                          "div",
                          { staticClass: "custom-checkbox flex-center" },
                          [
                            _c(
                              "span",
                              { staticClass: "check" },
                              [
                                _c("font-awesome-icon", {
                                  staticClass: "mr5 check-icon",
                                  attrs: { icon: "check" }
                                }),
                                _c("font-awesome-icon", {
                                  staticClass: "mr5 x-icon",
                                  attrs: { icon: "times" }
                                })
                              ],
                              1
                            )
                          ]
                        ),
                        _vm._m(13)
                      ])
                    ])
                  ])
                ]),
                _c("div", { staticClass: "requirement-list" }, [
                  _c("div", { staticClass: "meta-group-title" }, [
                    _vm._v("Uploaded Requirements")
                  ]),
                  _c(
                    "ol",
                    _vm._l(
                      this.buildingRequirements.buildingrequirements,
                      function(item, index) {
                        return _c(
                          "li",
                          { key: index },
                          [
                            _c(
                              "app-link",
                              { attrs: { to: _vm.replaceUrl(item.file) } },
                              [_vm._v(_vm._s(item.filename))]
                            )
                          ],
                          1
                        )
                      }
                    ),
                    0
                  )
                ]),
                _c("div", { staticClass: "flex-column" }, [
                  _vm.buildingApplication.application_status === 4 ||
                  _vm.buildingApplication.application_status === 5 ||
                  _vm.buildingApplication.application_status === 1
                    ? _c(
                        "div",
                        {
                          staticClass: "mt50 meta-view-remarks",
                          on: {
                            click: function($event) {
                              return _vm.openBuildingRemarks(
                                _vm.buildingApplication.id
                              )
                            }
                          }
                        },
                        [_vm._v(" View Remarks ")]
                      )
                    : _vm._e(),
                  _c("div", { staticClass: "submission-text" }, [
                    _vm._v(
                      " Submission Date: " +
                        _vm._s(
                          _vm._f("moment")(
                            _vm.buildingApplication.last_submitted,
                            "MMMM DD, YYYY hh:mm A"
                          )
                        ) +
                        " "
                    )
                  ]),
                  _vm.buildingApplication.application_status == 3 ||
                  _vm.buildingApplication.application_status == 5
                    ? _c(
                        "div",
                        { staticClass: "assessment-result-list mt30" },
                        [
                          _c("div", { staticClass: "meta-group-title" }, [
                            _vm._v("Assessment Result")
                          ]),
                          _c(
                            "ol",
                            _vm._l(this.buildingAssessmentResult, function(
                              item,
                              index
                            ) {
                              return _c("li", { key: index }, [
                                _c(
                                  "div",
                                  { staticClass: "meta-result-holder" },
                                  [
                                    _c("div", [
                                      _vm._v(
                                        " " +
                                          _vm._s(item.department) +
                                          ": " +
                                          _vm._s(item.status)
                                      ),
                                      item.created_at
                                        ? _c("span", [
                                            _vm._v(
                                              " - " +
                                                _vm._s(
                                                  _vm._f("moment")(
                                                    item.created_at,
                                                    "MMMM DD, YYYY hh:mm A"
                                                  )
                                                )
                                            )
                                          ])
                                        : _vm._e()
                                    ]),
                                    item.status === "Disapproved"
                                      ? _c(
                                          "span",
                                          {
                                            staticClass:
                                              "mt5 ml10 mb2 meta-view-remarks",
                                            on: {
                                              click: function($event) {
                                                return _vm.openBuildingRemarks(
                                                  _vm.buildingApplication.id
                                                )
                                              }
                                            }
                                          },
                                          [_vm._v("View Remarks")]
                                        )
                                      : _vm._e()
                                  ]
                                )
                              ])
                            }),
                            0
                          )
                        ]
                      )
                    : _vm._e()
                ]),
                !_vm.buildingApplication.is_approve &&
                (_vm.groups.includes("superadmin") ||
                  _vm.groups.includes("building_application_approver")) &&
                _vm.buildingApplication.application_status !== 3
                  ? _c(
                      "div",
                      { staticClass: "meta-button-group flex-center" },
                      [
                        _c(
                          "button-block",
                          {
                            attrs: { type: "approve" },
                            nativeOn: {
                              click: function($event) {
                                return _vm.approveApplication(true)
                              }
                            }
                          },
                          [
                            _vm._v(
                              " " +
                                _vm._s(
                                  _vm.buildingApplication.application_status ===
                                    0 ||
                                    _vm.buildingApplication
                                      .application_status === 1
                                    ? "COMPLETE"
                                    : _vm.buildingApplication
                                        .application_status === 2 ||
                                      _vm.buildingApplication
                                        .application_status === 4
                                    ? "FOR ASSESSMENT"
                                    : "FOR PAYMENT"
                                ) +
                                " "
                            )
                          ]
                        ),
                        _c(
                          "button-block",
                          {
                            staticClass: "red-btn",
                            attrs: { type: "disapprove" },
                            nativeOn: {
                              click: function($event) {
                                return _vm.approveApplication(false)
                              }
                            }
                          },
                          [
                            _vm._v(
                              " " +
                                _vm._s(
                                  _vm.buildingApplication.application_status ===
                                    0 ||
                                    _vm.buildingApplication
                                      .application_status === 1
                                    ? "INCOMPLETE"
                                    : "FOR COMPLIANCE"
                                ) +
                                " "
                            )
                          ]
                        )
                      ],
                      1
                    )
                  : _vm._e(),
                _vm.buildingDeptCanAssess &&
                _vm.isAssessmentActive &&
                _vm.buildingApplication.application_status == 3
                  ? _c(
                      "div",
                      { staticClass: "meta-button-group flex-center" },
                      [
                        _c(
                          "button-block",
                          {
                            attrs: { type: "approve" },
                            nativeOn: {
                              click: function($event) {
                                return _vm.assessApplication(true)
                              }
                            }
                          },
                          [
                            _vm._v(
                              " " +
                                _vm._s(
                                  _vm.isLastBuildingDept
                                    ? "FOR PAYMENT"
                                    : "APPROVE"
                                ) +
                                " "
                            )
                          ]
                        ),
                        _c(
                          "button-block",
                          {
                            staticClass: "red-btn",
                            attrs: { type: "disapprove" },
                            nativeOn: {
                              click: function($event) {
                                return _vm.assessApplication(false)
                              }
                            }
                          },
                          [
                            _vm._v(
                              " " +
                                _vm._s(
                                  _vm.isLastBuildingDept
                                    ? "FOR COMPLIANCE"
                                    : "DISAPPROVE"
                                ) +
                                " "
                            )
                          ]
                        )
                      ],
                      1
                    )
                  : _vm._e()
              ])
            : _vm._e()
        ])
      ])
    ],
    1
  )
}
var staticRenderFns = [
  function() {
    var _vm = this
    var _h = _vm.$createElement
    var _c = _vm._self._c || _h
    return _c("label", { attrs: { for: "legal_docs_1" } }, [
      _vm._v("1. Certified true copy of Transfer Certificate of Title (TCT) "),
      _c("span", { staticClass: "copy-indicator" }, [_vm._v("1 Original copy")])
    ])
  },
  function() {
    var _vm = this
    var _h = _vm.$createElement
    var _c = _vm._self._c || _h
    return _c("ul", { staticClass: "main-list" }, [
      _c("li", [
        _vm._v(
          " If TCT is NOT YET in the name of the applicant, any of the following: "
        ),
        _c("span", { staticClass: "copy-indicator" }, [_vm._v("1 Photocopy")]),
        _c("ul", { staticClass: "sub-list" }, [
          _c("li", [_vm._v("Deed of Absolute Sale - Notarized")]),
          _c("li", [_vm._v("Contract to Sell - Notarized")]),
          _c("li", [
            _vm._v(
              " Deed of Assignment / Donation or any equivalent - Notarized "
            )
          ])
        ])
      ]),
      _c("li", [
        _vm._v(
          " If the applicant is a LESSEE or TCT is in the name of a Corporation, upload: "
        ),
        _c("span", { staticClass: "copy-indicator" }, [_vm._v("1 Photocopy")]),
        _c("ul", { staticClass: "sub-list" }, [
          _c("li", [_vm._v("Lease Contract - Notarized")]),
          _c("li", [
            _vm._v(
              " Corporate Secretary's Certificate (authorizing the signatory with general information sheet) - Notarized "
            )
          ])
        ])
      ]),
      _c("li", [
        _vm._v(
          " If the applicant is NOT the registered owner or with co-owner of the land, upload: "
        ),
        _c("ul", { staticClass: "sub-list" }, [
          _c("li", [
            _vm._v(" Affidavit of Consent - Notarized "),
            _c("span", { staticClass: "copy-indicator" }, [
              _vm._v("1 Photocopy")
            ])
          ]),
          _c("li", [
            _vm._v(" Extrajudicial Settlement - Notarized "),
            _c("span", { staticClass: "copy-indicator" }, [
              _vm._v("1 Photocopy")
            ])
          ])
        ])
      ]),
      _c("li", [
        _vm._v(" If the applicant has a Representative "),
        _c("ul", { staticClass: "sub-list" }, [
          _c("li", [
            _vm._v(
              " Authorization Letter to APPLY in behalf of the applicant (with valid ID of applicant and representative) - Notarized "
            ),
            _c("span", { staticClass: "copy-indicator" }, [
              _vm._v("1 Original Copy")
            ])
          ]),
          _c("li", [
            _vm._v(
              " Special Power of Attorney (SPA) to SIGN in behalf of the applicant (with valid ID of applicant and representative) - Notarized "
            ),
            _c("span", { staticClass: "copy-indicator" }, [
              _vm._v("1 Photocopy")
            ])
          ])
        ])
      ])
    ])
  },
  function() {
    var _vm = this
    var _h = _vm.$createElement
    var _c = _vm._self._c || _h
    return _c("label", { attrs: { for: "legal_docs_2" } }, [
      _vm._v("2. Tax Declaration of Real Property "),
      _c("span", { staticClass: "copy-indicator" }, [_vm._v("1 Photocopy")])
    ])
  },
  function() {
    var _vm = this
    var _h = _vm.$createElement
    var _c = _vm._self._c || _h
    return _c("label", { attrs: { for: "legal_docs_3" } }, [
      _vm._v("3. Tax Clearance of Real Property - Current Year "),
      _c("span", { staticClass: "copy-indicator" }, [_vm._v("1 Photocopy")])
    ])
  },
  function() {
    var _vm = this
    var _h = _vm.$createElement
    var _c = _vm._self._c || _h
    return _c("label", { attrs: { for: "legal_docs_4" } }, [
      _vm._v("4. Local and National Agencies Clearances "),
      _c("span", { staticClass: "copy-indicator" }, [_vm._v("1 ORIGINAL COPY")])
    ])
  },
  function() {
    var _vm = this
    var _h = _vm.$createElement
    var _c = _vm._self._c || _h
    return _c("ul", { staticClass: "sub-list" }, [
      _c("li", [_vm._v("Barangay Clearance (for construction)")]),
      _c("li", [_vm._v("Homeowner's Clearance (for construction)")]),
      _c("li", [_vm._v("National Agencies Clearance")]),
      _c("li", [_vm._v("Affidavit of Undertaking - Notarized")])
    ])
  },
  function() {
    var _vm = this
    var _h = _vm.$createElement
    var _c = _vm._self._c || _h
    return _c("ul", { staticClass: "main-list" }, [
      _c("li", [
        _vm._v(
          " United Application Form for Building Permit and FSEC(signed and dry seal by an Engineer/Architect and applicant on all pages) - Notarized "
        ),
        _c("span", { staticClass: "copy-indicator" }, [_vm._v("5 Copies")])
      ]),
      _c("li", [
        _vm._v(" Ancillary Application Forms "),
        _c("span", { staticClass: "copy-indicator" }, [
          _vm._v("5 Copies Each")
        ]),
        _c("ul", { staticClass: "sub-list" }, [
          _c("li", [_vm._v("Architectural Permit")]),
          _c("li", [_vm._v("Civil/Structural Permit")]),
          _c("li", [_vm._v("Sanitary/Plumbing Permit")]),
          _c("li", [_vm._v("Mechanical Permit")]),
          _c("li", [_vm._v("Sign Permit")]),
          _c("li", [_vm._v("Mechanical Permit")]),
          _c("li", [_vm._v("Electronic Permit")])
        ])
      ]),
      _c("li", [
        _vm._v(" Locational Clearance Application Form "),
        _c("span", { staticClass: "copy-indicator" }, [_vm._v("1 Copy")])
      ]),
      _c("li", [
        _vm._v(" Contractor's Temporary Business Permit Application Form "),
        _c("span", { staticClass: "copy-indicator" }, [_vm._v("1 Copy")])
      ])
    ])
  },
  function() {
    var _vm = this
    var _h = _vm.$createElement
    var _c = _vm._self._c || _h
    return _c("ul", { staticClass: "sub-list" }, [
      _c("li", [
        _vm._v(" Project Specification "),
        _c("span", { staticClass: "copy-indicator" }, [_vm._v("2 Copies")])
      ]),
      _c("li", [
        _vm._v(" Bill of Materials "),
        _c("span", { staticClass: "copy-indicator" }, [_vm._v("3 Copies")])
      ]),
      _c("li", [
        _vm._v(
          " Structural Design Analysis and Computation (for structure two(2) storey and above NSCP 5th Edition) "
        ),
        _c("span", { staticClass: "copy-indicator" }, [_vm._v("1 Copy")])
      ]),
      _c("li", [
        _vm._v(
          " Geotech Report/Soil Boring Test Report (for building structures three(3) storey and above) "
        ),
        _c("span", { staticClass: "copy-indicator" }, [_vm._v("1 Copy")])
      ]),
      _c("li", [
        _vm._v(
          " Seismic Analysis (for building exceeding 7.5 meters in height) "
        ),
        _c("span", { staticClass: "copy-indicator" }, [_vm._v("1 Copy")])
      ])
    ])
  },
  function() {
    var _vm = this
    var _h = _vm.$createElement
    var _c = _vm._self._c || _h
    return _c("label", { attrs: { for: "specs_2" } }, [
      _vm._v("2. PRC ID's and PTR of Engineer's and Architect "),
      _c("span", { staticClass: "copy-indicator" }, [_vm._v("1 Photocopy")])
    ])
  },
  function() {
    var _vm = this
    var _h = _vm.$createElement
    var _c = _vm._self._c || _h
    return _c("label", { attrs: { for: "specs_3" } }, [
      _vm._v("3. PCAB License of Electrical Contractor for Electrical Works "),
      _c("span", { staticClass: "copy-indicator" }, [_vm._v("1 Colored Copy")])
    ])
  },
  function() {
    var _vm = this
    var _h = _vm.$createElement
    var _c = _vm._self._c || _h
    return _c("label", { attrs: { for: "specs_4" } }, [
      _vm._v("4. Construction Safety and Health Program (DOLE) "),
      _c("span", { staticClass: "copy-indicator" }, [_vm._v("1 Original Copy")])
    ])
  },
  function() {
    var _vm = this
    var _h = _vm.$createElement
    var _c = _vm._self._c || _h
    return _c("label", { attrs: { for: "supp_docs_1" } }, [
      _vm._v("1. Sketch "),
      _c("span", { staticClass: "copy-indicator" }, [_vm._v("1 Copy")])
    ])
  },
  function() {
    var _vm = this
    var _h = _vm.$createElement
    var _c = _vm._self._c || _h
    return _c("ul", { staticClass: "sub-list" }, [
      _c("li", [
        _vm._v(
          " With clear landmarks leading to the lot with name and number of contact person "
        )
      ])
    ])
  },
  function() {
    var _vm = this
    var _h = _vm.$createElement
    var _c = _vm._self._c || _h
    return _c("label", { attrs: { for: "supp_docs_2" } }, [
      _vm._v("2. Picture of site/location "),
      _c("span", { staticClass: "copy-indicator" }, [_vm._v("1 Colored Copy")])
    ])
  }
]
render._withStripped = true

export { render, staticRenderFns }"}]}